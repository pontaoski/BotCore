declare const event: Events.BaseEvent;
declare const file: _javatypes.java.io.File;
declare const context: _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;

declare namespace Events {
    export interface BaseEvent extends _javatypes.java.lang.Object {
        getEventName(): string;
    }    
    
    export interface CommandContext extends BaseEvent {
        
        
        /**
         * 
         * @param name
         * @return 
         * @since 1.4.2
         * @throws CommandSyntaxException
         */
        getArg(name: string): _javatypes.java.lang.Object;
        getChild(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandContextHelper;
        getRange(): _javatypes.com.mojang.brigadier.context.StringRange;
        getInput(): string;
        
    }    
    
    export interface ClickSlot extends BaseEvent {
        
        /**
         * <a href="https://wiki.vg/Protocol#Click_Window" target="_blank">https://wiki.vg/Protocol#Click_Window</a>
         */
        readonly mode: number;
        readonly button: number;
        readonly slot: number;
        
        /**
         * set to `true` to prevent the default action
         */
        cancel: boolean;
        
        
        /**
         * 
         * @return inventory associated with the event
         */
        getInventory(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<any>;
        toString(): string;
        
    }    
    
    export interface JoinServer extends BaseEvent {
        readonly player: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper</* minecraft classes, as any, because obfuscation: */ any>;
        readonly address: string;
        
        toString(): string;
        
    }    
    
    export interface Heal extends BaseEvent {
        readonly source: string;
        readonly health: number;
        readonly change: number;
        
        toString(): string;
        
    }    
    
    export interface Damage extends BaseEvent {
        readonly attacker: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>;
        readonly source: string;
        readonly health: number;
        readonly change: number;
        
        toString(): string;
        
    }    
    
    export interface Key extends BaseEvent {
        readonly action: number;
        readonly key: string;
        readonly mods: string;
        
        toString(): string;
        
    }    
    
    export interface PlayerJoin extends BaseEvent {
        readonly UUID: string;
        readonly player: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerListEntryHelper;
        
        toString(): string;
        
    }    
    
    export interface AttackBlock extends BaseEvent {
        readonly block: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper;
        readonly side: number;
        
        
    }    
    
    export interface ChunkLoad extends BaseEvent {
        readonly x: number;
        readonly z: number;
        readonly isFull: boolean;
        
        toString(): string;
        
    }    
    
    export interface JoinedTick extends BaseEvent {
        
        toString(): string;
        
    }    
    
    export interface Title extends BaseEvent {
        readonly type: string;
        message: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
        
        toString(): string;
        
    }    
    
    export interface EntityDamaged extends BaseEvent {
        readonly entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>;
        
        /**
         * 
         * @since 1.6.5
         */
        readonly health: number;
        readonly damage: number;
        
        toString(): string;
        
    }    
    
    export interface Sound extends BaseEvent {
        readonly sound: string;
        readonly volume: number;
        readonly pitch: number;
        readonly position: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
        
        toString(): string;
        
    }    
    
    export interface Riding extends BaseEvent {
        readonly state: boolean;
        readonly entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>;
        
        toString(): string;
        
    }    
    
    export interface HeldItemChange extends BaseEvent {
        readonly offHand: boolean;
        readonly item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
        readonly oldItem: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
        
        toString(): string;
        
    }    
    
    export interface AttackEntity extends BaseEvent {
        readonly entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>;
        
        
    }    
    
    export interface ItemDamage extends BaseEvent {
        readonly item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
        readonly damage: number;
        
        toString(): string;
        
    }    
    
    export interface FallFlying extends BaseEvent {
        readonly state: boolean;
        
        toString(): string;
        
    }    
    
    export interface ResourcePackLoaded extends BaseEvent {
        readonly isGameStart: boolean;
        readonly loadedPacks: _javatypes.java.util.List<string>;
        
        toString(): string;
        
    }    
    
    export interface SendMessage extends BaseEvent {
        message: string;
        
        toString(): string;
        
    }    
    
    export interface OpenContainer extends BaseEvent {
        readonly inventory: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<any>;
        readonly screen: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
        cancelled: boolean;
        
        
    }    
    
    export interface InteractEntity extends BaseEvent {
        readonly offhand: boolean;
        readonly result: string;
        readonly entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>;
        
        toString(): string;
        
    }    
    
    export interface ArmorChange extends BaseEvent {
        readonly slot: string;
        readonly item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
        readonly oldItem: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
        
        toString(): string;
        
    }    
    
    export interface Bossbar extends BaseEvent {
        readonly bossBar: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BossBarHelper;
        readonly uuid: string;
        readonly type: string;
        
        toString(): string;
        
    }    
    
    export interface Tick extends BaseEvent {
        
        toString(): string;
        
    }    
    
    export interface Death extends BaseEvent {
        
        toString(): string;
        
    }    
    
    export interface OpenScreen extends BaseEvent {
        readonly screen: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
        readonly screenName: string;
        
        toString(): string;
        
    }    
    
    export interface HungerChange extends BaseEvent {
        readonly foodLevel: number;
        
        toString(): string;
        
    }    
    
    export interface ChunkUnload extends BaseEvent {
        readonly x: number;
        readonly z: number;
        
        toString(): string;
        
    }    
    
    export interface SignEdit extends BaseEvent {
        readonly pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
        closeScreen: boolean;
        signText: _javatypes.java.util.List<string>;
        
        toString(): string;
        
    }    
    
    export interface EntityLoad extends BaseEvent {
        readonly entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>;
        
        toString(): string;
        
    }    
    
    export interface InteractBlock extends BaseEvent {
        readonly offhand: boolean;
        readonly result: string;
        readonly block: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper;
        readonly side: number;
        
        toString(): string;
        
    }    
    
    export interface EntityUnload extends BaseEvent {
        readonly entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>;
        readonly reason: string;
        
        toString(): string;
        
    }    
    
    export interface RecvMessage extends BaseEvent {
        text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
        
        toString(): string;
        
    }    
    
    export interface AirChange extends BaseEvent {
        readonly air: number;
        
        toString(): string;
        
    }    
    
    export interface ItemPickup extends BaseEvent {
        readonly item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
        
        toString(): string;
        
    }    
    
    export interface EXPChange extends BaseEvent {
        readonly progress: number;
        readonly total: number;
        readonly level: number;
        
        /**
         * 
         * @since 1.6.5
         */
        readonly prevProgress: number;
        
        /**
         * 
         * @since 1.6.5
         */
        readonly prevTotal: number;
        
        /**
         * 
         * @since 1.6.5
         */
        readonly prevLevel: number;
        
        toString(): string;
        
    }    
    
    export interface Disconnect extends BaseEvent {
        
        /**
         * 
         * @since 1.6.4
         */
        readonly message: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
        
        toString(): string;
        
    }    
    
    export interface BlockUpdate extends BaseEvent {
        readonly block: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper;
        readonly updateType: string;
        
        toString(): string;
        
    }    
    
    export interface EntityHealed extends BaseEvent {
        readonly entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>;
        readonly health: number;
        readonly damage: number;
        
        toString(): string;
        
    }    
    
    export interface DropSlot extends BaseEvent {
        readonly slot: number;
        
        /**
         * whether it's all or a single item being dropped
         */
        readonly all: boolean;
        
        /**
         * set to `true` to cancel the default action
         */
        cancel: boolean;
        
        
        /**
         * 
         * @return inventory associated with the event
         */
        getInventory(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<any>;
        toString(): string;
        
    }    
    
    export interface DimensionChange extends BaseEvent {
        readonly dimension: string;
        
        toString(): string;
        
    }    
    
    export interface PlayerLeave extends BaseEvent {
        readonly UUID: string;
        readonly player: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerListEntryHelper;
        
        toString(): string;
        
    }    
    
    export interface CodeRender extends BaseEvent {
        readonly cursor: _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.SelectCursor;
        readonly code: string;
        readonly language: string;
        readonly screen: _javatypes.xyz.wagyourtail.jsmacros.client.gui.screens.EditorScreen;
        
        /**
         * you are expected to fill this in with text styling, if not filled, nothing will render
         *  if the code is an empty string, you are still expected to put an empty string as the first line here
         */
        readonly textLines: _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper>;
        
        /**
         * you are expected to fill this with suggestions for autocomplete created using
         *  {@link #createSuggestion}
         */
        readonly autoCompleteSuggestions: _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AutoCompleteSuggestion>;
        
        /**
         * you are expected to fill this with a method to create right click actions.
         *  method should be `(index:number) => Map&lt;string,() => void&gt;`,
         *  meaning it accepts a character index and returns a map of names to actions.
         */
        rightClickActions: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<number, _javatypes.java.lang.Object, _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>>, any>;
        
        
        /**
         * 
         * @return <a target="_blank" href="https://github.com/noties/Prism4j/blob/75ac3dae6f8eff5b1b0396df3b806f44ce86c484/prism4j/src/main/java/io/noties/prism4j/Prism4j.java#L54">Prism4j's
         *      node list</a> you don't have to use it but if you're not compiling your own...
         *      peek at the code of {@link TextStyleCompiler} for the default impl for walking the node tree.
         */
        genPrismNodes(): _javatypes.java.util.List<_javatypes.io.noties.prism4j.Prism4j$Node>;
        
        /**
         * Easy access to the {@link _javatypes.Map} object for use with {@link #rightClickActions}
         * @return specifically a {@link LinkedHashMap}
         */
        createMap(): _javatypes.java.util.Map<any, any>;
        
        /**
         * more convenient access to TextBuilder
         * @return new instance for use with {@link #textLines}
         */
        createTextBuilder(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder;
        createSuggestion(startIndex: number, suggestion: string): _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AutoCompleteSuggestion;
        
        /**
         * 
         * @param startIndex index that is where the suggestion starts from before the already typed part
         * @param suggestion complete suggestion including the already typed part
         * @param displayText how the text should be displayed in the dropdown, default is suggestion text
         * @return a new suggestion object
         */
        createSuggestion(startIndex: number, suggestion: string, displayText: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper): _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AutoCompleteSuggestion;
        
        /**
         * prefix tree data structure written for you, it's a bit intensive to add things to, especially how I wrote it, but
         *  lookup times are much better at least on larger data sets,
         *  so create a single copy of this for your static autocompletes and don't be re-creating this every time, store it
         *  in `globalvars`, probably per language
         * 
         *  or just don't use it, I'm not forcing you to.
         * @return a new {@link StringHashTrie}
         */
        createPrefixTree(): _javatypes.xyz.wagyourtail.StringHashTrie;
        
        /**
         * 
         * @return {@code key -> hex integer} values for theme data points, this can be used with the prism data for
         *      coloring, just have to use {@link TextBuilder#withColor(int, int, int)}
         *      on 1.15 and older versions the integer values with be the default color's index so you can directly pass it
         *      to {@link TextBuilder#withColor(int)}
         */
        getThemeData(): _javatypes.java.util.Map<string, number[]>;
        
    }    
    
    export interface Service extends BaseEvent {
        readonly serviceName: string;
        
        /**
         * when this service is stopped, this is run...
         */
        stopListener: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>;
        
        toString(): string;
        
        /**
         * Put an Integer into the global variable space.
         * @param name
         * @param i
         * @return 
         * @since 1.6.5
         */
        putInt(name: string, i: number): number;
        
        /**
         * put a String into the global variable space.
         * @param name
         * @param str
         * @return 
         * @since 1.6.5
         */
        putString(name: string, str: string): string;
        
        /**
         * put a Double into the global variable space.
         * @param name
         * @param d
         * @return 
         * @since 1.6.5
         */
        putDouble(name: string, d: number): number;
        
        /**
         * put a Boolean into the global variable space.
         * @param name
         * @param b
         * @return 
         * @since 1.6.5
         */
        putBoolean(name: string, b: boolean): boolean;
        
        /**
         * put anything else into the global variable space.
         * @param name
         * @param o
         * @return 
         * @since 1.6.5
         */
        putObject(name: string, o: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
        
        /**
         * Returns the type of the defined item in the global variable space as a string.
         * @param name
         * @return 
         * @since 1.6.5
         */
        getType(name: string): string;
        
        /**
         * Gets an Integer from the global variable space.
         * @param name
         * @return 
         * @since 1.6.5
         */
        getInt(name: string): number;
        
        /**
         * Gets an Integer from the global variable space. and then increment it there.
         * @param name
         * @return 
         * @since 1.6.5
         */
        getAndIncrementInt(name: string): number;
        
        /**
         * Gets an integer from the global variable pace. and then decrement it there.
         * @param name
         * @return 
         * @since 1.6.5
         */
        getAndDecrementInt(name: string): number;
        
        /**
         * increment an Integer in the global variable space. then return it.
         * @param name
         * @return 
         * @since 1.6.5
         */
        incrementAndGetInt(name: string): number;
        
        /**
         * decrement an Integer in the global variable space. then return it.
         * @param name
         * @return 
         * @since 1.6.5
         */
        decrementAndGetInt(name: string): number;
        
        /**
         * Gets a String from the global variable space
         * @param name
         * @return 
         * @since 1.6.5
         */
        getString(name: string): string;
        
        /**
         * Gets a Double from the global variable space.
         * @param name
         * @return 
         * @since 1.6.5
         */
        getDouble(name: string): number;
        
        /**
         * Gets a Boolean from the global variable space.
         * @param name
         * @return 
         * @since 1.6.5
         */
        getBoolean(name: string): boolean;
        
        /**
         * toggles a global boolean and returns its new value
         * @param name
         * @return 
         * @since 1.6.5
         */
        toggleBoolean(name: string): boolean;
        
        /**
         * Gets an Object from the global variable space.
         * @param name
         * @return 
         * @since 1.6.5
         */
        getObject(name: string): _javatypes.java.lang.Object;
        
        /**
         * removes a key from the global varaible space.
         * @param key
         * @since 1.6.5
         */
        remove(key: string): void;
        getRaw(): _javatypes.java.util.Map<string, _javatypes.java.lang.Object>;
        
    }    
    
    export interface ProfileLoad extends BaseEvent {
        readonly profileName: string;
        
        toString(): string;
        
    }    
    
    export interface WrappedScript extends BaseEvent {
        readonly arg1: T;
        readonly arg2: U;
        result: R;
        
        toString(): string;
        setReturnBoolean(b: boolean): void;
        setReturnInt(i: number): void;
        setReturnDouble(d: number): void;
        setReturnString(s: string): void;
        setReturnObject(o: _javatypes.java.lang.Object): void;
        
    }    
    
    export interface Custom extends BaseEvent {
        eventName: string;
        
        
        /**
         * Triggers the event.
         *  Try not to cause infinite looping by triggering the same {@link _javatypes.EventCustom} from its own listeners.
         * @since 1.2.8
         */
        trigger(): void;
        
        /**
         * trigger the event listeners, then run `callback` when they finish.
         * @since 1.3.1
         * @param callback used as a {@link Runnable}, so no args, no return value.
         */
        trigger(callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): void;
        
        /**
         * Triggers the event and waits for it to complete.
         *  In languages with threading issues (js/jep) this may cause circular waiting when triggered from the same thread as
         *  the `jsmacros.on` registration for the event
         * @since 1.2.8
         */
        triggerJoin(): void;
        
        /**
         * Put an Integer into the event.
         * @param name
         * @param i
         * @return 
         * @since 1.2.8
         */
        putInt(name: string, i: number): number;
        
        /**
         * put a String into the event.
         * @param name
         * @param str
         * @return 
         * @since 1.2.8
         */
        putString(name: string, str: string): string;
        
        /**
         * put a Double into the event.
         * @param name
         * @param d
         * @return 
         * @since 1.2.8
         */
        putDouble(name: string, d: number): number;
        
        /**
         * put a Boolean into the event.
         * @param name
         * @param b
         * @return 
         * @since 1.2.8
         */
        putBoolean(name: string, b: boolean): boolean;
        
        /**
         * put anything else into the event.
         * @param name
         * @param o
         * @return 
         * @since 1.2.8
         */
        putObject(name: string, o: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
        
        /**
         * Returns the type of the defined item in the event as a string.
         * @param name
         * @return 
         * @since 1.2.8
         */
        getType(name: string): string;
        
        /**
         * Gets an Integer from the event.
         * @param name
         * @return 
         * @since 1.2.8
         */
        getInt(name: string): number;
        
        /**
         * Gets a String from the event
         * @param name
         * @return 
         * @since 1.2.8
         */
        getString(name: string): string;
        
        /**
         * Gets a Double from the event.
         * @param name
         * @return 
         * @since 1.2.8
         */
        getDouble(name: string): number;
        
        /**
         * Gets a Boolean from the event.
         * @param name
         * @return 
         * @since 1.2.8
         */
        getBoolean(name: string): boolean;
        
        /**
         * Gets an Object from the event.
         * @param name
         * @return 
         * @since 1.2.8
         */
        getObject(name: string): _javatypes.java.lang.Object;
        
        /**
         * 
         * @since 1.6.4
         * @return map backing the event
         */
        getUnderlyingMap(): _javatypes.java.util.Map<string, _javatypes.java.lang.Object>;
        
        /**
         * registers event so you can see it in the gui
         * @since 1.3.0
         */
        registerEvent(): void;
        
    }
}

namespace KeyBind {
    
    /**
     * Dont use this one... get the raw minecraft keycode class.
     * @param keyName
     * @return the raw minecraft keycode class
     */
    function getKeyCode(keyName: string): /* minecraft classes, as any, because obfuscation: */ any;
    
    /**
     * 
     * @since 1.2.2
     * @return A {@link java.util.Map Map} of all the minecraft keybinds.
     */
    function getKeyBindings(): _javatypes.java.util.Map<string, string>;
    
    /**
     * Sets a minecraft keybind to the specified key.
     * @since 1.2.2
     * @param bind
     * @param key
     */
    function setKeyBind(bind: string, key: string): void;
    
    /**
     * Set a key-state for a key.
     * @param keyName
     * @param keyState
     */
    function key(keyName: string, keyState: boolean): void;
    
    /**
     * Set a key-state using the name of the keybind rather than the name of the key.
     *  
     *  This is probably the one you should use.
     * @since 1.2.2
     * @param keyBind
     * @param keyState
     */
    function keyBind(keyBind: string, keyState: boolean): void;
    
    /**
     * 
     * @since 1.2.6 (turned into set instead of list in 1.6.5)
     * @return a set of currently pressed keys.
     */
    function getPressedKeys(): _javatypes.java.util.Set<string>;
    
}

namespace World {
    
    /**
     * returns whether a world is currently loaded
     * @since 1.3.0
     * @return 
     */
    function isWorldLoaded(): boolean;
    
    /**
     * 
     * @return players within render distance.
     */
    function getLoadedPlayers(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerEntityHelper</* minecraft classes, as any, because obfuscation: */ any>>;
    
    /**
     * 
     * @return players on the tablist.
     */
    function getPlayers(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerListEntryHelper>;
    
    /**
     * 
     * @param x
     * @param y
     * @param z
     * @return The block at that position.
     */
    function getBlock(x: number, y: number, z: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper;
    function getBlock(pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper;
    function getBlock(pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper;
    
    /**
     * Usage: <br>
     *  This will return all blocks that are facing south, don't require a tool to break, 
     *  have a hardness of 10 or less and whose name contains either chest or barrel.
     *  <pre>
     *  World.getWorldScanner()
     *      .withBlockFilter("getHardness").is("<=", 10)
     *      .andStringBlockFilter().contains("chest", "barrel")
     *      .withStringStateFilter().contains("facing=south")
     *      .andStateFilter("isToolRequired").is(false)
     *      .build()
     *  </pre>
     * @return a builder to create a WorldScanner
     * @since 1.6.5
     */
    function getWorldScanner(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
    
    /**
     * 
     * @return a scanner for the current world
     * @since 1.6.5
     */
    function getWorldScanner(blockFilter: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockHelper, _javatypes.java.lang.Object, boolean, any>, stateFilter: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockStateHelper, _javatypes.java.lang.Object, boolean, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScanner;
    
    /**
     * 
     * @since 1.6.4
     * @param id
     * @param chunkrange
     * @return 
     */
    function findBlocksMatching(centerX: number, centerZ: number, id: string, chunkrange: number): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D>;
    
    /**
     * 
     * @since 1.6.4
     * @param id
     * @param chunkrange
     * @return 
     */
    function findBlocksMatching(id: string, chunkrange: number): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D>;
    
    /**
     * 
     * @since 1.6.4
     * @param ids
     * @param chunkrange
     * @return 
     */
    function findBlocksMatching(ids: string[], chunkrange: number): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D>;
    
    /**
     * 
     * @since 1.6.4
     * @param centerX
     * @param centerZ
     * @param ids
     * @param chunkrange
     * @return 
     */
    function findBlocksMatching(centerX: number, centerZ: number, ids: string[], chunkrange: number): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D>;
    
    /**
     * 
     * @since 1.6.4
     * @param blockFilter
     * @param stateFilter
     * @param chunkrange
     * @return 
     */
    function findBlocksMatching(blockFilter: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockHelper, _javatypes.java.lang.Object, boolean, any>, stateFilter: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockStateHelper, _javatypes.java.lang.Object, boolean, any>, chunkrange: number): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D>;
    
    /**
     * 
     * @since 1.6.4
     * @param chunkX
     * @param chunkZ
     * @param blockFilter
     * @param stateFilter
     * @param chunkrange
     * @return 
     */
    function findBlocksMatching(chunkX: number, chunkZ: number, blockFilter: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockHelper, _javatypes.java.lang.Object, boolean, any>, stateFilter: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockStateHelper, _javatypes.java.lang.Object, boolean, any>, chunkrange: number): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D>;
    
    /**
     * 
     * @since 1.2.9
     * @return a helper for the scoreboards provided to the client.
     */
    function getScoreboards(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ScoreboardsHelper;
    
    /**
     * 
     * @return all entities in the render distance.
     */
    function getEntities(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>>;
    
    /**
     * raytrace between two points returning the first block hit.
     * @since 1.6.5
     * @param x1
     * @param y1
     * @param z1
     * @param x2
     * @param y2
     * @param z2
     * @param fluid
     * @return 
     */
    function rayTraceBlock(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, fluid: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper;
    
    /**
     * 
     * @since 1.1.2
     * @return the current dimension.
     */
    function getDimension(): string;
    
    /**
     * 
     * @since 1.1.5
     * @return the current biome.
     */
    function getBiome(): string;
    
    /**
     * 
     * @since 1.1.5
     * @return the current world time.
     */
    function getTime(): number;
    
    /**
     * This is supposed to be time of day, but it appears to be the same as {@link _javatypes.FWorld#getTime} to me...
     * @since 1.1.5
     * @return the current world time of day.
     */
    function getTimeOfDay(): number;
    
    /**
     * 
     * @since 1.2.6
     * @return respawn position.
     */
    function getRespawnPos(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
    
    /**
     * 
     * @since 1.2.6
     * @return world difficulty as an {@link java.lang.Integer Integer}.
     */
    function getDifficulty(): number;
    
    /**
     * 
     * @since 1.2.6
     * @return moon phase as an {@link java.lang.Integer Integer}.
     */
    function getMoonPhase(): number;
    
    /**
     * 
     * @since 1.1.2
     * @param x
     * @param y
     * @param z
     * @return sky light as an {@link java.lang.Integer Integer}.
     */
    function getSkyLight(x: number, y: number, z: number): number;
    
    /**
     * 
     * @since 1.1.2
     * @param x
     * @param y
     * @param z
     * @return block light as an {@link java.lang.Integer Integer}.
     */
    function getBlockLight(x: number, y: number, z: number): number;
    
    /**
     * plays a sound file using javax's sound stuff.
     * @since 1.1.7
     * @param file
     * @param volume
     * @return 
     * @throws LineUnavailableException
     * @throws IOException
     * @throws UnsupportedAudioFileException
     */
    function playSoundFile(file: string, volume: number): _javatypes.javax.sound.sampled.Clip;
    
    /**
     * 
     * @since 1.1.7
     * @see FWorld#playSound(String, double, double, double, double, double)
     * @param id
     */
    function playSound(id: string): void;
    
    /**
     * 
     * @since 1.1.7
     * @see FWorld#playSound(String, double, double, double, double, double)
     * @param id
     * @param volume
     */
    function playSound(id: string, volume: number): void;
    
    /**
     * 
     * @since 1.1.7
     * @see FWorld#playSound(String, double, double, double, double, double)
     * @param id
     * @param volume
     * @param pitch
     */
    function playSound(id: string, volume: number, pitch: number): void;
    
    /**
     * plays a minecraft sound using the internal system.
     * @since 1.1.7
     * @param id
     * @param volume
     * @param pitch
     * @param x
     * @param y
     * @param z
     */
    function playSound(id: string, volume: number, pitch: number, x: number, y: number, z: number): void;
    
    /**
     * 
     * @since 1.2.1
     * @return a map of boss bars by the boss bar's UUID.
     */
    function getBossBars(): _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BossBarHelper>;
    
    /**
     * Check whether a chunk is within the render distance and loaded.
     * @since 1.2.2
     * @param chunkX
     * @param chunkZ
     * @return 
     */
    function isChunkLoaded(chunkX: number, chunkZ: number): boolean;
    
    /**
     * 
     * @since 1.2.2
     * @return the current server address as a string ({@code server.address/server.ip:port}).
     */
    function getCurrentServerAddress(): string;
    
    /**
     * 
     * @since 1.2.2 [Citation Needed]
     * @param x
     * @param z
     * @return biome at specified location, only works if the block/chunk is loaded.
     */
    function getBiomeAt(x: number, z: number): string;
    
    /**
     * 
     * @since 1.2.7
     * @return best attempt to measure and give the server tps with various timings.
     */
    function getServerTPS(): string;
    
    /**
     * 
     * @since 1.3.1
     * @return text helper for the top part of the tab list (above the players)
     */
    function getTabListHeader(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
    
    /**
     * 
     * @since 1.3.1
     * @return text helper for the bottom part of the tab list (below the players)
     */
    function getTabListFooter(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
    
    /**
     * 
     * @since 1.2.7
     * @return best attempt to measure and give the server tps.
     */
    function getServerInstantTPS(): number;
    
    /**
     * 
     * @since 1.2.7
     * @return best attempt to measure and give the server tps over the previous 1 minute average.
     */
    function getServer1MAverageTPS(): number;
    
    /**
     * 
     * @since 1.2.7
     * @return best attempt to measure and give the server tps over the previous 5 minute average.
     */
    function getServer5MAverageTPS(): number;
    
    /**
     * 
     * @since 1.2.7
     * @return best attempt to measure and give the server tps over the previous 15 minute average.
     */
    function getServer15MAverageTPS(): number;
    
}

namespace Player {
    
    /**
     * 
     * @return the Inventory handler
     * @see xyz.wagyourtail.jsmacros.client.api.classes.Inventory
     */
    function openInventory(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<any>;
    
    /**
     * 
     * @return the player entity wrapper.
     * @see xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper
     * @since 1.0.3
     */
    function getPlayer(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper</* minecraft classes, as any, because obfuscation: */ any>;
    
    /**
     * 
     * @return the player's current gamemode.
     * @since 1.0.9
     */
    function getGameMode(): string;
    
    /**
     * 
     * @param distance
     * @param fluid
     * @return the block/liquid the player is currently looking at.
     * @see xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper
     * @since 1.0.5
     */
    function rayTraceBlock(distance: number, fluid: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper;
    
    /**
     * 
     * @return the entity the player is currently looking at.
     * @see xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper
     * @since 1.0.5
     */
    function rayTraceEntity(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>;
    
    /**
     * Write to a sign screen if a sign screen is currently open.
     * @param l1
     * @param l2
     * @param l3
     * @param l4
     * @return of success.
     * @since 1.2.2
     */
    function writeSign(l1: string, l2: string, l3: string, l4: string): boolean;
    
    /**
     * 
     * @param folder
     * @param callback calls your method as a {@link Consumer}&lt;{@link TextHelper}&gt;
     * @see #takeScreenshot(String, String, MethodWrapper)
     * @since 1.2.6
     */
    function takeScreenshot(folder: string, callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): void;
    
    /**
     * Take a screenshot and save to a file.
     *  <p>
     *  `file` is the optional one, typescript doesn't like it not being the last one that's optional
     * @param folder
     * @param file
     * @param callback calls your method as a {@link Consumer}&lt;{@link TextHelper}&gt;
     * @since 1.2.6
     */
    function takeScreenshot(folder: string, file: string, callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): void;
    
    /**
     * Creates a new PlayerInput object.
     * @see xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput
     * @since 1.4.0
     */
    function createPlayerInput(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
    
    /**
     * Creates a new PlayerInput object.
     * @see xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput
     * @since 1.4.0
     */
    function createPlayerInput(movementForward: number, movementSideways: number, yaw: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
    
    /**
     * Creates a new PlayerInput object.
     * @see xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput
     * @since 1.4.0
     */
    function createPlayerInput(movementForward: number, yaw: number, jumping: boolean, sprinting: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
    
    /**
     * Creates a new PlayerInput object.
     * @param movementForward 1 = forward input (W); 0 = no input; -1 = backward input (S)
     * @param movementSideways 1 = left input (A); 0 = no input; -1 = right input (D)
     * @param yaw yaw of the player
     * @param pitch pitch of the player
     * @param jumping jump input
     * @param sneaking sneak input
     * @param sprinting sprint input
     * @see xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput
     * @since 1.4.0
     */
    function createPlayerInput(movementForward: number, movementSideways: number, yaw: number, pitch: number, jumping: boolean, sneaking: boolean, sprinting: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
    
    /**
     * Parses each row of CSV string into a `PlayerInput`.
     *  The capitalization of the header matters.<br>
     *  About the columns:
     *  <ul>
     *    <li> `movementForward` and `movementSideways` as a number</li>
     *    <li>`yaw` and `pitch` as an absolute number</li>
     *    <li>`jumping`, `sneaking` and `sprinting` have to be boolean</li>
     *  </ul>
     *  <p>
     *  The separation must be a "," it's a csv...(but spaces don't matter)<br>
     *  Quoted values don't work
     * @param csv CSV string to be parsed
     * @see PlayerInput#PlayerInput(float, float, float, float, boolean, boolean, boolean)
     * @since 1.4.0
     */
    function createPlayerInputsFromCsv(csv: string): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput>;
    
    /**
     * Parses a JSON string into a `PlayerInput` Object
     *  For details see `PlayerInput.fromCsv()`, on what has to be present.<br>
     *  Capitalization of the keys matters.
     * @param json JSON string to be parsed
     * @return The JSON parsed into a {@code PlayerInput}
     * @see #createPlayerInputsFromCsv(String)
     * @since 1.4.0
     */
    function createPlayerInputsFromJson(json: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
    
    /**
     * Creates a new `PlayerInput` object with the current inputs of the player.
     * @see xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput
     * @since 1.4.0
     */
    function getCurrentPlayerInput(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
    
    /**
     * Adds a new `PlayerInput` to `MovementQueue` to be executed
     * @param input the PlayerInput to be executed
     * @see xyz.wagyourtail.jsmacros.client.movement.MovementQueue
     * @since 1.4.0
     */
    function addInput(input: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput): void;
    
    /**
     * Adds multiple new `PlayerInput` to `MovementQueue` to be executed
     * @param inputs the PlayerInputs to be executed
     * @see xyz.wagyourtail.jsmacros.client.movement.MovementQueue
     * @since 1.4.0
     */
    function addInputs(inputs: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput[]): void;
    
    /**
     * Clears all inputs in the `MovementQueue`
     * @see xyz.wagyourtail.jsmacros.client.movement.MovementQueue
     * @since 1.4.0
     */
    function clearInputs(): void;
    function setDrawPredictions(val: boolean): void;
    
    /**
     * Predicts where one tick with a `PlayerInput` as input would lead to.
     * @param input the PlayerInput for the prediction
     * @return the position after the input
     * @see #predictInput(PlayerInput, boolean)
     * @since 1.4.0
     */
    function predictInput(input: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
    
    /**
     * Predicts where one tick with a `PlayerInput` as input would lead to.
     * @param input the PlayerInput for the prediction
     * @param draw whether to visualize the result or not
     * @return the position after the input
     * @since 1.4.0
     */
    function predictInput(input: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput, draw: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
    
    /**
     * Predicts where each `PlayerInput` executed in a row would lead
     *  without drawing it.
     * @param inputs the PlayerInputs for each tick for the prediction
     * @return the position after each input
     * @see #predictInputs(PlayerInput[], boolean)
     * @since 1.4.0
     */
    function predictInputs(inputs: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput[]): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D>;
    
    /**
     * 
     * @since 1.8.0
     * @return 
     */
    function isBreakingBlock(): boolean;
    
    /**
     * Predicts where each `PlayerInput` executed in a row would lead
     * @param inputs the PlayerInputs for each tick for the prediction
     * @param draw whether to visualize the result or not
     * @return the position after each input
     * @since 1.4.0
     */
    function predictInputs(inputs: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput[], draw: boolean): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D>;
    
    /**
     * Adds a forward movement with a relative yaw value to the MovementQueue.
     * @param yaw the relative yaw for the player
     * @since 1.4.0
     */
    function moveForward(yaw: number): void;
    
    /**
     * Adds a backward movement with a relative yaw value to the MovementQueue.
     * @param yaw the relative yaw for the player
     * @since 1.4.0
     */
    function moveBackward(yaw: number): void;
    
    /**
     * Adds sideways movement with a relative yaw value to the MovementQueue.
     * @param yaw the relative yaw for the player
     * @since 1.4.2
     */
    function moveStrafeLeft(yaw: number): void;
    
    /**
     * Adds sideways movement with a relative yaw value to the MovementQueue.
     * @param yaw the relative yaw for the player
     * @since 1.4.2
     */
    function moveStrafeRight(yaw: number): void;
    
}

namespace Hud {
    
    /**
     * 
     * @see xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen
     * @since 1.0.5
     * @param title
     * @param dirtBG boolean of whether to use a dirt background or not.
     * @return a new {@link xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen IScreen} Object.
     */
    function createScreen(title: string, dirtBG: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.ScriptScreen;
    
    /**
     * Opens a {@link _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen} Object.
     * @since 1.0.5
     * @see xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen
     * @param s
     */
    function openScreen(s: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen): void;
    
    /**
     * 
     * @since 1.2.7
     * @see xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen
     * @return the currently open Screen as an {@link xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen IScreen}
     */
    function getOpenScreen(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
    
    /**
     * 
     * @since 1.0.5, renamed from {@code getOpenScreen} in 1.2.7
     * @return The name of the currently open screen.
     */
    function getOpenScreenName(): string;
    
    /**
     * 
     * @since 1.1.2
     * @return a {@link java.lang.Boolean boolean} denoting if the currently open screen is a container.
     */
    function isContainer(): boolean;
    
    /**
     * 
     * @since 1.0.5
     * @see xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D
     * @return 
     */
    function createDraw2D(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D;
    
    /**
     * 
     * @since 1.0.5
     *  
     *  Registers an {@link xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D IDraw2D} to be rendered.
     * @deprecated since 1.6.5, use {@link Draw2D#register()} instead.
     * @see xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D
     * @param overlay
     */
    function registerDraw2D(overlay: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D>): void;
    
    /**
     * 
     * @since 1.0.5
     *  
     *  Unregisters an {@link xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D IDraw2D} to stop it being rendered.
     * @deprecated since 1.6.5, use {@link Draw2D#unregister()} instead.
     * @see xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D
     * @param overlay
     */
    function unregisterDraw2D(overlay: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D>): void;
    
    /**
     * 
     * @since 1.0.5
     * @see xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D
     * @return A list of current {@link xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D IDraw2Ds}.
     */
    function listDraw2Ds(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D>>;
    
    /**
     * 
     * @since 1.0.5
     *  
     *  clears the Draw2D render list.
     * @see xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D
     */
    function clearDraw2Ds(): void;
    
    /**
     * 
     * @since 1.0.6
     * @see xyz.wagyourtail.jsmacros.client.api.classes.Draw3D
     * @return a new {@link xyz.wagyourtail.jsmacros.client.api.classes.Draw3D Draw3D}.
     */
    function createDraw3D(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D;
    
    /**
     * 
     * @since 1.0.6
     *  
     *  Registers an {@link xyz.wagyourtail.jsmacros.client.api.classes.Draw3D Draw3D} to be rendered.
     * @deprecated since 1.6.5 use {@link Draw3D#register()} instead.
     * @see xyz.wagyourtail.jsmacros.client.api.classes.Draw3D
     * @param draw
     */
    function registerDraw3D(draw: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D): void;
    
    /**
     * 
     * @since 1.0.6
     *  
     *  Unregisters an {@link xyz.wagyourtail.jsmacros.client.api.classes.Draw3D Draw3D} to stop it being rendered.
     * @since 1.6.5 use {@link Draw3D#unregister()} instead.
     * @see xyz.wagyourtail.jsmacros.client.api.classes.Draw3D
     * @param draw
     */
    function unregisterDraw3D(draw: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D): void;
    
    /**
     * 
     * @since 1.0.6
     * @see xyz.wagyourtail.jsmacros.client.api.classes.Draw3D
     * @return A list of current {@link xyz.wagyourtail.jsmacros.client.api.classes.Draw3D Draw3D}.
     */
    function listDraw3Ds(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D>;
    
    /**
     * 
     * @since 1.0.6
     *  
     *  clears the Draw2D render list.
     * @see xyz.wagyourtail.jsmacros.client.api.classes.Draw3D
     */
    function clearDraw3Ds(): void;
    
    /**
     * 
     * @since 1.1.3
     * @return the current X coordinate of the mouse
     */
    function getMouseX(): number;
    
    /**
     * 
     * @since 1.1.3
     * @return the current Y coordinate of the mouse
     */
    function getMouseY(): number;
    
}

namespace Client {
    
    /**
     * 
     * @since 1.0.0 (was in the {@code jsmacros} library until 1.2.9)
     * @return the raw minecraft client class, it may be useful to use <a target="_blank" href="https://wagyourtail.xyz/Projects/Minecraft%20Mappings%20Viewer/App">Minecraft Mappings Viewer</a> for this.
     */
    function getMinecraft(): /* minecraft classes, as any, because obfuscation: */ any;
    
    /**
     * Run your task on the main minecraft thread
     * @param runnable task to run
     * @since 1.4.0
     */
    function runOnMainThread(runnable: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): void;
    
    /**
     * 
     * @since 1.6.5
     * @param runnable
     * @param watchdogMaxTime max time for the watchdog to wait before killing the script
     */
    function runOnMainThread(runnable: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>, watchdogMaxTime: number): void;
    
    /**
     * 
     * @see xyz.wagyourtail.jsmacros.client.api.helpers.OptionsHelper
     * @since 1.1.7 (was in the {@code jsmacros} library until 1.2.9)
     * @return an {@link xyz.wagyourtail.jsmacros.client.api.helpers.OptionsHelper OptionsHelper} for the game options.
     */
    function getGameOptions(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.OptionsHelper;
    
    /**
     * 
     * @return the current minecraft version as a {@link java.lang.String String}.
     * @since 1.1.2 (was in the {@code jsmacros} library until 1.2.9)
     */
    function mcVersion(): string;
    
    /**
     * 
     * @since 1.2.0 (was in the {@code jsmacros} library until 1.2.9)
     * @return the fps debug string from minecraft.
     */
    function getFPS(): string;
    
    /**
     * Join singleplayer world
     * @since 1.6.6
     * @param folderName
     */
    function loadWorld(folderName: string): void;
    
    /**
     * 
     * @since 1.2.3 (was in the {@code jsmacros} library until 1.2.9)
     * @see #connect(String, int)
     * @param ip
     */
    function connect(ip: string): void;
    
    /**
     * Connect to a server
     * @since 1.2.3 (was in the {@code jsmacros} library until 1.2.9)
     * @param ip
     * @param port
     */
    function connect(ip: string, port: number): void;
    
    /**
     * 
     * @since 1.2.3 (was in the {@code jsmacros} library until 1.2.9)
     * @see #disconnect(MethodWrapper)
     */
    function disconnect(): void;
    
    /**
     * Disconnect from a server with callback.
     * @since 1.2.3 (was in the {@code jsmacros} library until 1.2.9)
     * 
     *  {@code callback} defaults to {@code null}
     * @param callback calls your method as a {@link java.util.function.Consumer Consumer}&lt;{@link java.lang.Boolean Boolean}&gt;
     */
    function disconnect(callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<boolean, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): void;
    
    /**
     * Closes the client (stops the game).
     *  Waits until the game has stopped, meaning no further code is executed (for obvious reasons).
     *  Warning: this does not wait on joined threads, so your script may stop at an undefined point.
     * @since 1.6.0
     */
    function shutdown(): void;
    
    /**
     * 
     * @since 1.2.4
     * @see #waitTick(int)
     * @throws InterruptedException
     */
    function waitTick(): void;
    
    /**
     * waits the specified number of client ticks.
     *  don't use this on an event that the main thread waits on (joins)... that'll cause circular waiting.
     * @since 1.2.6
     * @param i
     * @throws InterruptedException
     */
    function waitTick(i: number): void;
    
    /**
     * 
     * @param ip
     * @return 
     * @since 1.6.5
     * @throws UnknownHostException
     * @throws InterruptedException
     */
    function ping(ip: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ServerInfoHelper;
    
    /**
     * 
     * @param ip
     * @param callback
     * @since 1.6.5
     * @throws UnknownHostException
     */
    function pingAsync(ip: string, callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ServerInfoHelper, _javatypes.java.io.IOException, _javatypes.java.lang.Object, any>): void;
    
    /**
     * 
     * @since 1.6.5
     */
    function cancelAllPings(): void;
    
}

namespace PositionCommon {
    
    /**
     * create a new vector object
     * @since 1.6.3
     * @param x1
     * @param y1
     * @param z1
     * @param x2
     * @param y2
     * @param z2
     * @return 
     */
    function createVec(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
    
    /**
     * 
     * @since 1.6.3
     * @param x1
     * @param y1
     * @param x2
     * @param y2
     * @return 
     */
    function createVec(x1: number, y1: number, x2: number, y2: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
    
    /**
     * 
     * @since 1.6.3
     * @param x
     * @param y
     * @param z
     * @return 
     */
    function createPos(x: number, y: number, z: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
    
    /**
     * 
     * @since 1.6.3
     * @param x
     * @param y
     * @return 
     */
    function createPos(x: number, y: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D;
    
}

namespace Time {
    
    /**
     * 
     * @return current time in MS.
     */
    function time(): number;
    
    /**
     * Sleeps the current thread for the specified time in MS.
     * @param millis
     * @throws InterruptedException
     */
    function sleep(millis: number): void;
    
}

namespace Chat {
    
    /**
     * Log to player chat.
     * @since 1.1.3
     * @param message
     */
    function log(message: _javatypes.java.lang.Object): void;
    
    /**
     * 
     * @param message
     * @param await should wait for message to actually be sent to chat to continue.
     * @throws InterruptedException
     */
    function log(message: _javatypes.java.lang.Object, await: boolean): void;
    
    /**
     * Say to server as player.
     * @since 1.0.0
     * @param message
     */
    function say(message: string): void;
    
    /**
     * Say to server as player.
     * @param message
     * @param await
     * @since 1.3.1
     * @throws InterruptedException
     */
    function say(message: string, await: boolean): void;
    
    /**
     * open the chat input box with specific text already typed.
     * @since 1.6.4
     * @param message the message to start the chat screen with
     */
    function open(message: string): void;
    
    /**
     * open the chat input box with specific text already typed.
     *  hint: you can combine with {@link _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.FJsMacros#waitForEvent} or
     *  {@link _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.FJsMacros#once} to wait for the chat screen
     *  to close and/or the to wait for the sent message
     * @since 1.6.4
     * @param message the message to start the chat screen with
     * @param await
     */
    function open(message: string, await: boolean): void;
    
    /**
     * Display a Title to the player.
     * @since 1.2.1
     * @param title
     * @param subtitle
     * @param fadeIn
     * @param remain
     * @param fadeOut
     */
    function title(title: _javatypes.java.lang.Object, subtitle: _javatypes.java.lang.Object, fadeIn: number, remain: number, fadeOut: number): void;
    
    /**
     * 
     * @since 1.8.1
     * @param text
     */
    function actionbar(text: _javatypes.java.lang.Object): void;
    
    /**
     * Display the smaller title that's above the actionbar.
     * @since 1.2.1
     * @param text
     * @param tinted
     */
    function actionbar(text: _javatypes.java.lang.Object, tinted: boolean): void;
    
    /**
     * Display a toast.
     * @since 1.2.5
     * @param title
     * @param desc
     */
    function toast(title: _javatypes.java.lang.Object, desc: _javatypes.java.lang.Object): void;
    
    /**
     * Creates a {@link _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper} for use where you need one and not a string.
     * @see xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper
     * @since 1.1.3
     * @param content
     * @return a new {@link xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper TextHelper}
     */
    function createTextHelperFromString(content: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
    
    /**
     * 
     * @since 1.5.2
     * @return 
     */
    function getLogger(): _javatypes.org.slf4j.Logger;
    
    /**
     * returns a log4j logger, for logging to console only.
     * @since 1.5.2
     * @param name
     * @return 
     */
    function getLogger(name: string): _javatypes.org.slf4j.Logger;
    
    /**
     * Create a  {@link _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper} for use where you need one and not a string.
     * @see xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper
     * @since 1.1.3
     * @param json
     * @return a new {@link xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper TextHelper}
     */
    function createTextHelperFromJSON(json: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
    
    /**
     * 
     * @see TextBuilder
     * @since 1.3.0
     * @return a new builder
     */
    function createTextBuilder(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder;
    
    /**
     * 
     * @param name name of command
     * @since 1.4.2
     * @return 
     * @see #getCommandManager()
     */
    function createCommandBuilder(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
    
    /**
     * 
     * @param name
     * @since 1.6.5
     * @see #getCommandManager()
     */
    function unregisterCommand(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandNodeHelper;
    
    /**
     * 
     * @since 1.6.5
     * @param node
     * @see #getCommandManager()
     */
    function reRegisterCommand(node: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandNodeHelper): void;
    
    /**
     * 
     * @since 1.7.0
     * @return 
     */
    function getCommandManager(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandManager;
    
    /**
     * 
     * @since 1.7.0
     * @return 
     */
    function getHistory(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.ChatHistoryManager;
    
    /**
     * 
     * @param string
     * @since 1.6.5
     * @return &#167; -> &amp;
     */
    function sectionSymbolToAmpersand(string: string): string;
    
    /**
     * 
     * @param string
     * @since 1.6.5
     * @return &amp; -> &#167;
     */
    function ampersandToSectionSymbol(string: string): string;
    
    /**
     * 
     * @param string
     * @since 1.6.5
     * @return 
     */
    function stripFormatting(string: string): string;
    
}

namespace Reflection {
    
    /**
     * 
     * @param name name of class like {@code path.to.class}
     * @return resolved class
     * @throws ClassNotFoundException
     * @see FReflection#getClass(String, String)
     * @since 1.2.3
     */
    function getClass<T>(name: string): _javatypes.java.lang.Class<T> & { new(...values): T };
    
    /**
     * Use this to specify a class with intermediary and yarn names of classes for cleaner code. also has support for
     *  java primitives by using their name in lower case.
     * @param name first try
     * @param name2 second try
     * @return a {@link java.lang.Class Class} reference.
     * @throws ClassNotFoundException
     * @since 1.2.3
     */
    function getClass<T>(name: string, name2: string): _javatypes.java.lang.Class<T> & { new(...values): T };
    
    /**
     * 
     * @param c
     * @param name
     * @param parameterTypes
     * @return 
     * @throws NoSuchMethodException
     * @throws SecurityException
     * @see FReflection#getDeclaredMethod(Class, String, String, Class...)
     * @since 1.2.3
     */
    function getDeclaredMethod(c: _javatypes.java.lang.Class<any>, name: string, parameterTypes: _javatypes.java.lang.Class<any>[]): _javatypes.java.lang.reflect.Method;
    
    /**
     * Use this to specify a method with intermediary and yarn names of classes for cleaner code.
     * @param c
     * @param name
     * @param name2
     * @param parameterTypes
     * @return a {@link java.lang.reflect.Method Method} reference.
     * @throws NoSuchMethodException
     * @throws SecurityException
     * @since 1.2.3
     */
    function getDeclaredMethod(c: _javatypes.java.lang.Class<any>, name: string, name2: string, parameterTypes: _javatypes.java.lang.Class<any>[]): _javatypes.java.lang.reflect.Method;
    
    /**
     * 
     * @since 1.6.0
     * @param c
     * @param name
     * @param name2
     * @param parameterTypes
     * @return 
     * @throws NoSuchMethodException
     */
    function getMethod(c: _javatypes.java.lang.Class<any>, name: string, name2: string, parameterTypes: _javatypes.java.lang.Class<any>[]): _javatypes.java.lang.reflect.Method;
    
    /**
     * 
     * @since 1.6.0
     * @param c
     * @param name
     * @param parameterTypes
     * @return 
     * @throws NoSuchMethodException
     */
    function getMethod(c: _javatypes.java.lang.Class<any>, name: string, parameterTypes: _javatypes.java.lang.Class<any>[]): _javatypes.java.lang.reflect.Method;
    
    /**
     * 
     * @param c
     * @param name
     * @return 
     * @throws NoSuchFieldException
     * @throws SecurityException
     * @see FReflection#getDeclaredField(Class, String, String)
     * @since 1.2.3
     */
    function getDeclaredField(c: _javatypes.java.lang.Class<any>, name: string): _javatypes.java.lang.reflect.Field;
    
    /**
     * Use this to specify a field with intermediary and yarn names of classes for cleaner code.
     * @param c
     * @param name
     * @param name2
     * @return a {@link java.lang.reflect.Field Field} reference.
     * @throws NoSuchFieldException
     * @throws SecurityException
     * @since 1.2.3
     */
    function getDeclaredField(c: _javatypes.java.lang.Class<any>, name: string, name2: string): _javatypes.java.lang.reflect.Field;
    
    /**
     * 
     * @since 1.6.0
     * @param c
     * @param name
     * @return 
     * @throws NoSuchFieldException
     */
    function getField(c: _javatypes.java.lang.Class<any>, name: string): _javatypes.java.lang.reflect.Field;
    
    /**
     * 
     * @since 1.6.0
     * @param c
     * @param name
     * @param name2
     * @return 
     * @throws NoSuchFieldException
     */
    function getField(c: _javatypes.java.lang.Class<any>, name: string, name2: string): _javatypes.java.lang.reflect.Field;
    
    /**
     * Invoke a method on an object with auto type coercion for numbers.
     * @param m method
     * @param c object (can be {@code null} for statics)
     * @param objects
     * @return 
     * @throws IllegalAccessException
     * @throws IllegalArgumentException
     * @throws InvocationTargetException
     * @since 1.2.3
     */
    function invokeMethod(m: _javatypes.java.lang.reflect.Method, c: _javatypes.java.lang.Object, objects: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
    
    /**
     * Attempts to create a new instance of a class. You probably don't have to use this one and can just call `
     *  new` on a {@link _javatypes.java.lang.Class} unless you're in LUA, but then you also have the (kinda poorly
     *  doccumented, can someone find a better docs link for me)
     *  <a target="_blank" href="http://luaj.sourceforge.net/api/3.2/org/luaj/vm2/lib/jse/LuajavaLib.html">LuaJava Library</a>.
     * @param c
     * @param objects
     * @return 
     * @since 1.2.7
     */
    function newInstance<T>(c: _javatypes.java.lang.Class<T>, objects: _javatypes.java.lang.Object[]): T;
    
    /**
     * proxy for extending java classes in the guest language with proper threading support.
     * @param clazz
     * @param interfaces
     * @param <T>
     * @since 1.6.0
     * @return 
     */
    function createClassProxyBuilder<T>(clazz: _javatypes.java.lang.Class<T>, interfaces: _javatypes.java.lang.Class<any>[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder<T>;
    
    /**
     * 
     * @param cName
     * @param clazz
     * @param interfaces
     * @param <T>
     * @since 1.6.5
     * @return 
     * @throws NotFoundException
     * @throws CannotCompileException
     */
    function createClassBuilder<T>(cName: string, clazz: _javatypes.java.lang.Class<T>, interfaces: _javatypes.java.lang.Class<any>[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
    
    /**
     * 
     * @param cName
     * @since 1.6.5
     * @return 
     * @throws ClassNotFoundException
     */
    function getClassFromClassBuilderResult(cName: string): _javatypes.java.lang.Class<any>;
    function createLibraryBuilder(name: string, perExec: boolean, acceptedLangs: string[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.LibraryBuilder;
    
    /**
     * Loads a jar file to be accessible with this library.
     * @param file relative to the script's folder.
     * @return success value
     * @throws IOException
     * @since 1.2.6
     */
    function loadJarFile(file: string): boolean;
    
    /**
     * 
     * @since 1.3.1
     * @return the previous mapping helper generated with {@link #loadMappingHelper(String)}
     */
    function loadCurrentMappingHelper(): _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings;
    
    /**
     * 
     * @param o class you want the name of
     * @since 1.3.1
     * @return the fully qualified class name (with "."'s not "/"'s)
     */
    function getClassName(o: _javatypes.java.lang.Object): string;
    
    /**
     * 
     * @param urlorfile a url or file path the the yarn mappings {@code -v2.jar} file, or {@code .tiny} file. for example {@code https://maven.fabricmc.net/net/fabricmc/yarn/1.16.5%2Bbuild.3/yarn-1.16.5%2Bbuild.3-v2.jar}, if same url/path as previous this will load from cache.
     * @since 1.3.1
     * @return the associated mapping helper.
     */
    function loadMappingHelper(urlorfile: string): _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings;
    
    /**
     * 
     * @since 1.6.5
     * @param instance
     * @param <T>
     * @return 
     */
    function wrapInstace<T>(instance: T): _javatypes.xyz.wagyourtail.jsmacros.core.classes.WrappedClassInstance<T>;
    
    /**
     * 
     * @since 1.6.5
     * @param className
     * @return 
     * @throws ClassNotFoundException
     */
    function getWrappedClass(className: string): _javatypes.xyz.wagyourtail.jsmacros.core.classes.WrappedClassInstance<any>;
    
}

namespace FS {
    
    /**
     * List files in path.
     * @since 1.1.8
     * @param path relative to the script's folder.
     * @return An array of file names as {@link java.lang.String Strings}.
     */
    function list(path: string): string[];
    
    /**
     * Check if a file exists.
     * @since 1.1.8
     * @param path relative to the script's folder.
     * @return 
     */
    function exists(path: string): boolean;
    
    /**
     * Check if a file is a directory.
     * @since 1.1.8
     * @param path relative to the script's folder.
     * @return 
     */
    function isDir(path: string): boolean;
    
    /**
     * Get the last part (name) of a file.
     * @since 1.1.8
     * @param path relative to the script's folder.
     * @return a {@link java.lang.String String} of the file name.
     */
    function getName(path: string): string;
    
    /**
     * Make a directory.
     * @since 1.1.8
     * @param path relative to the script's folder.
     * @return a {@link java.lang.Boolean boolean} for success.
     */
    function makeDir(path: string): boolean;
    
    /**
     * Move a file.
     * @since 1.1.8
     * @param from relative to the script's folder.
     * @param to relative to the script's folder.
     * @throws IOException
     */
    function move(from: string, to: string): void;
    
    /**
     * Copy a file.
     * @since 1.1.8
     * @param from relative to the script's folder.
     * @param to relative to the script's folder.
     * @throws IOException
     */
    function copy(from: string, to: string): void;
    
    /**
     * Delete a file.
     * @since 1.2.9
     * @param path relative to the script's folder.
     * @return a {@link java.lang.Boolean boolean} for success.
     */
    function unlink(path: string): boolean;
    
    /**
     * Combine 2 paths.
     * @since 1.1.8
     * @param patha path is relative to the script's folder.
     * @param pathb
     * @return a {@link java.lang.String String} of the combined path.
     * @throws IOException
     */
    function combine(patha: string, pathb: string): string;
    
    /**
     * Gets the directory part of a file path, or the parent directory of a folder.
     * @since 1.1.8
     * @param path relative to the script's folder.
     * @return a {@link java.lang.String String} of the combined path.
     * @throws IOException
     */
    function getDir(path: string): string;
    
    /**
     * Open a FileHandler for the file at the specified path.
     * @since 1.1.8
     * @see FileHandler
     * @param path relative to the script's folder.
     * @return a {@link FileHandler FileHandler} for the file path.
     */
    function open(path: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.FileHandler;
    
}

namespace Request {
    
    /**
     * create a HTTPRequest handler to the specified URL
     * @since 1.1.8
     * @see HTTPRequest
     * @param url
     * @return Request Wrapper
     * @throws IOException
     */
    function create(url: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest;
    
    /**
     * 
     * @since 1.1.8
     * @see FRequest#get(String, Map)
     * @param url
     * @return 
     * @throws IOException
     */
    function get(url: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest$Response;
    
    /**
     * send a GET request to the specified URL.
     * @since 1.1.8
     * @see HTTPRequest.Response
     * @param url
     * @param headers
     * @return Response Data
     * @throws IOException
     */
    function get(url: string, headers: _javatypes.java.util.Map<string, string>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest$Response;
    
    /**
     * 
     * @see FRequest#post(String, String, Map)
     * @since 1.1.8
     * @param url
     * @param data
     * @return 
     * @throws IOException
     */
    function post(url: string, data: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest$Response;
    
    /**
     * send a POST request to the specified URL.
     * @since 1.1.8
     * @param url
     * @param data
     * @param headers
     * @return Response Data
     * @throws IOException
     */
    function post(url: string, data: string, headers: _javatypes.java.util.Map<string, string>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest$Response;
    
    /**
     * Create a Websocket handler.
     * @since 1.2.7
     * @see Websocket
     * @param url
     * @return 
     * @throws IOException
     */
    function createWS(url: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket;
    
    /**
     * Create a Websocket handler.
     * @since 1.1.9
     * @deprecated 1.2.7
     * @param url
     * @return 
     * @throws IOException
     */
    function createWS2(url: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket;
    
}

namespace GlobalVars {
    
    /**
     * Put an Integer into the global variable space.
     * @param name
     * @param i
     * @return 
     * @since 1.0.4
     */
    function putInt(name: string, i: number): number;
    
    /**
     * put a String into the global variable space.
     * @param name
     * @param str
     * @return 
     * @since 1.0.4
     */
    function putString(name: string, str: string): string;
    
    /**
     * put a Double into the global variable space.
     * @param name
     * @param d
     * @return 
     * @since 1.0.8
     */
    function putDouble(name: string, d: number): number;
    
    /**
     * put a Boolean into the global variable space.
     * @param name
     * @param b
     * @return 
     * @since 1.1.7
     */
    function putBoolean(name: string, b: boolean): boolean;
    
    /**
     * put anything else into the global variable space.
     * @param name
     * @param o
     * @return 
     * @since 1.1.7
     */
    function putObject(name: string, o: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
    
    /**
     * Returns the type of the defined item in the global variable space as a string.
     * @param name
     * @return 
     * @since 1.0.4
     */
    function getType(name: string): string;
    
    /**
     * Gets an Integer from the global variable space.
     * @param name
     * @return 
     * @since 1.0.4
     */
    function getInt(name: string): number;
    
    /**
     * Gets an Integer from the global variable space. and then increment it there.
     * @param name
     * @return 
     * @since 1.6.5
     */
    function getAndIncrementInt(name: string): number;
    
    /**
     * Gets an integer from the global variable pace. and then decrement it there.
     * @param name
     * @return 
     * @since 1.6.5
     */
    function getAndDecrementInt(name: string): number;
    
    /**
     * increment an Integer in the global variable space. then return it.
     * @param name
     * @return 
     * @since 1.6.5
     */
    function incrementAndGetInt(name: string): number;
    
    /**
     * decrement an Integer in the global variable space. then return it.
     * @param name
     * @return 
     * @since 1.6.5
     */
    function decrementAndGetInt(name: string): number;
    
    /**
     * Gets a String from the global variable space
     * @param name
     * @return 
     * @since 1.0.4
     */
    function getString(name: string): string;
    
    /**
     * Gets a Double from the global variable space.
     * @param name
     * @return 
     * @since 1.0.8
     */
    function getDouble(name: string): number;
    
    /**
     * Gets a Boolean from the global variable space.
     * @param name
     * @return 
     * @since 1.1.7
     */
    function getBoolean(name: string): boolean;
    
    /**
     * toggles a global boolean and returns its new value
     * @param name
     * @return 
     * @since 1.6.5
     */
    function toggleBoolean(name: string): boolean;
    
    /**
     * Gets an Object from the global variable space.
     * @param name
     * @return 
     * @since 1.1.7
     */
    function getObject(name: string): _javatypes.java.lang.Object;
    
    /**
     * removes a key from the global varaible space.
     * @param key
     * @since 1.2.0
     */
    function remove(key: string): void;
    function getRaw(): _javatypes.java.util.Map<string, _javatypes.java.lang.Object>;
    
}

namespace JsMacros {
    
    /**
     * 
     * @return the JsMacros profile class.
     */
    function getProfile(): _javatypes.xyz.wagyourtail.jsmacros.core.config.BaseProfile;
    
    /**
     * 
     * @return the JsMacros config management class.
     */
    function getConfig(): _javatypes.xyz.wagyourtail.jsmacros.core.config.ConfigManager;
    
    /**
     * services are background scripts designed to run full time and are mainly noticed by their side effects.
     * @since 1.6.3
     * @return for managing services.
     */
    function getServiceManager(): _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager;
    
    /**
     * 
     * @return list of non-garbage-collected ScriptContext's
     * @since 1.4.0
     */
    function getOpenContexts(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.core.language.BaseScriptContext<any>>;
    
    /**
     * 
     * @see FJsMacros#runScript(String, String, MethodWrapper)
     * @since 1.1.5
     * @param file
     * @return 
     */
    function runScript(file: string): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;
    
    /**
     * 
     * @since 1.6.3
     * @param file
     * @param fakeEvent you probably actually want to pass an instance created by {@link #createCustomEvent(String)}
     * @return 
     */
    function runScript(file: string, fakeEvent: Events.BaseEvent): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;
    
    /**
     * runs a script with a eventCustom to be able to pass args
     * @since 1.6.3 (1.1.5 - 1.6.3 didn't have fakeEvent)
     * @param file
     * @param fakeEvent
     * @param callback
     * @return container the script is running on.
     */
    function runScript(file: string, fakeEvent: Events.BaseEvent, callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Throwable, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;
    
    /**
     * 
     * @see FJsMacros#runScript(String, String, MethodWrapper)
     * @since 1.2.4
     * @param language
     * @param script
     * @return 
     */
    function runScript(language: string, script: string): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;
    
    /**
     * Runs a string as a script.
     * @since 1.2.4
     * @param language
     * @param script
     * @param callback calls your method as a {@link java.util.function.Consumer Consumer}&lt;{@link String}&gt;
     * @return the {@link EventContainer} the script is running on.
     */
    function runScript(language: string, script: string, callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Throwable, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;
    
    /**
     * 
     * @since 1.6.0
     * @param language
     * @param script
     * @param file
     * @param callback
     * @return 
     */
    function runScript(language: string, script: string, file: string, callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Throwable, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;
    
    /**
     * 
     * @since 1.7.0
     * @param language
     * @param script
     * @param file
     * @param event
     * @param callback
     * @return 
     */
    function runScript(language: string, script: string, file: string, event: Events.BaseEvent, callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Throwable, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;
    
    /**
     * 
     * @since 1.7.0
     * @param file
     * @return 
     * @param <T>
     * @param <U>
     * @param <R>
     */
    function wrapScriptRun<T, U, R>(file: string): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<T, U, R, any>;
    
    /**
     * 
     * @since 1.7.0
     * @param language
     * @param script
     * @return 
     * @param <T>
     * @param <U>
     * @param <R>
     */
    function wrapScriptRun<T, U, R>(language: string, script: string): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<T, U, R, any>;
    
    /**
     * 
     * @since 1.7.0
     * @param language
     * @param script
     * @param file
     * @return 
     * @param <T>
     * @param <U>
     * @param <R>
     */
    function wrapScriptRun<T, U, R>(language: string, script: string, file: string): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<T, U, R, any>;
    
    /**
     * 
     * @since 1.7.0
     * @param file
     * @return 
     * @param <T>
     * @param <U>
     * @param <R>
     */
    function wrapScriptRunAsync<T, U, R>(file: string): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<T, U, R, any>;
    
    /**
     * 
     * @since 1.7.0
     * @param language
     * @param script
     * @return 
     * @param <T>
     * @param <U>
     * @param <R>
     */
    function wrapScriptRunAsync<T, U, R>(language: string, script: string): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<T, U, R, any>;
    
    /**
     * 
     * @since 1.7.0
     * @param language
     * @param script
     * @param file
     * @return 
     * @param <T>
     * @param <U>
     * @param <R>
     */
    function wrapScriptRunAsync<T, U, R>(language: string, script: string, file: string): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<T, U, R, any>;
    
    /**
     * Opens a file with the default system program.
     * @since 1.1.8
     * @param path relative to the script's folder.
     */
    function open(path: string): void;
    
    /**
     * 
     * @since 1.6.0
     * @param url
     * @throws MalformedURLException
     */
    function openUrl(url: string): void;
    
    /**
     * Creates a listener for an event, this function can be more efficient that running a script file when used properly.
     * @see IEventListener
     * @since 1.2.7
     * @param event
     * @param callback calls your method as a {@link java.util.function.BiConsumer BiConsumer}&lt;{@link BaseEvent}, {@link EventContainer}&gt;
     * @return 
     */
    function on(event: string, callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<Events.BaseEvent, _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.core.event.IEventListener;
    
    /**
     * Creates a single-run listener for an event, this function can be more efficient that running a script file when used properly.
     * @see IEventListener
     * @since 1.2.7
     * @param event
     * @param callback calls your method as a {@link java.util.function.BiConsumer BiConsumer}&lt;{@link BaseEvent}, {@link EventContainer}&gt;
     * @return the listener.
     */
    function once(event: string, callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<Events.BaseEvent, _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.core.event.IEventListener;
    
    /**
     * 
     * @see FJsMacros#off(String, IEventListener)
     * @since 1.2.3
     * @param listener
     * @return 
     */
    function off(listener: _javatypes.xyz.wagyourtail.jsmacros.core.event.IEventListener): boolean;
    
    /**
     * Removes a {@link _javatypes.IEventListener} from an event.
     * @see IEventListener
     * @since 1.2.3
     * @param event
     * @param listener
     * @return 
     */
    function off(event: string, listener: _javatypes.xyz.wagyourtail.jsmacros.core.event.IEventListener): boolean;
    
    /**
     * 
     * @param event event to wait for
     * @since 1.5.0
     * @return a event and a new context if the event you're waiting for was joined, to leave it early.
     * @throws InterruptedException
     */
    function waitForEvent(event: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.FJsMacros$EventAndContext;
    
    /**
     * 
     * @param event
     * @return 
     * @throws InterruptedException
     */
    function waitForEvent(event: string, filter: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<Events.BaseEvent, _javatypes.java.lang.Object, boolean, any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.FJsMacros$EventAndContext;
    
    /**
     * waits for an event. if this thread is bound to an event already, this will release current lock.
     * @param event event to wait for
     * @param filter filter the event until it has the proper values or whatever.
     * @param runBeforeWaiting runs as a {@link Runnable}, run before waiting, this is a thread-safety thing to prevent "interrupts" from going in between this and things like deferCurrentTask
     * @since 1.5.0
     * @return a event and a new context if the event you're waiting for was joined, to leave it early.
     * @throws InterruptedException
     */
    function waitForEvent(event: string, filter: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<Events.BaseEvent, _javatypes.java.lang.Object, boolean, any>, runBeforeWaiting: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.FJsMacros$EventAndContext;
    
    /**
     * 
     * @since 1.2.3
     * @param event
     * @return a list of script-added listeners.
     */
    function listeners(event: string): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.core.event.IEventListener>;
    
    /**
     * create a custom event object that can trigger a event. It's recommended to use 
     *  {@link _javatypes.EventCustom#registerEvent} to set up the event to be visible in the GUI.
     * @see BaseEventRegistry#addEvent(String)
     * @param eventName name of the event. please don't use an existing one... your scripts might not like that.
     * @since 1.2.8
     * @return 
     */
    function createCustomEvent(eventName: string): _javatypes.xyz.wagyourtail.jsmacros.core.event.impl.EventCustom;
    
}

namespace JavaWrapper {
    
    /**
     * 
     * @since 1.4.0
     * @param c
     * @return a new {@link MethodWrapper MethodWrapper}
     */
    function methodToJava<A, B, R>(c: (arg0?: A, arg1?: B) => R | void): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<A, B, R, any>;
    
    /**
     * 
     * @since 1.4.0
     * @param c
     * @return a new {@link MethodWrapper MethodWrapper}
     */
    function methodToJavaAsync<A, B, R>(c: (arg0?: A, arg1?: B) => R | void): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<A, B, R, any>;
    
    /**
     * JS/JEP ONLY
     *  allows you to set the position of the thread in the queue. you can use this for return value one's too...
     * @since 1.8.0
     * @param priority
     * @param c
     * @return 
     * @param <A>
     * @param <B>
     * @param <R>
     */
    function methodToJavaAsync<A, B, R>(priority: number, c: (arg0?: A, arg1?: B) => R | void): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<A, B, R, any>;
    
    /**
     * JS/JEP only, puts current task at end of queue.
     *  use with caution, don't accidentally cause circular waiting.
     * @throws InterruptedException
     * @since 1.4.0 [citation needed]
     */
    function deferCurrentTask(): void;
    
    /**
     * JS/JEP only, puts current task at end of queue.
     *  use with caution, don't accidentally cause circular waiting.
     * @since 1.8.0
     * @throws InterruptedException
     * @param priorityAdjust the amount to adjust the priority by
     */
    function deferCurrentTask(priorityAdjust: number): void;
    
    /**
     * JS/JEP only, get priority of current task.
     * @throws InterruptedException
     * @since 1.8.0
     */
    function getCurrentPriority(): number;
    
    /**
     * Close the current context
     * @since 1.2.2
     */
    function stop(): void;
    
}

declare namespace _javatypes {


    namespace xyz.wagyourtail {
    
        interface StringHashTrie extends _javatypes.java.lang.Object, _javatypes.java.util.Collection<string> {
            
            size(): number;
            isEmpty(): boolean;
            contains(o: _javatypes.java.lang.Object): boolean;
            iterator(): _javatypes.java.util.Iterator<string>;
            toArray(): string[];
            toArray<T>(a: T[]): T[];
            add(s: string): boolean;
            
            /**
             * this can make the StringHashTrie sparse, this can cause extra steps in lookup that are no longer needed,
             *  at some point it would be best to rebase the StringHashTrie with `new StringHashTrie().addAll(current.getAll())`
             * @param o
             * @return 
             */
            remove(o: _javatypes.java.lang.Object): boolean;
            containsAll(c: _javatypes.java.util.Collection<any>): boolean;
            containsAll(o: string[]): boolean;
            addAll(c: _javatypes.java.util.Collection<any>): boolean;
            addAll(o: string[]): boolean;
            removeAll(c: _javatypes.java.util.Collection<any>): boolean;
            removeAll(o: string[]): boolean;
            retainAll(c: _javatypes.java.util.Collection<any>): boolean;
            retainAll(o: string[]): boolean;
            clear(): void;
            
            /**
             * 
             * @param prefix prefix to search with
             * @return all elements that start with the given prefix
             */
            getAllWithPrefix(prefix: string): _javatypes.java.util.Set<string>;
            
            /**
             * 
             * @param prefix prefix to search with
             * @return all elements that start with the given prefix (case insensitive)
             */
            getAllWithPrefixCaseInsensitive(prefix: string): _javatypes.java.util.Set<string>;
            
            /**
             * all contained elements as a {@link _javatypes.Set}
             * @return 
             */
            getAll(): _javatypes.java.util.Set<string>;
            
            /**
             * 
             * @return json representation, mainly for debugging.
             */
            toString(): string;
            
        }
        namespace StringHashTrie {
            interface static {
                new (): _javatypes.xyz.wagyourtail.StringHashTrie;
                
                
                
            }
        }
    
        namespace jsmacros {
        
        
            namespace core {
            
                interface MethodWrapper<T, U, R, C> extends _javatypes.java.lang.Object, _javatypes.java.util._function.Consumer<T>, _javatypes.java.util._function.BiConsumer<T, U>, _javatypes.java.util._function.Function<T, R>, _javatypes.java.util._function.BiFunction<T, U, R>, _javatypes.java.util._function.Predicate<T>, _javatypes.java.util._function.BiPredicate<T, U>, _javatypes.java.lang.Runnable, _javatypes.java.util._function.Supplier<R>, _javatypes.java.util.Comparator<T> {
                    
                    getCtx(): C;
                    accept(t: T): void;
                    accept(t: T, u: U): void;
                    apply(t: T): R;
                    apply(t: T, u: U): R;
                    test(t: T): boolean;
                    test(t: T, u: U): boolean;
                    
                    /**
                     * override to return true if the method can't join to the thread it was wrapped/created in, ie for languages that don't allow multithreading.
                     */
                    preventSameThreadJoin(): boolean;
                    
                    /**
                     * make return something to override the thread set in {@link _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.FJsMacros#on}
                     *  (hi jep)
                     */
                    overrideThread(): _javatypes.java.lang.Thread;
                    
                    /**
                     * Makes {@link _javatypes.Function} and {@link _javatypes.BiFunction} work together.
                     *  Extended so it's called on every type not just those 2.
                     * @param after put a {@link MethodWrapper} here when using in scripts.
                     */
                    andThen<V>(after: _javatypes.java.util._function.Function<any, any>): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<T, U, V, C>;
                    
                    /**
                     * Makes {@link _javatypes.Predicate} and {@link _javatypes.BiPredicate} work together
                     */
                    negate(): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<T, U, R, C>;
                    
                }
                namespace MethodWrapper {
                    interface static {
                        new <T, U, R, C>(containingContext: C): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<T, U, R, C>;
                        
                        
                        
                    }
                }
                interface Core<T, U> extends _javatypes.java.lang.Object {
                    readonly libraryRegistry: _javatypes.xyz.wagyourtail.jsmacros.core.library.LibraryRegistry;
                    readonly eventRegistry: _javatypes.xyz.wagyourtail.jsmacros.core.event.BaseEventRegistry;
                    readonly extensions: _javatypes.xyz.wagyourtail.jsmacros.core.extensions.ExtensionLoader;
                    readonly profile: T;
                    readonly config: _javatypes.xyz.wagyourtail.jsmacros.core.config.ConfigManager;
                    readonly services: _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager;
                    
                    deferredInit(): void;
                    
                    /**
                     * 
                     * @param container
                     */
                    addContext(container: _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>): void;
                    
                    /**
                     * 
                     * @return 
                     */
                    getContexts(): _javatypes.java.util.Set<_javatypes.xyz.wagyourtail.jsmacros.core.language.BaseScriptContext<any>>;
                    
                    /**
                     * executes an {@link _javatypes.BaseEvent} on a ${@link _javatypes.ScriptTrigger}
                     * @param macro
                     * @param event
                     * @return 
                     */
                    exec(macro: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger, event: Events.BaseEvent): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;
                    
                    /**
                     * Executes an {@link _javatypes.BaseEvent} on a ${@link _javatypes.ScriptTrigger} with callback.
                     * @param macro
                     * @param event
                     * @param then
                     * @param catcher
                     * @return 
                     */
                    exec(macro: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger, event: Events.BaseEvent, then: _javatypes.java.lang.Runnable, catcher: _javatypes.java.util._function.Consumer<_javatypes.java.lang.Throwable>): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;
                    
                    /**
                     * 
                     * @since 1.7.0
                     * @param lang
                     * @param script
                     * @param fakeFile
                     * @param event
                     * @param then
                     * @param catcher
                     * @return 
                     */
                    exec(lang: string, script: string, fakeFile: _javatypes.java.io.File, event: Events.BaseEvent, then: _javatypes.java.lang.Runnable, catcher: _javatypes.java.util._function.Consumer<_javatypes.java.lang.Throwable>): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;
                    
                    /**
                     * wraps an exception for more uniform parsing between languages, also extracts useful info.
                     * @param ex exception to wrap.
                     * @return 
                     */
                    wrapException(ex: _javatypes.java.lang.Throwable): _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException<any>;
                    
                }
                namespace Core {
                    interface static {
                        
                        
                        
                        /**
                         * static reference to instance created by {@link #createInstance}
                         */
                        getInstance(): _javatypes.xyz.wagyourtail.jsmacros.core.Core<any, any>;
                        
                        /**
                         * start by running this function, supplying implementations of {@link _javatypes.BaseEventRegistry} and {@link _javatypes.BaseProfile} and a {@link _javatypes.Supplier} for
                         *  creating the config manager with the folder paths it needs.
                         * @param eventRegistryFunction
                         * @param profileFunction
                         * @param configFolder
                         * @param macroFolder
                         * @param logger
                         * @return 
                         */
                        createInstance<V, R>(eventRegistryFunction: _javatypes.java.util._function.Function<_javatypes.xyz.wagyourtail.jsmacros.core.Core<V, R>, R>, profileFunction: _javatypes.java.util._function.BiFunction<_javatypes.xyz.wagyourtail.jsmacros.core.Core<V, R>, _javatypes.org.slf4j.Logger, V>, configFolder: _javatypes.java.io.File, macroFolder: _javatypes.java.io.File, logger: _javatypes.org.slf4j.Logger): _javatypes.xyz.wagyourtail.jsmacros.core.Core<V, R>;
                        
                    }
                }
            
                namespace language {
                
                    interface BaseScriptContext<T> extends _javatypes.java.lang.Object {
                        readonly startTime: number;
                        readonly syncObject: _javatypes.java.lang.ref.WeakReference<_javatypes.java.lang.Object>;
                        readonly triggeringEvent: Events.BaseEvent;
                        hasMethodWrapperBeenInvoked: boolean;
                        
                        
                        /**
                         * this object should only be weak referenced unless we want to prevent the context from closing when syncObject is cleared.
                         */
                        getSyncObject(): _javatypes.java.lang.Object;
                        clearSyncObject(): void;
                        
                        /**
                         * 
                         * @since 1.6.0
                         * @return 
                         */
                        getBoundEvents(): _javatypes.java.util.Map<_javatypes.java.lang.Thread, _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>>;
                        
                        /**
                         * 
                         * @since 1.6.0
                         * @param th
                         * @param event
                         */
                        bindEvent(th: _javatypes.java.lang.Thread, event: _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<_javatypes.xyz.wagyourtail.jsmacros.core.language.BaseScriptContext<T>>): void;
                        
                        /**
                         * 
                         * @since 1.6.0
                         * @param thread
                         * @return 
                         */
                        releaseBoundEventIfPresent(thread: _javatypes.java.lang.Thread): boolean;
                        getContext(): T;
                        
                        /**
                         * 
                         * @since 1.5.0
                         * @return 
                         */
                        getMainThread(): _javatypes.java.lang.Thread;
                        
                        /**
                         * 
                         * @since 1.6.0
                         * @param t
                         * @return is a newly bound thread
                         */
                        bindThread(t: _javatypes.java.lang.Thread): boolean;
                        
                        /**
                         * 
                         * @since 1.6.0
                         * @param t
                         */
                        unbindThread(t: _javatypes.java.lang.Thread): void;
                        
                        /**
                         * 
                         * @since 1.6.0
                         * @return 
                         */
                        getBoundThreads(): _javatypes.java.util.Set<_javatypes.java.lang.Thread>;
                        
                        /**
                         * 
                         * @since 1.5.0
                         * @param t
                         */
                        setMainThread(t: _javatypes.java.lang.Thread): void;
                        
                        /**
                         * 
                         * @since 1.5.0
                         */
                        getTriggeringEvent(): Events.BaseEvent;
                        setContext(context: T): void;
                        isContextClosed(): boolean;
                        closeContext(): void;
                        
                        /**
                         * 
                         * @since 1.6.0
                         * @return 
                         */
                        getFile(): _javatypes.java.io.File;
                        
                        /**
                         * 
                         * @since 1.6.0
                         * @return 
                         */
                        getContainedFolder(): _javatypes.java.io.File;
                        isMultiThreaded(): boolean;
                        wrapSleep(sleep: _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseScriptContext$SleepRunnable): void;
                        
                    }
                    namespace BaseScriptContext {
                        interface static {
                            new <T>(event: Events.BaseEvent, file: _javatypes.java.io.File): _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseScriptContext<T>;
                            
                            
                            
                        }
                    }
                    interface EventContainer<T> extends _javatypes.java.lang.Object {
                        
                        isLocked(): boolean;
                        setLockThread(lockThread: _javatypes.java.lang.Thread): void;
                        getCtx(): T;
                        getLockThread(): _javatypes.java.lang.Thread;
                        
                        /**
                         * careful with this one it can cause deadlocks if used in scripts incorrectly.
                         * @param then must be a {@link MethodWrapper} when called from a script.
                         * @throws InterruptedException
                         * @since 1.4.0
                         */
                        awaitLock(then: _javatypes.java.lang.Runnable): void;
                        
                        /**
                         * can be released earlier in a script or language impl.
                         * @since 1.4.0
                         */
                        releaseLock(): void;
                        toString(): string;
                        
                    }
                    namespace EventContainer {
                        interface static {
                            new <T>(ctx: T): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<T>;
                            
                            
                            
                        }
                    }
                    interface BaseScriptContext$SleepRunnable extends _javatypes.java.lang.Interface {
                        
                        run(): void;
                        
                    }
                    namespace BaseScriptContext$SleepRunnable {
                        interface static {
                            
                            
                            
                        }
                    }
                    interface BaseWrappedException<T> extends _javatypes.java.lang.Object {
                        readonly stackFrame: T;
                        readonly location: _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException$SourceLocation;
                        readonly message: string;
                        readonly next: _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException<any>;
                        
                        
                    }
                    namespace BaseWrappedException {
                        interface static {
                            new <T>(exception: T, message: string, location: _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException$SourceLocation, next: _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException<any>): _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException<T>;
                            
                            
                            wrapHostElement(t: _javatypes.java.lang.StackTraceElement, next: _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException<any>): _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException<_javatypes.java.lang.StackTraceElement>;
                            
                        }
                    }
                    interface BaseLanguage<U, T> extends _javatypes.java.lang.Object {
                        readonly extension: _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension;
                        preThread: _javatypes.java.lang.Runnable;
                        
                        trigger(macro: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger, event: Events.BaseEvent, then: _javatypes.java.lang.Runnable, catcher: _javatypes.java.util._function.Consumer<_javatypes.java.lang.Throwable>): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<T>;
                        trigger(lang: string, script: string, fakeFile: _javatypes.java.io.File, event: Events.BaseEvent, then: _javatypes.java.lang.Runnable, catcher: _javatypes.java.util._function.Consumer<_javatypes.java.lang.Throwable>): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<T>;
                        retrieveLibs(context: T): _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.core.library.BaseLibrary>;
                        retrieveOnceLibs(): _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.core.library.BaseLibrary>;
                        retrievePerExecLibs(context: T): _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.core.library.BaseLibrary>;
                        createContext(event: Events.BaseEvent, file: _javatypes.java.io.File): T;
                        
                    }
                    namespace BaseLanguage {
                        interface static {
                            new <U, T>(extension: _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension, runner: _javatypes.xyz.wagyourtail.jsmacros.core.Core<any, any>): _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseLanguage<U, T>;
                            
                            
                            
                        }
                    }
                    interface BaseWrappedException$SourceLocation extends _javatypes.java.lang.Object {
                        
                        
                    }
                    namespace BaseWrappedException$SourceLocation {
                        interface static {
                            new (): _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException$SourceLocation;
                            
                            
                            
                        }
                    }
                }
            
                namespace library {
                
                    interface BaseLibrary extends _javatypes.java.lang.Object {
                        
                        
                    }
                    namespace BaseLibrary {
                        interface static {
                            new (): _javatypes.xyz.wagyourtail.jsmacros.core.library.BaseLibrary;
                            
                            
                            
                        }
                    }
                    interface LibraryRegistry extends _javatypes.java.lang.Object {
                        readonly libraries: _javatypes.java.util.Map<_javatypes.xyz.wagyourtail.jsmacros.core.library.Library, _javatypes.xyz.wagyourtail.jsmacros.core.library.BaseLibrary>;
                        readonly perExec: _javatypes.java.util.Map<_javatypes.xyz.wagyourtail.jsmacros.core.library.Library, _javatypes.java.lang.Class<any>>;
                        readonly perLanguage: _javatypes.java.util.Map<_javatypes.java.lang.Class<any>, _javatypes.java.util.Map<_javatypes.xyz.wagyourtail.jsmacros.core.library.Library, _javatypes.xyz.wagyourtail.jsmacros.core.library.PerLanguageLibrary>>;
                        readonly perExecLanguage: _javatypes.java.util.Map<_javatypes.java.lang.Class<any>, _javatypes.java.util.Map<_javatypes.xyz.wagyourtail.jsmacros.core.library.Library, _javatypes.java.lang.Class<any>>>;
                        
                        getLibraries(language: _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseLanguage<any, any>, context: _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseScriptContext<any>): _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.core.library.BaseLibrary>;
                        getOnceLibraries(language: _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseLanguage<any, any>): _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.core.library.BaseLibrary>;
                        getPerExecLibraries(language: _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseLanguage<any, any>, context: _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseScriptContext<any>): _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.core.library.BaseLibrary>;
                        addLibrary(clazz: _javatypes.java.lang.Class<any>): void;
                        
                    }
                    namespace LibraryRegistry {
                        interface static {
                            new (): _javatypes.xyz.wagyourtail.jsmacros.core.library.LibraryRegistry;
                            
                            
                            
                        }
                    }
                    interface PerLanguageLibrary extends _javatypes.xyz.wagyourtail.jsmacros.core.library.BaseLibrary {
                        
                        
                    }
                    namespace PerLanguageLibrary {
                        interface static {
                            new (language: _javatypes.java.lang.Class<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.PerLanguageLibrary;
                            
                            
                            
                        }
                    }
                    interface Library extends _javatypes.java.lang.Interface, _javatypes.java.lang.annotation.Annotation {
                        
                        value(): string;
                        languages(): _javatypes.java.lang.Class<any>[];
                        
                    }
                    namespace Library {
                        interface static {
                            
                            
                            
                        }
                    }
                
                    namespace impl {
                    
                        interface FJsMacros$EventAndContext extends _javatypes.java.lang.Object {
                            readonly event: Events.BaseEvent;
                            readonly context: _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;
                            
                            toString(): string;
                            
                        }
                        namespace FJsMacros$EventAndContext {
                            interface static {
                                new (event: Events.BaseEvent, context: _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.FJsMacros$EventAndContext;
                                
                                
                                
                            }
                        }
                    
                        namespace classes {
                        
                            interface ProxyBuilder<T> extends _javatypes.java.lang.Object {
                                readonly factory: _javatypes.javassist.util.proxy.ProxyFactory;
                                readonly proxiedMethods: _javatypes.java.util.Map<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder$MethodSigParts, _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder$ProxyReference<T>, _javatypes.java.lang.Object[], any, any>>;
                                readonly proxiedMethodDefaults: _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder$ProxyReference<T>, _javatypes.java.lang.Object[], any, any>>;
                                
                                
                                /**
                                 * 
                                 * @param methodNameOrSig name of method or sig (the usual format)
                                 * @param proxyMethod
                                 * @since 1.6.0
                                 * @return self for chaining
                                 */
                                addMethod(methodNameOrSig: string, proxyMethod: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder$ProxyReference<T>, _javatypes.java.lang.Object[], any, any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder<T>;
                                
                                /**
                                 * 
                                 * @param constructorArgs args for the super constructor
                                 * @since 1.6.0
                                 * @return new instance of the constructor
                                 * @throws InvocationTargetException
                                 * @throws NoSuchMethodException
                                 * @throws InstantiationException
                                 * @throws IllegalAccessException
                                 */
                                buildInstance(constructorArgs: _javatypes.java.lang.Object[]): T;
                                
                                /**
                                 * 
                                 * @param constructorSig string signature (you can skip the &lt;init&gt; part)
                                 * @param constructorArgs args for the super constructor
                                 * @since 1.6.0
                                 * @return new instance of the constructor
                                 * @throws InvocationTargetException
                                 * @throws NoSuchMethodException
                                 * @throws InstantiationException
                                 * @throws IllegalAccessException
                                 * @throws ClassNotFoundException
                                 */
                                buildInstance(constructorSig: string, constructorArgs: _javatypes.java.lang.Object[]): T;
                                
                                /**
                                 * 
                                 * @param constructorSig string signature (you can skip the &lt;init&gt; part)
                                 * @param constructorArgs args for the super constructor
                                 * @since 1.6.0
                                 * @return new instance of the constructor
                                 * @throws InvocationTargetException
                                 * @throws NoSuchMethodException
                                 * @throws InstantiationException
                                 * @throws IllegalAccessException
                                 * @throws ClassNotFoundException
                                 */
                                buildInstance(constructorSig: _javatypes.java.lang.Class<any>[], constructorArgs: _javatypes.java.lang.Object[]): T;
                                
                            }
                            namespace ProxyBuilder {
                                interface static {
                                    new <T>(clazz: _javatypes.java.lang.Class<T>, interfaces: _javatypes.java.lang.Class<any>[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder<T>;
                                    
                                    
                                    
                                }
                            }
                            interface HTTPRequest$Response extends _javatypes.java.lang.Object {
                                headers: _javatypes.java.util.Map<string, _javatypes.java.util.List<string>>;
                                responseCode: number;
                                
                                
                                /**
                                 * 
                                 * @since 1.1.8
                                 * @return 
                                 */
                                text(): string;
                                
                                /**
                                 * Don't use this. Parse {@link _javatypes.HTTPRequest.Response#text} in the guest language
                                 * @since 1.1.8
                                 * @deprecated
                                 * @return 
                                 */
                                json(): _javatypes.java.lang.Object;
                                
                                /**
                                 * 
                                 * @since 1.2.2
                                 * @return 
                                 * @throws IOException
                                 */
                                byteArray(): number[];
                                
                            }
                            namespace HTTPRequest$Response {
                                interface static {
                                    new (inputStream: _javatypes.java.io.InputStream, responseCode: number, headers: _javatypes.java.util.Map<string, _javatypes.java.util.List<string>>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest$Response;
                                    
                                    
                                    
                                }
                            }
                            interface Websocket extends _javatypes.java.lang.Object {
                                
                                /**
                                 * calls your method as a {@link _javatypes.java.util._function.Consumer}&lt;{@link _javatypes.WebSocket}, {@link _javatypes.List}&lt;{@link _javatypes.String}&gt;&gt;
                                 */
                                onConnect: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.com.neovisionaries.ws.client.WebSocket, _javatypes.java.util.Map<string, _javatypes.java.util.List<string>>, _javatypes.java.lang.Object, any>;
                                
                                /**
                                 * calls your method as a {@link _javatypes.java.util._function.BiConsumer}&lt;{@link _javatypes.WebSocket}, {@link _javatypes.String}&gt;
                                 */
                                onTextMessage: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.com.neovisionaries.ws.client.WebSocket, string, _javatypes.java.lang.Object, any>;
                                
                                /**
                                 * calls your method as a {@link _javatypes.java.util._function.BiConsumer}&lt;{@link _javatypes.WebSocket}, {@link _javatypes.Disconnected}&gt;
                                 */
                                onDisconnect: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.com.neovisionaries.ws.client.WebSocket, _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket$Disconnected, _javatypes.java.lang.Object, any>;
                                
                                /**
                                 * calls your method as a {@link _javatypes.java.util._function.BiConsumer}&lt;{@link _javatypes.WebSocket}, {@link _javatypes.WebSocketException}&gt;
                                 */
                                onError: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.com.neovisionaries.ws.client.WebSocket, _javatypes.com.neovisionaries.ws.client.WebSocketException, _javatypes.java.lang.Object, any>;
                                
                                /**
                                 * calls your method as a {@link _javatypes.java.util._function.BiConsumer}&lt;{@link _javatypes.WebSocket}, {@link _javatypes.WebSocketFrame}&gt;
                                 */
                                onFrame: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.com.neovisionaries.ws.client.WebSocket, _javatypes.com.neovisionaries.ws.client.WebSocketFrame, _javatypes.java.lang.Object, any>;
                                
                                
                                /**
                                 * 
                                 * @since 1.1.9
                                 * @return 
                                 * @throws WebSocketException
                                 */
                                connect(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket;
                                
                                /**
                                 * 
                                 * @since 1.1.9
                                 * @return 
                                 */
                                getWs(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                                
                                /**
                                 * 
                                 * @since 1.1.9
                                 * @param text
                                 * @return 
                                 */
                                sendText(text: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket;
                                
                                /**
                                 * 
                                 * @since 1.1.9
                                 * @return 
                                 */
                                close(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket;
                                
                                /**
                                 * 
                                 * @since 1.1.9
                                 * @param closeCode
                                 * @return 
                                 */
                                close(closeCode: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket;
                                
                            }
                            namespace Websocket {
                                interface static {
                                    new (address: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket;
                                    new (address: _javatypes.java.net.URL): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket;
                                    
                                    
                                    
                                }
                            }
                            interface FileHandler extends _javatypes.java.lang.Object {
                                
                                
                                /**
                                 * writes a string to the file. this is a destructive operation that replaces the file contents.
                                 * @since 1.1.8
                                 * @param s
                                 * @return 
                                 * @throws IOException
                                 */
                                write(s: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.FileHandler;
                                
                                /**
                                 * writes a byte array to the file. this is a destructive operation that replaces the file contents.
                                 * @since 1.1.8
                                 * @param b
                                 * @return 
                                 * @throws IOException
                                 */
                                write(b: number[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.FileHandler;
                                
                                /**
                                 * 
                                 * @since 1.1.8
                                 * @return 
                                 * @throws IOException
                                 */
                                read(): string;
                                
                                /**
                                 * 
                                 * @since 1.2.6
                                 * @return 
                                 * @throws IOException
                                 */
                                readBytes(): number[];
                                
                                /**
                                 * 
                                 * @since 1.1.8
                                 * @param s
                                 * @return 
                                 * @throws IOException
                                 */
                                append(s: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.FileHandler;
                                
                                /**
                                 * 
                                 * @since 1.2.6
                                 * @param b
                                 * @return 
                                 * @throws IOException
                                 */
                                append(b: number[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.FileHandler;
                                getFile(): _javatypes.java.io.File;
                                toString(): string;
                                
                            }
                            namespace FileHandler {
                                interface static {
                                    new (path: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.FileHandler;
                                    new (path: _javatypes.java.io.File): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.FileHandler;
                                    
                                    
                                    
                                }
                            }
                            interface LibraryBuilder extends _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<_javatypes.xyz.wagyourtail.jsmacros.core.library.BaseLibrary> {
                                
                                
                                /**
                                 * constructor, if perExec run every context, if per language run once for each lang;
                                 *  params are context and language class
                                 *  if not per exec, param will be skipped
                                 *  ie:
                                 *  BaseLibrary: no params
                                 *  PerExecLibrary: context
                                 *  PerExecLanguageLibrary: context, language
                                 *  PerLanguageLibrary: language
                                 * 
                                 *  Don't do other constructors...
                                 * @return 
                                 * @throws NotFoundException
                                 */
                                addConstructor(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$ConstructorBuilder;
                                finishBuildAndFreeze(): _javatypes.java.lang.Class<any>;
                                
                            }
                            namespace LibraryBuilder {
                                interface static {
                                    new (name: string, perExec: boolean, allowedLangs: string[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.LibraryBuilder;
                                    
                                    
                                    
                                }
                            }
                            interface HTTPRequest extends _javatypes.java.lang.Object {
                                headers: _javatypes.java.util.Map<string, string>;
                                conn: _javatypes.java.net.URL;
                                
                                
                                /**
                                 * 
                                 * @since 1.1.8
                                 * @param key
                                 * @param value
                                 * @return 
                                 */
                                addHeader(key: string, value: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest;
                                
                                /**
                                 * 
                                 * @since 1.1.8
                                 * @return 
                                 * @throws IOException
                                 */
                                get(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest$Response;
                                
                                /**
                                 * 
                                 * @since 1.1.8
                                 * @param data
                                 * @return 
                                 * @throws IOException
                                 */
                                post(data: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest$Response;
                                
                            }
                            namespace HTTPRequest {
                                interface static {
                                    new (url: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest;
                                    
                                    
                                    
                                }
                            }
                            interface ClassBuilder<T> extends _javatypes.java.lang.Object {
                                readonly ctClass: _javatypes.javassist.CtClass;
                                
                                addField(fieldType: _javatypes.java.lang.Class<any>, name: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                addMethod(returnType: _javatypes.java.lang.Class<any>, name: string, params: _javatypes.java.lang.Class<any>[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$MethodBuilder;
                                addConstructor(params: _javatypes.java.lang.Class<any>[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$ConstructorBuilder;
                                addClinit(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$ConstructorBuilder;
                                addAnnotation(type: _javatypes.java.lang.Class<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>>;
                                finishBuildAndFreeze(): _javatypes.java.lang.Class<any>;
                                
                            }
                            namespace ClassBuilder {
                                interface static {
                                    new <T>(name: string, parent: _javatypes.java.lang.Class<T>, interfaces: _javatypes.java.lang.Class<any>[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                    
                                    readonly methodWrappers: _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>>;
                                    
                                    
                                }
                            }
                            interface ClassBuilder$AnnotationBuilder<T> extends _javatypes.java.lang.Object {
                                
                                putString(key: string, value: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>;
                                putBoolean(key: string, value: boolean): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>;
                                putByte(key: string, value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>;
                                putChar(key: string, value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>;
                                putShort(key: string, value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>;
                                putInt(key: string, value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>;
                                putLong(key: string, value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>;
                                putFloat(key: string, value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>;
                                putDouble(key: string, value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>;
                                putClass(key: string, value: _javatypes.java.lang.Class<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>;
                                putEnum(key: string, value: _javatypes.java.lang.Enum<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>;
                                putAnnotation(key: string, annotationClass: _javatypes.java.lang.Class<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>>;
                                putArray(key: string, annotationClass: _javatypes.java.lang.Class<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<T>>;
                                finish(): T;
                                
                            }
                            namespace ClassBuilder$AnnotationBuilder {
                                interface static {
                                    
                                    
                                    
                                }
                            }
                            interface ProxyBuilder$MethodSigParts extends _javatypes.java.lang.Object {
                                readonly name: string;
                                readonly params: _javatypes.java.lang.Class<any>[];
                                readonly returnType: _javatypes.java.lang.Class<any>;
                                
                                equals(o: _javatypes.java.lang.Object): boolean;
                                hashCode(): number;
                                
                            }
                            namespace ProxyBuilder$MethodSigParts {
                                interface static {
                                    
                                    
                                    
                                }
                            }
                            interface ClassBuilder$ConstructorBuilder extends _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$MethodBuilder {
                                
                                body(code_src: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                guestBody(methodBody: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                buildBody(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$BodyBuilder;
                                body(buildBody: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.javassist.CtClass, _javatypes.javassist.CtBehavior, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                endAbstract(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                
                            }
                            namespace ClassBuilder$ConstructorBuilder {
                                interface static {
                                    new (params: _javatypes.javassist.CtClass[], clInit: boolean): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$ConstructorBuilder;
                                    
                                    
                                    
                                }
                            }
                            interface ProxyBuilder$ProxyReference<T> extends _javatypes.java.lang.Object {
                                
                                /**
                                 * "this" value, but like python because "this" is a keyword in java...
                                 */
                                readonly self: T;
                                
                                /**
                                 * "super" value, but that's also a keyword so...
                                 */
                                readonly parent: _javatypes.java.util._function.Function<_javatypes.java.lang.Object[], _javatypes.java.lang.Object>;
                                
                                
                            }
                            namespace ProxyBuilder$ProxyReference {
                                interface static {
                                    new <T>(self: T, parent: _javatypes.java.util._function.Function<_javatypes.java.lang.Object[], _javatypes.java.lang.Object>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder$ProxyReference<T>;
                                    
                                    
                                    
                                }
                            }
                            interface Websocket$Disconnected extends _javatypes.java.lang.Object {
                                serverFrame: _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                                clientFrame: _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                                isServer: boolean;
                                
                                
                            }
                            namespace Websocket$Disconnected {
                                interface static {
                                    
                                    /**
                                     * 
                                     * @param serverFrame
                                     * @param clientFrame
                                     * @param isServer
                                     */
                                    new (serverFrame: _javatypes.com.neovisionaries.ws.client.WebSocketFrame, clientFrame: _javatypes.com.neovisionaries.ws.client.WebSocketFrame, isServer: boolean): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket$Disconnected;
                                    
                                    
                                    
                                }
                            }
                            interface ClassBuilder$FieldBuilder extends _javatypes.java.lang.Object {
                                fieldInitializer: _javatypes.javassist.CtField$Initializer;
                                
                                compile(code: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                rename(name: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                makePrivate(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                makePublic(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                makeProtected(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                makePackagePrivate(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                toggleStatic(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                toggleFinal(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                getMods(): number;
                                getModString(): string;
                                addAnnotation(type: _javatypes.java.lang.Class<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder>;
                                initializer(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder$FieldInitializerBuilder;
                                end(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                
                            }
                            namespace ClassBuilder$FieldBuilder {
                                interface static {
                                    new (fieldType: _javatypes.javassist.CtClass, name: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                    
                                    
                                    
                                }
                            }
                            interface ClassBuilder$MethodBuilder extends _javatypes.java.lang.Object {
                                
                                compile(code: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                makePrivate(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$MethodBuilder;
                                makePublic(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$MethodBuilder;
                                makeProtected(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$MethodBuilder;
                                makePackagePrivate(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$MethodBuilder;
                                toggleStatic(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$MethodBuilder;
                                rename(newName: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$MethodBuilder;
                                exceptions(exceptions: _javatypes.java.lang.Class<any>[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$MethodBuilder;
                                body(code_src: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                guestBody(methodBody: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                buildBody(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$BodyBuilder;
                                body(buildBody: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.javassist.CtClass, _javatypes.javassist.CtBehavior, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                endAbstract(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                addAnnotation(type: _javatypes.java.lang.Class<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$MethodBuilder>;
                                
                            }
                            namespace ClassBuilder$MethodBuilder {
                                interface static {
                                    new (methodReturnType: _javatypes.javassist.CtClass, methodName: string, params: _javatypes.javassist.CtClass[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$MethodBuilder;
                                    
                                    
                                    
                                }
                            }
                            interface ClassBuilder$BodyBuilder extends _javatypes.java.lang.Object {
                                
                                appendJavaCode(code: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$BodyBuilder;
                                
                                /**
                                 * 
                                 * @param code
                                 * @param argsAsObjects
                                 * @param tokenBefore ie, "return", "Object wasd = " etc
                                 * @return 
                                 */
                                appendGuestCode(code: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>, argsAsObjects: string, tokenBefore: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$BodyBuilder;
                                finish(): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder<T>;
                                
                            }
                            namespace ClassBuilder$BodyBuilder {
                                interface static {
                                    
                                    
                                    
                                }
                            }
                            interface ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U> extends _javatypes.java.lang.Object {
                                
                                putString(value: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>;
                                putBoolean(value: boolean): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>;
                                putByte(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>;
                                putChar(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>;
                                putShort(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>;
                                putInt(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>;
                                putLong(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>;
                                putFloat(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>;
                                putDouble(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>;
                                putClass(value: _javatypes.java.lang.Class<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>;
                                putEnum(value: _javatypes.java.lang.Enum<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>;
                                putAnnotation(annotationClass: _javatypes.java.lang.Class<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>>;
                                putArray(annotationClass: _javatypes.java.lang.Class<any>): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>>;
                                finish(): U;
                                
                            }
                            namespace ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder {
                                interface static {
                                    new <U>(parent: U, constPool: _javatypes.javassist.bytecode.ConstPool): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$AnnotationBuilder$AnnotationArrayBuilder<U>;
                                    
                                    
                                    
                                }
                            }
                            interface ClassBuilder$FieldBuilder$FieldInitializerBuilder extends _javatypes.java.lang.Object {
                                
                                setInt(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                setLong(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                setFloat(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                setDouble(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                setChar(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                setString(value: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                setBoolean(value: boolean): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                setByte(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                setShort(value: number): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                compile(code: string): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                initClass(clazz: _javatypes.java.lang.Class<any>, code_arg: string[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                callStaticMethod(clazz: _javatypes.java.lang.Class<any>, methodName: string, code_arg: string[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                callStaticMethodInThisClass(methodName: string, code_arg: string[]): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder;
                                
                            }
                            namespace ClassBuilder$FieldBuilder$FieldInitializerBuilder {
                                interface static {
                                    new (): _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder$FieldBuilder$FieldInitializerBuilder;
                                    
                                    
                                    
                                }
                            }
                        }
                    }
                }
            
                namespace classes {
                
                    interface Mappings extends _javatypes.java.lang.Object {
                        readonly mappingsource: string;
                        
                        
                        /**
                         * 
                         * @return mappings from Intermediary to Named
                         * @since 1.3.1
                         * @throws IOException will throw if malformed url/path
                         */
                        getMappings(): _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings$ClassData>;
                        
                        /**
                         * 
                         * @return mappings from Named to Intermediary
                         * @since 1.3.1
                         * @throws IOException will throw if malformed url/path
                         */
                        getReversedMappings(): _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings$ClassData>;
                        
                        /**
                         * 
                         * @since 1.6.0
                         * @return 
                         */
                        remapClass<T>(instance: T): _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings$MappedClass<T>;
                        
                        /**
                         * gets the class without instance, so can only access static methods/fields
                         * @param className
                         * @return 
                         * @throws IOException
                         * @throws ClassNotFoundException
                         */
                        getClass(className: string): _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings$MappedClass<any>;
                        
                    }
                    namespace Mappings {
                        interface static {
                            new (mappingsource: string): _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings;
                            
                            
                            
                        }
                    }
                    interface WrappedClassInstance<T> extends _javatypes.java.lang.Object {
                        
                        getFieldValue(fieldName: string): _javatypes.java.lang.Object;
                        getFieldValueAsClass(asClass: string, fieldName: string): _javatypes.java.lang.Object;
                        setFieldValue(fieldName: string, fieldValue: _javatypes.java.lang.Object): void;
                        setFieldValueAsClass(asClass: string, fieldName: string, fieldValue: _javatypes.java.lang.Object): void;
                        invokeMethod(methodNameOrSig: string, params: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                        invokeMethodAsClass(asClass: string, methodNameOrSig: string, params: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                        
                        /**
                         * 
                         * @since 1.6.5
                         * @return 
                         */
                        getRawInstance(): T;
                        
                        /**
                         * 
                         * @since 1.6.5
                         * @return 
                         */
                        getRawClass(): _javatypes.java.lang.Class<T>;
                        
                    }
                    namespace WrappedClassInstance {
                        interface static {
                            new <T>(instance: T): _javatypes.xyz.wagyourtail.jsmacros.core.classes.WrappedClassInstance<T>;
                            new <T>(instanceNullable: T, tClass: _javatypes.java.lang.Class<T>): _javatypes.xyz.wagyourtail.jsmacros.core.classes.WrappedClassInstance<T>;
                            
                            
                            
                        }
                    }
                    interface Mappings$MappedClass<T> extends _javatypes.xyz.wagyourtail.jsmacros.core.classes.WrappedClassInstance<T> {
                        
                        
                    }
                    namespace Mappings$MappedClass {
                        interface static {
                            new <T>(instance: T): _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings$MappedClass<T>;
                            new <T>(instance: T, type: _javatypes.java.lang.Class<T>): _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings$MappedClass<T>;
                            
                            
                            
                        }
                    }
                    interface Mappings$ClassData extends _javatypes.java.lang.Object {
                        readonly methods: _javatypes.java.util.Map<string, _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings$MethodData>;
                        readonly fields: _javatypes.java.util.Map<string, string>;
                        readonly name: string;
                        
                        toString(): string;
                        
                    }
                    namespace Mappings$ClassData {
                        interface static {
                            new (name: string): _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings$ClassData;
                            
                            
                            
                        }
                    }
                    interface Mappings$MethodData extends _javatypes.java.lang.Object {
                        readonly name: string;
                        readonly sig: _javatypes.java.util._function.Supplier<string>;
                        
                        toString(): string;
                        
                    }
                    namespace Mappings$MethodData {
                        interface static {
                            new (name: string, sig: _javatypes.java.util._function.Supplier<string>): _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings$MethodData;
                            
                            
                            
                        }
                    }
                }
            
                namespace config {
                
                    interface ConfigManager extends _javatypes.java.lang.Object {
                        readonly optionClasses: _javatypes.java.util.Map<string, _javatypes.java.lang.Class<any>>;
                        readonly options: _javatypes.java.util.Map<_javatypes.java.lang.Class<any>, _javatypes.java.lang.Object>;
                        readonly configFolder: _javatypes.java.io.File;
                        readonly macroFolder: _javatypes.java.io.File;
                        readonly configFile: _javatypes.java.io.File;
                        readonly LOGGER: _javatypes.org.slf4j.Logger;
                        rawOptions: _javatypes.com.google.gson.JsonObject;
                        
                        reloadRawConfigFromFile(): void;
                        convertConfigFormat(): void;
                        convertConfigFormat(clazz: _javatypes.java.lang.Class<any>): void;
                        getOptions<T>(optionClass: _javatypes.java.lang.Class<T>): T;
                        addOptions(key: string, optionClass: _javatypes.java.lang.Class<any>): void;
                        loadConfig(): void;
                        loadDefaults(): void;
                        saveConfig(): void;
                        
                    }
                    namespace ConfigManager {
                        interface static {
                            new (configFolder: _javatypes.java.io.File, macroFolder: _javatypes.java.io.File, logger: _javatypes.org.slf4j.Logger): _javatypes.xyz.wagyourtail.jsmacros.core.config.ConfigManager;
                            
                            
                            
                        }
                    }
                    interface ScriptTrigger extends _javatypes.java.lang.Object {
                        triggerType: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger$TriggerType;
                        event: string;
                        scriptFile: string;
                        enabled: boolean;
                        
                        equals(macro: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger): boolean;
                        toString(): string;
                        copy(): _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger;
                        
                        /**
                         * 
                         * @since 1.2.7
                         * @return 
                         */
                        getTriggerType(): _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger$TriggerType;
                        
                        /**
                         * 
                         * @since 1.2.7
                         * @return 
                         */
                        getEvent(): string;
                        
                        /**
                         * 
                         * @since 1.2.7
                         * @return 
                         */
                        getScriptFile(): string;
                        
                        /**
                         * 
                         * @since 1.2.7
                         * @return 
                         */
                        getEnabled(): boolean;
                        
                    }
                    namespace ScriptTrigger {
                        interface static {
                            new (triggerType: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger$TriggerType, event: string, scriptFile: _javatypes.java.io.File, enabled: boolean): _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger;
                            new (triggerType: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger$TriggerType, event: string, scriptFile: string, enabled: boolean): _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger;
                            
                            
                            copy(m: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger): _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger;
                            
                        }
                    }
                    interface BaseProfile extends _javatypes.java.lang.Object {
                        readonly LOGGER: _javatypes.org.slf4j.Logger;
                        readonly joinedThreadStack: _javatypes.java.util.Set<_javatypes.java.lang.Thread>;
                        profileName: string;
                        
                        logError(ex: _javatypes.java.lang.Throwable): void;
                        
                        /**
                         * 
                         * @since 1.1.2 [citation needed]
                         * @return 
                         */
                        getRegistry(): _javatypes.xyz.wagyourtail.jsmacros.core.event.BaseEventRegistry;
                        
                        /**
                         * 
                         * @since 1.6.0
                         */
                        checkJoinedThreadStack(): boolean;
                        
                        /**
                         * 
                         * @since 1.1.2 [citation needed]
                         * @param profileName
                         */
                        loadOrCreateProfile(profileName: string): void;
                        
                        /**
                         * 
                         * @since 1.0.8 [citation needed]
                         */
                        saveProfile(): void;
                        
                        /**
                         * 
                         * @since 1.2.7
                         * @param event
                         */
                        triggerEvent(event: Events.BaseEvent): void;
                        
                        /**
                         * 
                         * @since 1.2.7
                         * @param event
                         */
                        triggerEventJoin(event: Events.BaseEvent): void;
                        
                        /**
                         * 
                         * @since 1.2.7
                         * @param event
                         */
                        triggerEventNoAnything(event: Events.BaseEvent): void;
                        
                        /**
                         * 
                         * @since 1.2.7
                         * @param event
                         */
                        triggerEventJoinNoAnything(event: Events.BaseEvent): void;
                        init(defaultProfile: string): void;
                        getCurrentProfileName(): string;
                        renameCurrentProfile(profile: string): void;
                        
                    }
                    namespace BaseProfile {
                        interface static {
                            new (runner: _javatypes.xyz.wagyourtail.jsmacros.core.Core, logger: _javatypes.org.slf4j.Logger): _javatypes.xyz.wagyourtail.jsmacros.core.config.BaseProfile;
                            
                            
                            
                        }
                    }
                    interface ScriptTrigger$TriggerType extends _javatypes.java.lang.Enum<_javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger$TriggerType> {
                        
                        
                    }
                    namespace ScriptTrigger$TriggerType {
                        interface static {
                            
                            readonly KEY_FALLING: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger$TriggerType;
                            readonly KEY_RISING: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger$TriggerType;
                            readonly KEY_BOTH: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger$TriggerType;
                            readonly EVENT: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger$TriggerType;
                            
                            values(): _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger$TriggerType[];
                            valueOf(name: string): _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger$TriggerType;
                            
                        }
                    }
                }
            
                namespace service {
                
                    interface ServiceManager extends _javatypes.java.lang.Object {
                        
                        
                        /**
                         * 
                         * @param name
                         * @param pathToFile relative to macro folder
                         * @return false if service with that name is already registered
                         */
                        registerService(name: string, pathToFile: string): boolean;
                        
                        /**
                         * 
                         * @param name
                         * @param pathToFile relative to macro folder
                         * @param enabled
                         * @return false if service with that name is already registered
                         */
                        registerService(name: string, pathToFile: string, enabled: boolean): boolean;
                        
                        /**
                         * 
                         * @param name
                         * @param trigger
                         * @return false if service with that name already registered
                         */
                        registerService(name: string, trigger: _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceTrigger): boolean;
                        
                        /**
                         * 
                         * @param name
                         * @return 
                         */
                        unregisterService(name: string): boolean;
                        
                        /**
                         * 
                         * @param oldName
                         * @param newName
                         * @return false if service with new name already registered or old name doesn't exist
                         */
                        renameService(oldName: string, newName: string): boolean;
                        
                        /**
                         * 
                         * @return registered service names
                         */
                        getServices(): _javatypes.java.util.Set<string>;
                        
                        /**
                         * starts service once
                         * @param name service name
                         * @return previous state (or {@link ServiceStatus#UNKNOWN} if unknown service)
                         */
                        startService(name: string): _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus;
                        
                        /**
                         * 
                         * @param name service name
                         * @return previous state (or {@link ServiceStatus#UNKNOWN} if unknown service)
                         */
                        stopService(name: string): _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus;
                        
                        /**
                         * 
                         * @param name service name
                         * @return state before "restarting" (or {@link ServiceStatus#UNKNOWN} if unknown service)
                         */
                        restartService(name: string): _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus;
                        
                        /**
                         * 
                         * @param name service name
                         * @return previous state (or {@link ServiceStatus#UNKNOWN} if unknown service)
                         */
                        enableService(name: string): _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus;
                        
                        /**
                         * 
                         * @param name service name
                         * @return previous state (or {@link ServiceStatus#UNKNOWN} if unknown service)
                         */
                        disableService(name: string): _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus;
                        
                        /**
                         * 
                         * @param name service name
                         * @return {@link ServiceStatus#UNKNOWN} if unknown service, {@link ServiceStatus#RUNNING} if disabled and running, {@link ServiceStatus#DISABLED} if disabled and stopped, {@link ServiceStatus#STOPPED} if enabled and stopped, {@link ServiceStatus#ENABLED} if enabled and running.
                         */
                        status(name: string): _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus;
                        
                        /**
                         * this might throw if the service is not running...
                         * @param name
                         * @since 1.6.5
                         * @return the event that is current for the service
                         */
                        getServiceData(name: string): _javatypes.xyz.wagyourtail.jsmacros.core.service.EventService;
                        
                        /**
                         * 
                         * @param name
                         * @since 1.6.5 [named getServiceData previously]
                         * @return 
                         */
                        getTrigger(name: string): _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceTrigger;
                        
                        /**
                         * load services from config
                         */
                        load(): void;
                        
                        /**
                         * save current registered services & enabled/disabled status to config
                         */
                        save(): void;
                        
                    }
                    namespace ServiceManager {
                        interface static {
                            new (runner: _javatypes.xyz.wagyourtail.jsmacros.core.Core<any, any>): _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager;
                            
                            
                            
                        }
                    }
                    interface ServiceTrigger extends _javatypes.java.lang.Object {
                        file: string;
                        enabled: boolean;
                        
                        toScriptTrigger(): _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger;
                        equals(o: _javatypes.java.lang.Object): boolean;
                        hashCode(): number;
                        
                    }
                    namespace ServiceTrigger {
                        interface static {
                            new (file: _javatypes.java.io.File, enabled: boolean): _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceTrigger;
                            
                            
                            
                        }
                    }
                    export interface EventService extends _javatypes.java.lang.Object, Events.BaseEvent {
                        readonly serviceName: string;
                        
                        /**
                         * when this service is stopped, this is run...
                         */
                        stopListener: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>;
                        
                        toString(): string;
                        
                        /**
                         * Put an Integer into the global variable space.
                         * @param name
                         * @param i
                         * @return 
                         * @since 1.6.5
                         */
                        putInt(name: string, i: number): number;
                        
                        /**
                         * put a String into the global variable space.
                         * @param name
                         * @param str
                         * @return 
                         * @since 1.6.5
                         */
                        putString(name: string, str: string): string;
                        
                        /**
                         * put a Double into the global variable space.
                         * @param name
                         * @param d
                         * @return 
                         * @since 1.6.5
                         */
                        putDouble(name: string, d: number): number;
                        
                        /**
                         * put a Boolean into the global variable space.
                         * @param name
                         * @param b
                         * @return 
                         * @since 1.6.5
                         */
                        putBoolean(name: string, b: boolean): boolean;
                        
                        /**
                         * put anything else into the global variable space.
                         * @param name
                         * @param o
                         * @return 
                         * @since 1.6.5
                         */
                        putObject(name: string, o: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                        
                        /**
                         * Returns the type of the defined item in the global variable space as a string.
                         * @param name
                         * @return 
                         * @since 1.6.5
                         */
                        getType(name: string): string;
                        
                        /**
                         * Gets an Integer from the global variable space.
                         * @param name
                         * @return 
                         * @since 1.6.5
                         */
                        getInt(name: string): number;
                        
                        /**
                         * Gets an Integer from the global variable space. and then increment it there.
                         * @param name
                         * @return 
                         * @since 1.6.5
                         */
                        getAndIncrementInt(name: string): number;
                        
                        /**
                         * Gets an integer from the global variable pace. and then decrement it there.
                         * @param name
                         * @return 
                         * @since 1.6.5
                         */
                        getAndDecrementInt(name: string): number;
                        
                        /**
                         * increment an Integer in the global variable space. then return it.
                         * @param name
                         * @return 
                         * @since 1.6.5
                         */
                        incrementAndGetInt(name: string): number;
                        
                        /**
                         * decrement an Integer in the global variable space. then return it.
                         * @param name
                         * @return 
                         * @since 1.6.5
                         */
                        decrementAndGetInt(name: string): number;
                        
                        /**
                         * Gets a String from the global variable space
                         * @param name
                         * @return 
                         * @since 1.6.5
                         */
                        getString(name: string): string;
                        
                        /**
                         * Gets a Double from the global variable space.
                         * @param name
                         * @return 
                         * @since 1.6.5
                         */
                        getDouble(name: string): number;
                        
                        /**
                         * Gets a Boolean from the global variable space.
                         * @param name
                         * @return 
                         * @since 1.6.5
                         */
                        getBoolean(name: string): boolean;
                        
                        /**
                         * toggles a global boolean and returns its new value
                         * @param name
                         * @return 
                         * @since 1.6.5
                         */
                        toggleBoolean(name: string): boolean;
                        
                        /**
                         * Gets an Object from the global variable space.
                         * @param name
                         * @return 
                         * @since 1.6.5
                         */
                        getObject(name: string): _javatypes.java.lang.Object;
                        
                        /**
                         * removes a key from the global varaible space.
                         * @param key
                         * @since 1.6.5
                         */
                        remove(key: string): void;
                        getRaw(): _javatypes.java.util.Map<string, _javatypes.java.lang.Object>;
                        
                    }
                    namespace EventService {
                        interface static {
                            new (name: string): _javatypes.xyz.wagyourtail.jsmacros.core.service.EventService;
                            
                            
                            
                        }
                    }
                    interface ServiceManager$ServiceStatus extends _javatypes.java.lang.Enum<_javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus> {
                        
                        
                    }
                    namespace ServiceManager$ServiceStatus {
                        interface static {
                            
                            readonly ENABLED: _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus;
                            readonly DISABLED: _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus;
                            readonly RUNNING: _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus;
                            readonly STOPPED: _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus;
                            readonly UNKNOWN: _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus;
                            
                            values(): _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus[];
                            valueOf(name: string): _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager$ServiceStatus;
                            
                        }
                    }
                }
            
                namespace event {
                
                    interface IEventListener extends _javatypes.java.lang.Interface {
                        
                        trigger(event: Events.BaseEvent): _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer<any>;
                        
                    }
                    namespace IEventListener {
                        interface static {
                            
                            
                            
                        }
                    }
                    interface BaseEventRegistry extends _javatypes.java.lang.Object {
                        readonly oldEvents: _javatypes.java.util.Map<string, string>;
                        readonly events: _javatypes.java.util.Set<string>;
                        
                        clearMacros(): void;
                        
                        /**
                         * 
                         * @since 1.1.2 [citation needed]
                         * @param rawmacro
                         */
                        addScriptTrigger(rawmacro: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger): void;
                        
                        /**
                         * 
                         * @since 1.2.3
                         * @param event
                         * @param listener
                         */
                        addListener(event: string, listener: _javatypes.xyz.wagyourtail.jsmacros.core.event.IEventListener): void;
                        
                        /**
                         * 
                         * @since 1.2.3
                         * @param event
                         * @param listener
                         * @return 
                         */
                        removeListener(event: string, listener: _javatypes.xyz.wagyourtail.jsmacros.core.event.IEventListener): boolean;
                        
                        /**
                         * 
                         * @since 1.2.3
                         * @param listener
                         * @return 
                         */
                        removeListener(listener: _javatypes.xyz.wagyourtail.jsmacros.core.event.IEventListener): boolean;
                        
                        /**
                         * 
                         * @since 1.1.2 [citation needed]
                         * @param rawmacro
                         * @return 
                         */
                        removeScriptTrigger(rawmacro: _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger): boolean;
                        
                        /**
                         * 
                         * @since 1.2.3
                         * @return 
                         */
                        getListeners(): _javatypes.java.util.Map<string, _javatypes.java.util.Set<_javatypes.xyz.wagyourtail.jsmacros.core.event.IEventListener>>;
                        
                        /**
                         * 
                         * @since 1.2.3
                         * @param key
                         * @return 
                         */
                        getListeners(key: string): _javatypes.java.util.Set<_javatypes.xyz.wagyourtail.jsmacros.core.event.IEventListener>;
                        
                        /**
                         * 
                         * @see ScriptTrigger
                         * @since 1.1.2 [citation needed]
                         * @return 
                         */
                        getScriptTriggers(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger>;
                        
                        /**
                         * 
                         * @since 1.1.2 [citation needed]
                         * @param eventName
                         */
                        addEvent(eventName: string): void;
                        addEvent(clazz: _javatypes.java.lang.Class<any>): void;
                        
                    }
                    namespace BaseEventRegistry {
                        interface static {
                            new (runner: _javatypes.xyz.wagyourtail.jsmacros.core.Core): _javatypes.xyz.wagyourtail.jsmacros.core.event.BaseEventRegistry;
                            
                            
                            
                        }
                    }
                
                    namespace impl {
                    
                        export interface EventCustom extends _javatypes.java.lang.Object, Events.BaseEvent {
                            eventName: string;
                            
                            
                            /**
                             * Triggers the event.
                             *  Try not to cause infinite looping by triggering the same {@link _javatypes.EventCustom} from its own listeners.
                             * @since 1.2.8
                             */
                            trigger(): void;
                            
                            /**
                             * trigger the event listeners, then run `callback` when they finish.
                             * @since 1.3.1
                             * @param callback used as a {@link Runnable}, so no args, no return value.
                             */
                            trigger(callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): void;
                            
                            /**
                             * Triggers the event and waits for it to complete.
                             *  In languages with threading issues (js/jep) this may cause circular waiting when triggered from the same thread as
                             *  the `jsmacros.on` registration for the event
                             * @since 1.2.8
                             */
                            triggerJoin(): void;
                            
                            /**
                             * Put an Integer into the event.
                             * @param name
                             * @param i
                             * @return 
                             * @since 1.2.8
                             */
                            putInt(name: string, i: number): number;
                            
                            /**
                             * put a String into the event.
                             * @param name
                             * @param str
                             * @return 
                             * @since 1.2.8
                             */
                            putString(name: string, str: string): string;
                            
                            /**
                             * put a Double into the event.
                             * @param name
                             * @param d
                             * @return 
                             * @since 1.2.8
                             */
                            putDouble(name: string, d: number): number;
                            
                            /**
                             * put a Boolean into the event.
                             * @param name
                             * @param b
                             * @return 
                             * @since 1.2.8
                             */
                            putBoolean(name: string, b: boolean): boolean;
                            
                            /**
                             * put anything else into the event.
                             * @param name
                             * @param o
                             * @return 
                             * @since 1.2.8
                             */
                            putObject(name: string, o: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                            
                            /**
                             * Returns the type of the defined item in the event as a string.
                             * @param name
                             * @return 
                             * @since 1.2.8
                             */
                            getType(name: string): string;
                            
                            /**
                             * Gets an Integer from the event.
                             * @param name
                             * @return 
                             * @since 1.2.8
                             */
                            getInt(name: string): number;
                            
                            /**
                             * Gets a String from the event
                             * @param name
                             * @return 
                             * @since 1.2.8
                             */
                            getString(name: string): string;
                            
                            /**
                             * Gets a Double from the event.
                             * @param name
                             * @return 
                             * @since 1.2.8
                             */
                            getDouble(name: string): number;
                            
                            /**
                             * Gets a Boolean from the event.
                             * @param name
                             * @return 
                             * @since 1.2.8
                             */
                            getBoolean(name: string): boolean;
                            
                            /**
                             * Gets an Object from the event.
                             * @param name
                             * @return 
                             * @since 1.2.8
                             */
                            getObject(name: string): _javatypes.java.lang.Object;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @return map backing the event
                             */
                            getUnderlyingMap(): _javatypes.java.util.Map<string, _javatypes.java.lang.Object>;
                            
                            /**
                             * registers event so you can see it in the gui
                             * @since 1.3.0
                             */
                            registerEvent(): void;
                            
                        }
                        namespace EventCustom {
                            interface static {
                                
                                /**
                                 * 
                                 * @param eventName name of the event. please don't use an existing one... your scripts might not like that.
                                 */
                                new (eventName: string): _javatypes.xyz.wagyourtail.jsmacros.core.event.impl.EventCustom;
                                
                                
                                
                            }
                        }
                    }
                }
            
                namespace extensions {
                
                    interface ExtensionLoader extends _javatypes.java.lang.Object {
                        
                        isExtensionLoaded(name: string): boolean;
                        notLoaded(): boolean;
                        getHighestPriorityExtension(): _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension;
                        getAllExtensions(): _javatypes.java.util.Set<_javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension>;
                        getExtensionForFile(file: _javatypes.java.io.File): _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension;
                        getExtensionForName(lang: string): _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension;
                        loadExtensions(): void;
                        isGuestObject(obj: _javatypes.java.lang.Object): boolean;
                        
                    }
                    namespace ExtensionLoader {
                        interface static {
                            new (core: _javatypes.xyz.wagyourtail.jsmacros.core.Core<any, any>): _javatypes.xyz.wagyourtail.jsmacros.core.extensions.ExtensionLoader;
                            
                            
                            
                        }
                    }
                    interface Extension extends _javatypes.java.lang.Interface {
                        
                        init(): void;
                        getPriority(): number;
                        getLanguageImplName(): string;
                        extensionMatch(file: _javatypes.java.io.File): _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension$ExtMatch;
                        defaultFileExtension(): string;
                        
                        /**
                         * 
                         * @return a single static instance of the language definition
                         */
                        getLanguage(runner: _javatypes.xyz.wagyourtail.jsmacros.core.Core<any, any>): _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseLanguage<any, any>;
                        getLibraries(): _javatypes.java.util.Set<_javatypes.java.lang.Class<any>>;
                        getDependencies(): _javatypes.java.util.Set<_javatypes.java.net.URL>;
                        wrapException(t: _javatypes.java.lang.Throwable): _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException<any>;
                        getTranslations(lang: string): _javatypes.java.util.Map<string, string>;
                        isGuestObject(o: _javatypes.java.lang.Object): boolean;
                        
                    }
                    namespace Extension {
                        interface static {
                            
                            
                            getDependenciesInternal(clazz: _javatypes.java.lang.Class<any>, fname: string): _javatypes.java.util.Set<_javatypes.java.net.URL>;
                            getTranslationsInternal(clazz: _javatypes.java.lang.Class<any>, fname: string): _javatypes.java.util.Map<string, string>;
                            
                        }
                    }
                    interface Extension$ExtMatch extends _javatypes.java.lang.Enum<_javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension$ExtMatch> {
                        
                        isMatch(): boolean;
                        
                    }
                    namespace Extension$ExtMatch {
                        interface static {
                            
                            readonly NOT_MATCH: _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension$ExtMatch;
                            readonly MATCH: _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension$ExtMatch;
                            readonly MATCH_WITH_NAME: _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension$ExtMatch;
                            
                            values(): _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension$ExtMatch[];
                            valueOf(name: string): _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension$ExtMatch;
                            
                        }
                    }
                }
            
                namespace helpers {
                
                    interface BaseHelper<T> extends _javatypes.java.lang.Object {
                        
                        getRaw(): T;
                        
                    }
                    namespace BaseHelper {
                        interface static {
                            new <T>(base: T): _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper<T>;
                            
                            
                            
                        }
                    }
                }
            }
        
            namespace client {
            
            
                namespace api {
                
                
                    namespace helpers {
                    
                        interface OptionsHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @return 0: off, 2: fancy
                             */
                            getCloudMode(): number;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @param mode 0: off, 2: fancy
                             * @return 
                             */
                            setCloudMode(mode: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.OptionsHelper;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @return 
                             */
                            getGraphicsMode(): number;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @param mode 0: fast, 2: fabulous
                             * @return 
                             */
                            setGraphicsMode(mode: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.OptionsHelper;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @return list of names of resource packs.
                             */
                            getResourcePacks(): _javatypes.java.util.List<string>;
                            
                            /**
                             * 
                             * @since 1.2.0
                             * @return list of names of enabled resource packs.
                             */
                            getEnabledResourcePacks(): _javatypes.java.util.List<string>;
                            
                            /**
                             * Set the enabled resource packs to the provided list.
                             * @since 1.2.0
                             * @param enabled
                             * @return 
                             */
                            setEnabledResourcePacks(enabled: string[]): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.OptionsHelper;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @return 
                             */
                            isRightHanded(): boolean;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @param val
                             */
                            setRightHanded(val: boolean): void;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @return 
                             */
                            getFov(): number;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @param fov
                             * @return 
                             */
                            setFov(fov: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.OptionsHelper;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @return 
                             */
                            getRenderDistance(): number;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @param d
                             */
                            setRenderDistance(d: number): void;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @return 
                             */
                            getWidth(): number;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @return 
                             */
                            getHeight(): number;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @param w
                             */
                            setWidth(w: number): void;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @param h
                             */
                            setHeight(h: number): void;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @param w
                             * @param h
                             */
                            setSize(w: number, h: number): void;
                            
                            /**
                             * 
                             * @since 1.3.0
                             *  normal values for gamam are between {@code 0} and {@code 1}
                             */
                            getGamma(): number;
                            
                            /**
                             * 
                             * @since 1.3.0
                             *  normal values for gamma are between {@code 0} and {@code 1}
                             */
                            setGamma(gamma: number): void;
                            
                            /**
                             * 
                             * @since 1.3.1
                             * @param vol
                             */
                            setVolume(vol: number): void;
                            
                            /**
                             * set volume by category.
                             * @since 1.3.1
                             * @param category
                             * @param volume
                             */
                            setVolume(category: string, volume: number): void;
                            
                            /**
                             * 
                             * @since 1.3.1
                             * @return 
                             */
                            getVolumes(): _javatypes.java.util.Map<string, number>;
                            
                            /**
                             * sets gui scale, `0` for auto.
                             * @since 1.3.1
                             * @param scale
                             */
                            setGuiScale(scale: number): void;
                            
                            /**
                             * 
                             * @since 1.3.1
                             * @return gui scale, {@code 0} for auto.
                             */
                            getGuiScale(): number;
                            
                            /**
                             * 
                             * @param category
                             * @since 1.3.1
                             * @return 
                             */
                            getVolume(category: string): number;
                            
                            /**
                             * 
                             * @since 1.5.0
                             * @return 
                             */
                            getSmoothCamera(): boolean;
                            
                            /**
                             * 
                             * @param val
                             * @since 1.5.0
                             */
                            setSmoothCamera(val: boolean): void;
                            
                            /**
                             * 
                             * @since 1.5.0
                             * @return 0 for 1st person, 2 for in front.
                             */
                            getCameraMode(): number;
                            
                            /**
                             * 
                             * @param mode 0: first, 2: front
                             * @since 1.5.0
                             */
                            setCameraMode(mode: number): void;
                            
                        }
                        namespace OptionsHelper {
                            interface static {
                                new (options: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.OptionsHelper;
                                
                                
                                
                            }
                        }
                        interface PlayerListEntryHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.1.9
                             * @return 
                             */
                            getUUID(): string;
                            
                            /**
                             * 
                             * @since 1.0.2
                             * @return 
                             */
                            getName(): string;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return 
                             */
                            getPing(): number;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return null if unknown
                             */
                            getGamemode(): string;
                            
                            /**
                             * 
                             * @since 1.1.9
                             * @return 
                             */
                            getDisplayText(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            toString(): string;
                            
                        }
                        namespace PlayerListEntryHelper {
                            interface static {
                                new (p: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerListEntryHelper;
                                
                                
                                
                            }
                        }
                        interface ClientPlayerEntityHelper<T> extends _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerEntityHelper<T> {
                            
                            
                            /**
                             * 
                             * @param yaw (was pitch prior to 1.2.6)
                             * @param pitch (was yaw prior to 1.2.6)
                             * @return 
                             * @since 1.0.3
                             */
                            lookAt(yaw: number, pitch: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * look at the specified coordinates.
                             * @param x
                             * @param y
                             * @param z
                             * @return 
                             * @since 1.2.8
                             */
                            lookAt(x: number, y: number, z: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @param entity
                             * @since 1.5.0
                             */
                            attack(entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @since 1.6.0
                             * @param await
                             * @param entity
                             */
                            attack(entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>, await: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @param x
                             * @param y
                             * @param z
                             * @param direction 0-5 in order: [DOWN, UP, NORTH, SOUTH, WEST, EAST];
                             * @since 1.5.0
                             */
                            attack(x: number, y: number, z: number, direction: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @since 1.6.0
                             * @param x
                             * @param y
                             * @param z
                             * @param direction 0-5 in order: [DOWN, UP, NORTH, SOUTH, WEST, EAST];
                             * @param await
                             * @throws InterruptedException
                             */
                            attack(x: number, y: number, z: number, direction: number, await: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @param entity
                             * @param offHand
                             * @since 1.5.0, renamed from {@code interact} in 1.6.0
                             */
                            interactEntity(entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>, offHand: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @param entity
                             * @param offHand
                             * @param await
                             * @since 1.6.0
                             * @throws InterruptedException
                             */
                            interactEntity(entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>, offHand: boolean, await: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @param offHand
                             * @since 1.5.0, renamed from {@code interact} in 1.6.0
                             */
                            interactItem(offHand: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @since 1.6.0
                             * @param offHand
                             * @param await
                             */
                            interactItem(offHand: boolean, await: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @param x
                             * @param y
                             * @param z
                             * @param direction 0-5 in order: [DOWN, UP, NORTH, SOUTH, WEST, EAST];
                             * @param offHand
                             * @since 1.5.0, renamed from {@code interact} in 1.6.0
                             */
                            interactBlock(x: number, y: number, z: number, direction: number, offHand: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            interactBlock(x: number, y: number, z: number, direction: number, offHand: boolean, await: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @since 1.5.0
                             */
                            interact(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @since 1.6.0
                             * @param await
                             */
                            interact(await: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @since 1.5.0
                             */
                            attack(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @since 1.6.0
                             * @param await
                             */
                            attack(await: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @param stop
                             * @since 1.6.3
                             * @return 
                             */
                            setLongAttack(stop: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @param stop
                             * @since 1.6.3
                             * @return 
                             */
                            setLongInteract(stop: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return 
                             */
                            getItemCooldownsRemainingTicks(): _javatypes.java.util.Map<string, number>;
                            
                            /**
                             * 
                             * @param item
                             * @since 1.6.5
                             * @return 
                             */
                            getItemCooldownRemainingTicks(item: string): number;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return 
                             */
                            getTicksSinceCooldownsStart(): _javatypes.java.util.Map<string, number>;
                            
                            /**
                             * 
                             * @param item
                             * @since 1.6.5
                             * @return 
                             */
                            getTicksSinceCooldownStart(item: string): number;
                            
                            /**
                             * 
                             * @return 
                             * @since 1.1.2
                             */
                            getFoodLevel(): number;
                            toString(): string;
                            
                        }
                        namespace ClientPlayerEntityHelper {
                            interface static {
                                new <T>(e: T): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<T>;
                                
                                
                                
                            }
                        }
                        interface PlayerEntityHelper<T> extends _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.LivingEntityHelper<T> {
                            
                            
                            /**
                             * 
                             * @since 1.0.3
                             * @see xyz.wagyourtail.jsmacros.client.api.helpers.PlayerAbilitiesHelper
                             * @return 
                             */
                            getAbilities(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerAbilitiesHelper;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            getMainHand(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            getOffHand(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            getHeadArmor(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            getChestArmor(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            getLegArmor(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            getFootArmor(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.2.5 [citation needed]
                             * @return 
                             */
                            getXP(): number;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return 
                             */
                            getXPLevel(): number;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return 
                             */
                            getXPProgress(): number;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return 
                             */
                            getXPToLevelUp(): number;
                            
                            /**
                             * 
                             * @since 1.2.5 [citation needed]
                             * @return 
                             */
                            isSleeping(): boolean;
                            
                            /**
                             * 
                             * @since 1.2.5 [citation needed]
                             * @return if the player has slept the minimum ammount of time to pass the night.
                             */
                            isSleepingLongEnough(): boolean;
                            toString(): string;
                            
                        }
                        namespace PlayerEntityHelper {
                            interface static {
                                new <T>(e: T): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerEntityHelper<T>;
                                
                                
                                
                            }
                        }
                        interface BlockHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @return the default state of the block.
                             * @since 1.6.5
                             */
                            getDefaultState(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockStateHelper;
                            
                            /**
                             * 
                             * @return the default item stack of the block.
                             * @since 1.6.5
                             */
                            getDefaultItemStack(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            canMobSpawnInside(): boolean;
                            
                            /**
                             * 
                             * @return {@code true} if the block has dynamic bounds.
                             * @since 1.6.5
                             */
                            hasDynamicBounds(): boolean;
                            
                            /**
                             * 
                             * @return the blast resistance.
                             * @since 1.6.5
                             */
                            getBlastResistance(): number;
                            
                            /**
                             * 
                             * @return the jump velocity multiplier.
                             * @since 1.6.5
                             */
                            getJumpVelocityMultiplier(): number;
                            
                            /**
                             * 
                             * @return the slipperiness.
                             * @since 1.6.5
                             */
                            getSlipperiness(): number;
                            
                            /**
                             * 
                             * @return the hardness.
                             * @since 1.6.5
                             */
                            getHardness(): number;
                            
                            /**
                             * 
                             * @return the velocity multiplier.
                             * @since 1.6.5
                             */
                            getVelocityMultiplier(): number;
                            
                            /**
                             * 
                             * @return all tags of the block as an {@link java.util.ArrayList ArrayList}.
                             * @since 1.6.5
                             */
                            getTags(): _javatypes.java.util.List<string>;
                            
                            /**
                             * 
                             * @return all possible block states of the block.
                             * @since 1.6.5
                             */
                            getStates(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockStateHelper>;
                            
                            /**
                             * 
                             * @return the identifier of the block.
                             * @since 1.6.5
                             */
                            getId(): string;
                            toString(): string;
                            
                        }
                        namespace BlockHelper {
                            interface static {
                                new (base: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockHelper;
                                
                                
                                
                            }
                        }
                        interface BlockDataHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @return the {@code x} value of the block.
                             */
                            getX(): number;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @return the {@code y} value of the block.
                             */
                            getY(): number;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @return the {@code z} value of the block.
                             */
                            getZ(): number;
                            
                            /**
                             * 
                             * @return the item ID of the block.
                             */
                            getId(): string;
                            
                            /**
                             * 
                             * @return the translated name of the block. (was string before 1.6.5)
                             */
                            getName(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                            /**
                             * 
                             * @return 
                             * @since 1.5.1, used to be a {@link Map}&lt;{@link String}, {@link String}&gt;
                             */
                            getNBT(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper<any>;
                            
                            /**
                             * 
                             * @return 
                             * @since 1.6.5
                             */
                            getBlockStateHelper(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockStateHelper;
                            
                            /**
                             * 
                             * @return 
                             * @since 1.6.5
                             */
                            getBlockHelper(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockHelper;
                            
                            /**
                             * 
                             * @since 1.1.7
                             * @return block state data as a {@link Map}.
                             */
                            getBlockState(): _javatypes.java.util.Map<string, string>;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return the block pos.
                             */
                            getBlockPos(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            getRawBlock(): /* minecraft classes, as any, because obfuscation: */ any;
                            getRawBlockState(): /* minecraft classes, as any, because obfuscation: */ any;
                            getRawBlockEntity(): /* minecraft classes, as any, because obfuscation: */ any;
                            toString(): string;
                            
                        }
                        namespace BlockDataHelper {
                            interface static {
                                new (b: /* minecraft classes, as any, because obfuscation: */ any, e: /* minecraft classes, as any, because obfuscation: */ any, bp: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper;
                                
                                
                                
                            }
                        }
                        interface ItemStackHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * Sets the item damage value.
                             *  
                             *  You may want to use {@link _javatypes.ItemStackHelper#copy} first.
                             * @since 1.2.0
                             * @param damage
                             * @return 
                             */
                            setDamage(damage: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.2.0
                             * @return 
                             */
                            isDamageable(): boolean;
                            
                            /**
                             * 
                             * @since 1.2.0
                             * @return 
                             */
                            isEnchantable(): boolean;
                            
                            /**
                             * 
                             * @return 
                             */
                            getDamage(): number;
                            
                            /**
                             * 
                             * @return 
                             */
                            getMaxDamage(): number;
                            
                            /**
                             * 
                             * @since 1.2.0
                             * @return was string before 1.6.5
                             */
                            getDefaultName(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                            /**
                             * 
                             * @return was string before 1.6.5
                             */
                            getName(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                            /**
                             * 
                             * @return 
                             */
                            getCount(): number;
                            
                            /**
                             * 
                             * @return 
                             */
                            getMaxCount(): number;
                            
                            /**
                             * 
                             * @since 1.1.6, was a {@link String} until 1.5.1
                             * @return 
                             */
                            getNBT(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper<any>;
                            
                            /**
                             * 
                             * @since 1.1.3
                             * @return 
                             */
                            getCreativeTab(): string;
                            
                            /**
                             * 
                             * @return 
                             */
                            getItemID(): string;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @return 
                             */
                            getItemId(): string;
                            
                            /**
                             * 
                             * @return 
                             */
                            isEmpty(): boolean;
                            toString(): string;
                            
                            /**
                             * 
                             * @since 1.1.3 [citation needed]
                             * @param ish
                             * @return 
                             */
                            equals(ish: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper): boolean;
                            
                            /**
                             * 
                             * @since 1.1.3 [citation needed]
                             * @param is
                             * @return 
                             */
                            equals(is: /* minecraft classes, as any, because obfuscation: */ any): boolean;
                            
                            /**
                             * 
                             * @since 1.1.3 [citation needed]
                             * @param ish
                             * @return 
                             */
                            isItemEqual(ish: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper): boolean;
                            
                            /**
                             * 
                             * @since 1.1.3 [citation needed]
                             * @param is
                             * @return 
                             */
                            isItemEqual(is: /* minecraft classes, as any, because obfuscation: */ any): boolean;
                            
                            /**
                             * 
                             * @since 1.1.3 [citation needed]
                             * @param ish
                             * @return 
                             */
                            isItemEqualIgnoreDamage(ish: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper): boolean;
                            
                            /**
                             * 
                             * @since 1.1.3 [citation needed]
                             * @param is
                             * @return 
                             */
                            isItemEqualIgnoreDamage(is: /* minecraft classes, as any, because obfuscation: */ any): boolean;
                            
                            /**
                             * 
                             * @since 1.1.3 [citation needed]
                             * @param ish
                             * @return 
                             */
                            isNBTEqual(ish: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper): boolean;
                            
                            /**
                             * 
                             * @since 1.1.3 [citation needed]
                             * @param is
                             * @return 
                             */
                            isNBTEqual(is: /* minecraft classes, as any, because obfuscation: */ any): boolean;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return 
                             */
                            isOnCooldown(): boolean;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return 
                             */
                            getCooldownProgress(): number;
                            
                            /**
                             * 
                             * @since 1.2.0
                             * @return 
                             */
                            copy(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                        }
                        namespace ItemStackHelper {
                            interface static {
                                new (i: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                                
                                
                                
                            }
                        }
                        interface ServerInfoHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            getName(): string;
                            getAddress(): string;
                            getPlayerCountLabel(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            getLabel(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            getPing(): number;
                            getProtocolVersion(): number;
                            getVersion(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            getPlayerListSummary(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper>;
                            resourcePackPolicy(): string;
                            getIcon(): string;
                            isOnline(): boolean;
                            isLocal(): boolean;
                            getNbt(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper<any>;
                            toString(): string;
                            
                        }
                        namespace ServerInfoHelper {
                            interface static {
                                new (base: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ServerInfoHelper;
                                
                                
                                
                            }
                        }
                        interface CommandNodeHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper<_javatypes.com.mojang.brigadier.tree.CommandNode<any>> {
                            readonly fabric: _javatypes.com.mojang.brigadier.tree.CommandNode;
                            
                            
                        }
                        namespace CommandNodeHelper {
                            interface static {
                                new (base: _javatypes.com.mojang.brigadier.tree.CommandNode, fabric: _javatypes.com.mojang.brigadier.tree.CommandNode): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandNodeHelper;
                                
                                
                                
                            }
                        }
                        interface BlockPosHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @return the {@code x} value of the block.
                             */
                            getX(): number;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @return the {@code y} value of the block.
                             */
                            getY(): number;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @return the {@code z} value of the block.
                             */
                            getZ(): number;
                            
                            /**
                             * 
                             * @return the block above.
                             * @since 1.6.5
                             */
                            up(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @param distance
                             * @return the block n-th block above.
                             * @since 1.6.5
                             */
                            up(distance: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @return the block below.
                             * @since 1.6.5
                             */
                            down(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @param distance
                             * @return the block n-th block below.
                             * @since 1.6.5
                             */
                            down(distance: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @return the block to the north.
                             * @since 1.6.5
                             */
                            north(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @param distance
                             * @return the n-th block to the north.
                             * @since 1.6.5
                             */
                            north(distance: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @return the block to the south.
                             * @since 1.6.5
                             */
                            south(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @param distance
                             * @return the n-th block to the south.
                             * @since 1.6.5
                             */
                            south(distance: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @return the block to the east.
                             * @since 1.6.5
                             */
                            east(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @param distance
                             * @return the n-th block to the east.
                             * @since 1.6.5
                             */
                            east(distance: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @return the block to the west.
                             * @since 1.6.5
                             */
                            west(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @param distance
                             * @return the n-th block to the west.
                             * @since 1.6.5
                             */
                            west(distance: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @param direction 0-5 in order: [DOWN, UP, NORTH, SOUTH, WEST, EAST];
                             * @return the block offset by the given direction.
                             * @since 1.6.5
                             */
                            offset(direction: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @param direction 0-5 in order: [DOWN, UP, NORTH, SOUTH, WEST, EAST];
                             * @param distance
                             * @return the n-th block offset by the given direction.
                             * @since 1.6.5
                             */
                            offset(direction: string, distance: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            toString(): string;
                            
                        }
                        namespace BlockPosHelper {
                            interface static {
                                new (b: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                                new (x: number, y: number, z: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                                
                                
                                
                            }
                        }
                        interface ScoreboardsHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @param index
                             * @since 1.2.9
                             * @return 
                             */
                            getObjectiveForTeamColorIndex(index: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ScoreboardObjectiveHelper;
                            
                            /**
                             * `0` is tab list, `1` or `3 + getPlayerTeamColorIndex()` is sidebar, `2` should be below name.
                             *  therefore max slot number is 18.
                             * @param slot
                             * @since 1.2.9
                             * @return 
                             */
                            getObjectiveSlot(slot: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ScoreboardObjectiveHelper;
                            
                            /**
                             * 
                             * @param entity
                             * @since 1.2.9
                             * @return 
                             */
                            getPlayerTeamColorIndex(entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerEntityHelper</* minecraft classes, as any, because obfuscation: */ any>): number;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return team index for client player
                             */
                            getPlayerTeamColorIndex(): number;
                            
                            /**
                             * 
                             * @since 1.3.0
                             * @return 
                             */
                            getTeams(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TeamHelper>;
                            
                            /**
                             * 
                             * @param p
                             * @since 1.3.0
                             * @return 
                             */
                            getPlayerTeam(p: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerEntityHelper</* minecraft classes, as any, because obfuscation: */ any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TeamHelper;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return team for client player
                             */
                            getPlayerTeam(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TeamHelper;
                            
                            /**
                             * 
                             * @since 1.2.9
                             * @return the {@link ScoreboardObjectiveHelper} for the currently displayed sidebar scoreboard.
                             */
                            getCurrentScoreboard(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ScoreboardObjectiveHelper;
                            toString(): string;
                            
                        }
                        namespace ScoreboardsHelper {
                            interface static {
                                new (board: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ScoreboardsHelper;
                                
                                
                                
                            }
                        }
                        interface TextHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * replace the text in this class with JSON data.
                             * @since 1.0.8
                             * @param json
                             * @return 
                             */
                            replaceFromJson(json: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                            /**
                             * replace the text in this class with {@link _javatypes.java.lang.String} data.
                             * @since 1.0.8
                             * @param content
                             * @return 
                             */
                            replaceFromString(content: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return JSON data representation.
                             */
                            getJson(): string;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return the text content.
                             */
                            getString(): string;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return the text content. stripped formatting when servers send it the (super) old way due to shitty coders.
                             */
                            getStringStripFormatting(): string;
                            
                            /**
                             * 
                             * @param visitor function with 2 args, no return.
                             * @since 1.6.5
                             */
                            visit(visitor: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.StyleHelper, string, _javatypes.java.lang.Object, any>): void;
                            
                            /**
                             * 
                             * @since 1.0.8
                             * @deprecated confusing name.
                             * @return 
                             */
                            toJson(): string;
                            
                            /**
                             * 
                             * @since 1.0.8, this used to do the same as {@link #getString}
                             * @return String representation of text helper.
                             */
                            toString(): string;
                            
                        }
                        namespace TextHelper {
                            interface static {
                                new (json: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                                new (t: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                                
                                
                                
                            }
                        }
                        interface BossBarHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.2.1
                             * @return boss bar uuid.
                             */
                            getUUID(): string;
                            
                            /**
                             * 
                             * @since 1.2.1
                             * @return percent of boss bar remaining.
                             */
                            getPercent(): number;
                            
                            /**
                             * 
                             * @since 1.2.1
                             * @return boss bar color.
                             */
                            getColor(): string;
                            
                            /**
                             * 
                             * @since 1.2.1
                             * @return boss bar notch style.
                             */
                            getStyle(): string;
                            
                            /**
                             * 
                             * @since 1.2.1
                             * @return name of boss bar
                             */
                            getName(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            toString(): string;
                            
                        }
                        namespace BossBarHelper {
                            interface static {
                                new (b: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BossBarHelper;
                                
                                
                                
                            }
                        }
                        interface EntityHelper<T> extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper<T> {
                            
                            
                            /**
                             * 
                             * @return entity position.
                             */
                            getPos(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                            
                            /**
                             * 
                             * @return entity block position.
                             * @since 1.6.5
                             */
                            getBlockPos(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                            
                            /**
                             * 
                             * @return entity chunk coordinates. Since Pos2D only has x and y fields, z coord is y.
                             * @since 1.6.5
                             */
                            getChunkPos(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D;
                            
                            /**
                             * 
                             * @since 1.0.8
                             * @return the {@code x} value of the entity.
                             */
                            getX(): number;
                            
                            /**
                             * 
                             * @since 1.0.8
                             * @return the {@code y} value of the entity.
                             */
                            getY(): number;
                            
                            /**
                             * 
                             * @since 1.0.8
                             * @return the {@code z} value of the entity.
                             */
                            getZ(): number;
                            
                            /**
                             * 
                             * @since 1.2.8
                             * @return the current eye height offset for the entitye.
                             */
                            getEyeHeight(): number;
                            
                            /**
                             * 
                             * @since 1.0.8
                             * @return the {@code pitch} value of the entity.
                             */
                            getPitch(): number;
                            
                            /**
                             * 
                             * @since 1.0.8
                             * @return the {@code yaw} value of the entity.
                             */
                            getYaw(): number;
                            
                            /**
                             * 
                             * @return the name of the entity.
                             * @since 1.0.8 [citation needed], returned string until 1.6.4
                             */
                            getName(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                            /**
                             * 
                             * @return the type of the entity.
                             */
                            getType(): string;
                            
                            /**
                             * 
                             * @since 1.1.9
                             * @return if the entity has the glowing effect.
                             */
                            isGlowing(): boolean;
                            
                            /**
                             * 
                             * @since 1.1.9
                             * @return if the entity is in lava.
                             */
                            isInLava(): boolean;
                            
                            /**
                             * 
                             * @since 1.1.9
                             * @return if the entity is on fire.
                             */
                            isOnFire(): boolean;
                            
                            /**
                             * 
                             * @since 1.1.8 [citation needed]
                             * @return the vehicle of the entity.
                             */
                            getVehicle(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>;
                            
                            /**
                             * 
                             * @since 1.1.8 [citation needed]
                             * @return the entity passengers.
                             */
                            getPassengers(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>>;
                            
                            /**
                             * 
                             * @since 1.2.8, was a {@link String} until 1.5.0
                             * @return 
                             */
                            getNBT(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper<any>;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param name
                             */
                            setCustomName(name: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper): void;
                            
                            /**
                             * sets the name to always display
                             * @since 1.8.0
                             * @param b
                             */
                            setCustomNameVisible(b: boolean): void;
                            
                            /**
                             * 
                             * @param color
                             */
                            setGlowingColor(color: number): void;
                            
                            /**
                             * 
                             */
                            resetGlowingColor(): void;
                            
                            /**
                             * Sets whether the entity is glowing.
                             * @since 1.1.9
                             * @param val
                             * @return 
                             */
                            setGlowing(val: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<T>;
                            
                            /**
                             * reset the glowing effect to proper value.
                             * @since 1.6.3
                             * @return 
                             */
                            resetGlowing(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<T>;
                            
                            /**
                             * Checks if the entity is still alive.
                             * @since 1.2.8
                             * @return 
                             */
                            isAlive(): boolean;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return UUID of the entity, random* if not a player, otherwise the player's uuid.
                             */
                            getUUID(): string;
                            toString(): string;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @return cast of this entity helper (mainly for typescript)
                             */
                            asClientPlayer(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper<any>;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @return cast of this entity helper (mainly for typescript)
                             */
                            asPlayer(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerEntityHelper<any>;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @return cast of this entity helper (mainly for typescript)
                             */
                            asVillager(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.VillagerEntityHelper;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @return cast of this entity helper (mainly for typescript)
                             */
                            asMerchant(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.MerchantEntityHelper<any>;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @return cast of this entity helper (mainly for typescript)
                             */
                            asLiving(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.LivingEntityHelper<any>;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @return cast of this entity helper (mainly for typescript)
                             */
                            asItem(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemEntityHelper;
                            
                        }
                        namespace EntityHelper {
                            interface static {
                                
                                
                                
                                /**
                                 * mostly for internal use.
                                 * @param e mc entity.
                                 * @return correct subclass of this.
                                 */
                                create(e: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<any>;
                                
                            }
                        }
                        interface BlockStateHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @return a map of the state properties with its identifier and value.
                             * @since 1.6.5
                             */
                            toMap(): _javatypes.java.util.Map<string, string>;
                            
                            /**
                             * 
                             * @return the block the state belongs to.
                             * @since 1.6.5
                             */
                            getBlock(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockHelper;
                            
                            /**
                             * 
                             * @return the hardness.
                             * @since 1.6.5
                             */
                            getHardness(): number;
                            
                            /**
                             * 
                             * @return the luminance.
                             * @since 1.6.5
                             */
                            getLuminance(): number;
                            
                            /**
                             * 
                             * @return {@code true} if the state emits redstone power.
                             * @since 1.6.5
                             */
                            emitsRedstonePower(): boolean;
                            
                            /**
                             * 
                             * @return {@code true} if the shape of the state is a cube.
                             * @since 1.6.5
                             */
                            exceedsCube(): boolean;
                            
                            /**
                             * 
                             * @return {@code true} if the state is air.
                             * @since 1.6.5
                             */
                            isAir(): boolean;
                            
                            /**
                             * 
                             * @return {@code true} if the state is opaque.
                             * @since 1.6.5
                             */
                            isOpaque(): boolean;
                            
                            /**
                             * 
                             * @return {@code true} if a tool is required to mine the block.
                             * @since 1.6.5
                             */
                            isToolRequired(): boolean;
                            
                            /**
                             * 
                             * @return {@code true} if the state has a block entity.
                             * @since 1.6.5
                             */
                            hasBlockEntity(): boolean;
                            
                            /**
                             * 
                             * @return {@code true} if the state can be random ticked.
                             * @since 1.6.5
                             */
                            hasRandomTicks(): boolean;
                            
                            /**
                             * 
                             * @return {@code true} if the state has a comparator output.
                             * @since 1.6.5
                             */
                            hasComparatorOutput(): boolean;
                            
                            /**
                             * 
                             * @return the piston behaviour of the state.
                             * @since 1.6.5
                             */
                            getPistonBehaviour(): string;
                            
                            /**
                             * 
                             * @return {@code true} if the state blocks light.
                             * @since 1.6.5
                             */
                            blocksLight(): boolean;
                            
                            /**
                             * 
                             * @return {@code true} if the state blocks the movement of entities.
                             * @since 1.6.5
                             */
                            blocksMovement(): boolean;
                            
                            /**
                             * 
                             * @return {@code true} if the state is burnable.
                             * @since 1.6.5
                             */
                            isBurnable(): boolean;
                            
                            /**
                             * 
                             * @return {@code true} if the state is a liquid.
                             * @since 1.6.5* @since 1.6.5
                             */
                            isLiquid(): boolean;
                            
                            /**
                             * 
                             * @return {@code true} if the state is solid.
                             * @since 1.6.5* @since 1.6.5
                             */
                            isSolid(): boolean;
                            
                            /**
                             * This will return true for blocks like air and grass, that can be replaced
                             *  without breaking them first.
                             * @return {@code true} if the state can be replaced.
                             * @since 1.6.5
                             */
                            isReplaceable(): boolean;
                            
                            /**
                             * 
                             * @param pos
                             * @param entity
                             * @return {@code true} if the entity can spawn on this block state at the given position in the current world.
                             * @since 1.6.5
                             */
                            allowsSpawning(pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper, entity: string): boolean;
                            
                            /**
                             * 
                             * @param pos
                             * @return {@code true} if an entity can suffocate in this block state at the given position in the current world.
                             * @since 1.6.5
                             */
                            shouldSuffocate(pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper): boolean;
                            toString(): string;
                            
                        }
                        namespace BlockStateHelper {
                            interface static {
                                new (base: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockStateHelper;
                                
                                
                                
                            }
                        }
                        export interface CommandContextHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper<_javatypes.com.mojang.brigadier.context.CommandContext<any>>, Events.BaseEvent {
                            
                            
                            /**
                             * 
                             * @param name
                             * @return 
                             * @since 1.4.2
                             * @throws CommandSyntaxException
                             */
                            getArg(name: string): _javatypes.java.lang.Object;
                            getChild(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandContextHelper;
                            getRange(): _javatypes.com.mojang.brigadier.context.StringRange;
                            getInput(): string;
                            
                        }
                        namespace CommandContextHelper {
                            interface static {
                                new (base: _javatypes.com.mojang.brigadier.context.CommandContext<any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandContextHelper;
                                
                                
                                
                            }
                        }
                        interface StyleHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            hasColor(): boolean;
                            getColor(): number;
                            hasCustomColor(): boolean;
                            getCustomColor(): number;
                            bold(): boolean;
                            italic(): boolean;
                            underlined(): boolean;
                            strikethrough(): boolean;
                            obfuscated(): boolean;
                            getClickAction(): string;
                            getClickValue(): string;
                            getCustomClickValue(): _javatypes.java.lang.Runnable;
                            getHoverAction(): string;
                            getHoverValue(): _javatypes.java.lang.Object;
                            getInsertion(): string;
                            toString(): string;
                            
                        }
                        namespace StyleHelper {
                            interface static {
                                new (base: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.StyleHelper;
                                
                                
                                
                            }
                        }
                        interface LivingEntityHelper<T> extends _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper<T> {
                            
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return entity status effects.
                             */
                            getStatusEffects(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.StatusEffectHelper>;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @see xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper
                             * @return the item in the entity's main hand.
                             */
                            getMainHand(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return the item in the entity's off hand.
                             */
                            getOffHand(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return the item in the entity's head armor slot.
                             */
                            getHeadArmor(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return the item in the entity's chest armor slot.
                             */
                            getChestArmor(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return the item in the entity's leg armor slot.
                             */
                            getLegArmor(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return the item in the entity's foot armor slot.
                             */
                            getFootArmor(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.3.1
                             * @return entity's health
                             */
                            getHealth(): number;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return entity's max health
                             */
                            getMaxHealth(): number;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return if the entity is in a bed.
                             */
                            isSleeping(): boolean;
                            
                            /**
                             * 
                             * @since 1.5.0
                             * @return if the entity has elytra deployed
                             */
                            isFallFlying(): boolean;
                            
                        }
                        namespace LivingEntityHelper {
                            interface static {
                                new <T>(e: T): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.LivingEntityHelper<T>;
                                
                                
                                
                            }
                        }
                        interface ItemEntityHelper extends _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            getContainedItemStack(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            toString(): string;
                            
                        }
                        namespace ItemEntityHelper {
                            interface static {
                                new (e: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemEntityHelper;
                                
                                
                                
                            }
                        }
                        interface ScoreboardObjectiveHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @return player name to score map
                             */
                            getPlayerScores(): _javatypes.java.util.Map<string, number>;
                            
                            /**
                             * 
                             * @since 1.8.0
                             * @return 
                             */
                            scoreToDisplayName(): _javatypes.java.util.Map<number, _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper>;
                            
                            /**
                             * 
                             * @since 1.7.0
                             * @return 
                             */
                            getKnownPlayers(): _javatypes.java.util.List<string>;
                            
                            /**
                             * 
                             * @since 1.8.0
                             * @return 
                             */
                            getKnownPlayersDisplayNames(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper>;
                            
                            /**
                             * 
                             * @return name of scoreboard
                             * @since 1.2.9
                             */
                            getName(): string;
                            
                            /**
                             * 
                             * @return name of scoreboard
                             * @since 1.2.9
                             */
                            getDisplayName(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                        }
                        namespace ScoreboardObjectiveHelper {
                            interface static {
                                new (o: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ScoreboardObjectiveHelper;
                                
                                
                                
                            }
                        }
                        interface VillagerEntityHelper extends _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.MerchantEntityHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @return 
                             */
                            getProfession(): string;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @return 
                             */
                            getStyle(): string;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @return 
                             */
                            getLevel(): number;
                            toString(): string;
                            
                        }
                        namespace VillagerEntityHelper {
                            interface static {
                                new (e: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.VillagerEntityHelper;
                                
                                
                                
                            }
                        }
                        interface MerchantEntityHelper<T> extends _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.LivingEntityHelper<T> {
                            
                            
                            /**
                             * these might not work... depends on the data the server sends, maybe just singleplayer.
                             * @return 
                             */
                            getTrades(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TradeOfferHelper>;
                            refreshTrades(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TradeOfferHelper>;
                            
                            /**
                             * 
                             * @return 
                             */
                            getExperience(): number;
                            
                            /**
                             * 
                             * @return 
                             */
                            hasCustomer(): boolean;
                            toString(): string;
                            
                        }
                        namespace MerchantEntityHelper {
                            interface static {
                                new <T>(e: T): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.MerchantEntityHelper<T>;
                                
                                
                                
                            }
                        }
                        interface PlayerAbilitiesHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.0.3
                             * @return whether the player can be damaged.
                             */
                            getInvulnerable(): boolean;
                            
                            /**
                             * 
                             * @since 1.0.3
                             * @return if the player is currently flying.
                             */
                            getFlying(): boolean;
                            
                            /**
                             * 
                             * @since 1.0.3
                             * @return if the player is allowed to fly.
                             */
                            getAllowFlying(): boolean;
                            
                            /**
                             * 
                             * @since 1.0.3
                             * @return if the player is in creative.
                             */
                            getCreativeMode(): boolean;
                            
                            /**
                             * set the player flying state.
                             * @since 1.0.3
                             * @param b
                             * @return 
                             */
                            setFlying(b: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerAbilitiesHelper;
                            
                            /**
                             * set the player allow flying state.
                             * @since 1.0.3
                             * @param b
                             * @return 
                             */
                            setAllowFlying(b: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerAbilitiesHelper;
                            
                            /**
                             * 
                             * @since 1.0.3
                             * @return the player fly speed multiplier.
                             */
                            getFlySpeed(): number;
                            
                            /**
                             * set the player fly speed multiplier.
                             * @since 1.0.3
                             * @param flySpeed
                             * @return 
                             */
                            setFlySpeed(flySpeed: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerAbilitiesHelper;
                            
                        }
                        namespace PlayerAbilitiesHelper {
                            interface static {
                                new (a: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerAbilitiesHelper;
                                
                                
                                
                            }
                        }
                        interface NBTElementHelper<T> extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper<T> {
                            
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            getType(): number;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            isNull(): boolean;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            isNumber(): boolean;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            isString(): boolean;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            isList(): boolean;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            isCompound(): boolean;
                            
                            /**
                             * if element is a string, returns value.
                             *  otherwise returns toString representation.
                             * @since 1.5.1
                             */
                            asString(): string;
                            
                            /**
                             * check with {@link #isNumber} first
                             * @since 1.5.1
                             */
                            asNumberHelper(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper$NBTNumberHelper;
                            
                            /**
                             * check with {@link #isList} first
                             * @since 1.5.1
                             */
                            asListHelper(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper$NBTListHelper;
                            
                            /**
                             * check with {@link #isCompound} first
                             * @since 1.5.1
                             */
                            asCompoundHelper(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper$NBTCompoundHelper;
                            toString(): string;
                            
                        }
                        namespace NBTElementHelper {
                            interface static {
                                
                                
                                
                                /**
                                 * 
                                 * @since 1.5.1
                                 */
                                resolve(element: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper<any>;
                                
                            }
                        }
                        interface TeamHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.3.0
                             * @return 
                             */
                            getName(): string;
                            
                            /**
                             * 
                             * @since 1.3.0
                             * @return 
                             */
                            getDisplayName(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                            /**
                             * 
                             * @since 1.3.0
                             * @return 
                             */
                            getPlayerList(): _javatypes.java.util.List<string>;
                            
                            /**
                             * 
                             * @since 1.3.0
                             * @return 
                             */
                            getColor(): number;
                            
                            /**
                             * 
                             * @since 1.3.0
                             * @return 
                             */
                            getPrefix(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                            /**
                             * 
                             * @since 1.3.0
                             * @return 
                             */
                            getSuffix(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                            /**
                             * 
                             * @since 1.3.0
                             * @return 
                             */
                            getCollisionRule(): string;
                            
                            /**
                             * 
                             * @since 1.3.0
                             * @return 
                             */
                            isFriendlyFire(): boolean;
                            
                            /**
                             * 
                             * @since 1.3.0
                             * @return 
                             */
                            showFriendlyInvisibles(): boolean;
                            
                            /**
                             * 
                             * @since 1.3.0
                             * @return 
                             */
                            nametagVisibility(): string;
                            
                            /**
                             * 
                             * @since 1.3.0
                             * @return 
                             */
                            deathMessageVisibility(): string;
                            toString(): string;
                            
                        }
                        namespace TeamHelper {
                            interface static {
                                new (t: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TeamHelper;
                                
                                
                                
                            }
                        }
                        interface NBTElementHelper$NBTCompoundHelper extends _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.6.0
                             * @return 
                             */
                            getKeys(): _javatypes.java.util.Set<string>;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            getType(key: string): number;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            has(key: string): boolean;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            get(key: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper<any>;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            asString(key: string): string;
                            
                        }
                        namespace NBTElementHelper$NBTCompoundHelper {
                            interface static {
                                
                                
                                
                            }
                        }
                        interface StatusEffectHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.2.4
                             * @return 
                             */
                            getId(): string;
                            
                            /**
                             * 
                             * @since 1.2.4
                             * @return 
                             */
                            getStrength(): number;
                            
                            /**
                             * 
                             * @since 1.2.4
                             * @return 
                             */
                            getTime(): number;
                            
                        }
                        namespace StatusEffectHelper {
                            interface static {
                                new (s: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.StatusEffectHelper;
                                
                                
                                
                            }
                        }
                        interface NBTElementHelper$NBTListHelper extends _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.5.1
                             * @return 
                             */
                            length(): number;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            get(index: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper<any>;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            getHeldType(): number;
                            
                        }
                        namespace NBTElementHelper$NBTListHelper {
                            interface static {
                                
                                
                                
                            }
                        }
                        interface TradeOfferHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @return list of input items required
                             */
                            getInput(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper>;
                            
                            /**
                             * 
                             * @return output item that will be recieved
                             */
                            getOutput(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * select trade offer on screen
                             */
                            select(): void;
                            
                            /**
                             * 
                             * @return 
                             */
                            isAvailable(): boolean;
                            
                            /**
                             * 
                             * @return trade offer as nbt tag
                             */
                            getNBT(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper<any>;
                            
                            /**
                             * 
                             * @return current number of uses
                             */
                            getUses(): number;
                            
                            /**
                             * 
                             * @return max uses before it locks
                             */
                            getMaxUses(): number;
                            
                            /**
                             * 
                             * @return experience gained for trade
                             */
                            getExperience(): number;
                            
                            /**
                             * 
                             * @return current price adjustment, negative is discount.
                             */
                            getCurrentPriceAdjustment(): number;
                            toString(): string;
                            
                        }
                        namespace TradeOfferHelper {
                            interface static {
                                new (base: /* minecraft classes, as any, because obfuscation: */ any, index: number, inv: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.VillagerInventory): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TradeOfferHelper;
                                
                                
                                
                            }
                        }
                        interface NBTElementHelper$NBTNumberHelper extends _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            asLong(): number;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            asInt(): number;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            asShort(): number;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            asByte(): number;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            asFloat(): number;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            asDouble(): number;
                            
                            /**
                             * 
                             * @since 1.5.1
                             */
                            asNumber(): _javatypes.java.lang.Number;
                            
                        }
                        namespace NBTElementHelper$NBTNumberHelper {
                            interface static {
                                
                                
                                
                            }
                        }
                        interface ButtonWidgetHelper<T> extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper<T>, _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement {
                            zIndex: number;
                            
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @return the {@code x} coordinate of the button.
                             */
                            getX(): number;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @return the {@code y} coordinate of the button.
                             */
                            getY(): number;
                            
                            /**
                             * Set the button position.
                             * @since 1.0.5
                             * @param x
                             * @param y
                             * @return 
                             */
                            setPos(x: number, y: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<T>;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @return 
                             */
                            getWidth(): number;
                            
                            /**
                             * change the text.
                             * @since 1.0.5, renamed from {@code setText} in 1.3.1
                             * @deprecated only deprecated in buttonWidgetHelper for confusing name.
                             * @param label
                             * @return 
                             */
                            setLabel(label: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<T>;
                            
                            /**
                             * change the text.
                             * @since 1.3.1
                             * @param helper
                             * @return 
                             */
                            setLabel(helper: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<T>;
                            
                            /**
                             * 
                             * @since 1.2.3, renamed fro {@code getText} in 1.3.1
                             * @return current button text.
                             */
                            getLabel(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @return button clickable state.
                             */
                            getActive(): boolean;
                            
                            /**
                             * set the button clickable state.
                             * @since 1.0.5
                             * @param t
                             * @return 
                             */
                            setActive(t: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<T>;
                            
                            /**
                             * set the button width.
                             * @since 1.0.5
                             * @param width
                             * @return 
                             */
                            setWidth(width: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<T>;
                            
                            /**
                             * clicks button
                             * @since 1.3.1
                             */
                            click(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<T>;
                            
                            /**
                             * clicks button
                             * @param await should wait for button to finish clicking.
                             * @since 1.3.1
                             */
                            click(await: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<T>;
                            render(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                            getZIndex(): number;
                            
                        }
                        namespace ButtonWidgetHelper {
                            interface static {
                                new <T>(btn: T): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<T>;
                                new <T>(btn: T, zIndex: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<T>;
                                
                                
                                
                            }
                        }
                        interface SuggestionsBuilderHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper<_javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder> {
                            
                            getInput(): string;
                            getStart(): number;
                            getRemaining(): string;
                            getRemainingLowerCase(): string;
                            suggest(suggestion: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.SuggestionsBuilderHelper;
                            suggest(value: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.SuggestionsBuilderHelper;
                            suggestWithTooltip(suggestion: string, tooltip: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.SuggestionsBuilderHelper;
                            suggestWithTooltip(value: number, tooltip: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.SuggestionsBuilderHelper;
                            
                        }
                        namespace SuggestionsBuilderHelper {
                            interface static {
                                new (base: _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.SuggestionsBuilderHelper;
                                
                                
                                
                            }
                        }
                        interface TextFieldWidgetHelper extends _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @return the currently entered {@link java.lang.String String}.
                             */
                            getText(): string;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param text
                             * @return 
                             */
                            setText(text: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper;
                            
                            /**
                             * set the currently entered {@link _javatypes.java.lang.String}.
                             * @param text
                             * @param await
                             * @return 
                             * @since 1.3.1
                             * @throws InterruptedException
                             */
                            setText(text: string, await: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param color
                             * @return 
                             */
                            setEditableColor(color: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param edit
                             * @return 
                             */
                            setEditable(edit: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param color
                             * @return 
                             */
                            setUneditableColor(color: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper;
                            
                        }
                        namespace TextFieldWidgetHelper {
                            interface static {
                                new (t: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper;
                                new (t: /* minecraft classes, as any, because obfuscation: */ any, zIndex: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper;
                                
                                
                                
                            }
                        }
                        interface RecipeHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * 
                             * @since 1.3.1
                             * @return 
                             */
                            getId(): string;
                            
                            /**
                             * 
                             * @since 1.3.1
                             * @return 
                             */
                            getOutput(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @since 1.3.1
                             * @param craftAll
                             */
                            craft(craftAll: boolean): void;
                            toString(): string;
                            
                        }
                        namespace RecipeHelper {
                            interface static {
                                new (base: /* minecraft classes, as any, because obfuscation: */ any, syncId: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.RecipeHelper;
                                
                                
                                
                            }
                        }
                        interface ChatHudLineHelper extends _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            getText(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            getId(): number;
                            getCreationTick(): number;
                            deleteById(): void;
                            
                        }
                        namespace ChatHudLineHelper {
                            interface static {
                                new (base: /* minecraft classes, as any, because obfuscation: */ any, hud: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ChatHudLineHelper;
                                
                                
                                
                            }
                        }
                    }
                
                    namespace classes {
                    
                        interface VillagerInventory extends _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory</* minecraft classes, as any, because obfuscation: */ any> {
                            
                            
                            /**
                             * select the trade by it's index
                             * @param index
                             * @return self for chaining
                             * @since 1.3.1
                             */
                            selectTrade(index: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.VillagerInventory;
                            
                            /**
                             * 
                             * @return 
                             * @since 1.3.1
                             */
                            getExperience(): number;
                            
                            /**
                             * 
                             * @return 
                             * @since 1.3.1
                             */
                            getLevelProgress(): number;
                            
                            /**
                             * 
                             * @return 
                             * @since 1.3.1
                             */
                            getMerchantRewardedExperience(): number;
                            
                            /**
                             * 
                             * @return 
                             * @since 1.3.1
                             */
                            canRefreshTrades(): boolean;
                            
                            /**
                             * 
                             * @return 
                             * @since 1.3.1
                             */
                            isLeveled(): boolean;
                            
                            /**
                             * 
                             * @return list of trade offers
                             * @since 1.3.1
                             */
                            getTrades(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TradeOfferHelper>;
                            
                        }
                        namespace VillagerInventory {
                            interface static {
                                
                                
                                
                            }
                        }
                        interface ScriptScreen extends _javatypes.xyz.wagyourtail.wagyourgui.BaseScreen {
                            
                            
                            /**
                             * 
                             * @param parent parent screen to go to when this one exits.
                             * @since 1.4.0
                             */
                            setParent(parent: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen): void;
                            
                            /**
                             * add custom stuff to the render function on the main thread.
                             * @param onRender pos3d elements are mousex, mousey, tickDelta
                             * @since 1.4.0
                             */
                            setOnRender(onRender: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D, /* minecraft classes, as any, because obfuscation: */ any, _javatypes.java.lang.Object, any>): void;
                            render(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                            close(): void;
                            
                        }
                        namespace ScriptScreen {
                            interface static {
                                new (title: string, dirt: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.ScriptScreen;
                                
                                
                                
                            }
                        }
                        interface TextBuilder extends _javatypes.java.lang.Object {
                            
                            
                            /**
                             * move on to next section and set it's text.
                             * @param text a {@link String}, {@link TextHelper} or {@link TextBuilder}
                             * @since 1.3.0
                             * @return 
                             */
                            append(text: _javatypes.java.lang.Object): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder;
                            
                            /**
                             * set current section's color by color code as hex, like `0x6` for gold
                             *  and `0xc` for red.
                             * @param color
                             * @since 1.3.0
                             * @return 
                             */
                            withColor(color: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder;
                            
                            /**
                             * Add text with custom colors.
                             * @since 1.3.1
                             * @param r red {@code 0-255}
                             * @param g green {@code 0-255}
                             * @param b blue {@code 0-255}
                             * @return 
                             */
                            withColor(r: number, g: number, b: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder;
                            
                            /**
                             * set other formatting options for the current section
                             * @param underline
                             * @param bold
                             * @param italic
                             * @param strikethrough
                             * @param magic
                             * @since 1.3.0
                             * @return 
                             */
                            withFormatting(underline: boolean, bold: boolean, italic: boolean, strikethrough: boolean, magic: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder;
                            
                            /**
                             * set current section's hover event to show text
                             * @param text
                             * @since 1.3.0
                             * @return 
                             */
                            withShowTextHover(text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder;
                            
                            /**
                             * set current section's hover event to show an item
                             * @param item
                             * @since 1.3.0
                             * @return 
                             */
                            withShowItemHover(item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder;
                            
                            /**
                             * set current section's hover event to show an entity
                             * @param entity
                             * @since 1.3.0
                             * @return 
                             */
                            withShowEntityHover(entity: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper</* minecraft classes, as any, because obfuscation: */ any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder;
                            
                            /**
                             * custom click event.
                             * @param action
                             * @since 1.3.0
                             * @return 
                             */
                            withCustomClickEvent(action: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.java.lang.Object, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder;
                            
                            /**
                             * normal click events like: `open_url`, `open_file`, `run_command`, `suggest_command`, `change_page`, and `copy_to_clipboard`
                             * @param action
                             * @param value
                             * @since 1.3.0
                             * @return 
                             */
                            withClickEvent(action: string, value: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder;
                            
                            /**
                             * Build to a {@link _javatypes.TextHelper}
                             * @since 1.3.0
                             * @return 
                             */
                            build(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                        }
                        namespace TextBuilder {
                            interface static {
                                new (): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder;
                                
                                
                                
                            }
                        }
                        interface CommandManager extends _javatypes.java.lang.Object {
                            
                            
                            /**
                             * 
                             * @since 1.7.0
                             * @return list of commands
                             */
                            getValidCommands(): _javatypes.java.util.List<string>;
                            
                            /**
                             * 
                             * @param name
                             * @since 1.7.0
                             * @return 
                             */
                            createCommandBuilder(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            
                            /**
                             * 
                             * @param command
                             * @return 
                             * @since 1.7.0
                             * @throws IllegalAccessException
                             */
                            unregisterCommand(command: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandNodeHelper;
                            
                            /**
                             * warning: this method is hacky
                             * @since 1.7.0
                             * @param node
                             */
                            reRegisterCommand(node: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandNodeHelper): void;
                            
                        }
                        namespace CommandManager {
                            interface static {
                                new (): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandManager;
                                
                                instance: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandManager;
                                
                                
                            }
                        }
                        interface WorldScannerBuilder extends _javatypes.java.lang.Object {
                            
                            withStateFilter(method: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            andStateFilter(method: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            orStateFilter(method: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            notStateFilter(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            withBlockFilter(method: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            andBlockFilter(method: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            orBlockFilter(method: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            notBlockFilter(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            withStringBlockFilter(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            andStringBlockFilter(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            orStringBlockFilter(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            withStringStateFilter(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            andStringStateFilter(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            orStringStateFilter(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            is(args: _javatypes.java.lang.Object[]): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            is(methodArgs: _javatypes.java.lang.Object[], filterArgs: _javatypes.java.lang.Object[]): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            test(args: _javatypes.java.lang.Object[]): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            test(methodArgs: _javatypes.java.lang.Object[], filterArgs: _javatypes.java.lang.Object[]): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            equals(args: string[]): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            contains(args: string[]): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            startsWith(args: string[]): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            endsWith(args: string[]): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            matches(args: string[]): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                            build(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScanner;
                            
                        }
                        namespace WorldScannerBuilder {
                            interface static {
                                new (): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder;
                                
                                
                                
                            }
                        }
                        interface PlayerInput extends _javatypes.java.lang.Object {
                            movementForward: number;
                            movementSideways: number;
                            yaw: number;
                            pitch: number;
                            jumping: boolean;
                            sneaking: boolean;
                            sprinting: boolean;
                            
                            
                            /**
                             * Converts the current object into a string.
                             *  This can be used to convert current inputs created using `Player.getCurrentPlayerInput()`
                             *  to either JSON or CSV.
                             *  <p>
                             *  The output can be converted into a PlayerInput object again by using either
                             *  `fromCsv(String, String)` or `fromJson(String)`.
                             * @param varNames whether to include variable Names(=JSON) or not(=CSV)
                             * @return The {@code PlayerInput} object as a string
                             * @since 1.4.0
                             */
                            toString(varNames: boolean): string;
                            toString(): string;
                            clone(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
                            
                        }
                        namespace PlayerInput {
                            interface static {
                                
                                /**
                                 * Creates a new `PlayerInput` Object with all values set either to 0 or false
                                 * @see #PlayerInput(float, float, float, float, boolean, boolean, boolean)
                                 * @since 1.4.0
                                 */
                                new (): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
                                
                                /**
                                 * Creates a new `PlayerInput` Object with all other values set either to 0 or false
                                 * @param movementForward 1 = forward input (W); 0 = no input; -1 = backward input (S)
                                 * @param movementSideways 1 = left input (A); 0 = no input; -1 = right input (D)
                                 * @param yaw yaw of the player
                                 * @see #PlayerInput(float, float, float, float, boolean, boolean, boolean)
                                 * @since 1.4.0
                                 */
                                new (movementForward: number, movementSideways: number, yaw: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
                                
                                /**
                                 * Creates a new `PlayerInput` Object with all other values set either to 0 or false
                                 * @param movementForward 1 = forward input (W); 0 = no input; -1 = backward input (S)
                                 * @param yaw yaw of the player
                                 * @param jumping jump input
                                 * @param sprinting sprint input
                                 * @see #PlayerInput(float, float, float, float, boolean, boolean, boolean)
                                 * @since 1.4.0
                                 */
                                new (movementForward: number, yaw: number, jumping: boolean, sprinting: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
                                
                                /**
                                 * Creates a new `PlayerInput` Object from a minecraft input with the missing values extra
                                 * @param input Minecraft Input to be converted.
                                 * @param yaw yaw of the player
                                 * @param pitch pitch of the player
                                 * @param sprinting sprint input
                                 * @see #PlayerInput(float, float, float, float, boolean, boolean, boolean)
                                 * @since 1.4.0
                                 */
                                new (input: /* minecraft classes, as any, because obfuscation: */ any, yaw: number, pitch: number, sprinting: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
                                
                                /**
                                 * Creates a new `PlayerInput` Object with all double values converted to floats
                                 * @param movementForward 1 = forward input (W); 0 = no input; -1 = backward input (S)
                                 * @param movementSideways 1 = left input (A); 0 = no input; -1 = right input (D)
                                 * @param yaw yaw of the player
                                 * @param pitch pitch of the player
                                 * @param jumping jump input
                                 * @param sneaking sneak input
                                 * @param sprinting sprint input
                                 * @see #PlayerInput(float, float, float, float, boolean, boolean, boolean)
                                 * @since 1.4.0
                                 */
                                new (movementForward: number, movementSideways: number, yaw: number, pitch: number, jumping: boolean, sneaking: boolean, sprinting: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
                                
                                /**
                                 * Creates a new `PlayerInput` Object
                                 * @param movementForward 1 = forward input (W); 0 = no input; -1 = backward input (S)
                                 * @param movementSideways 1 = left input (A); 0 = no input; -1 = right input (D)
                                 * @param yaw yaw of the player
                                 * @param pitch pitch of the player
                                 * @param jumping jump input
                                 * @param sneaking sneak input
                                 * @param sprinting sprint input
                                 * @since 1.4.0
                                 */
                                new (movementForward: number, movementSideways: number, yaw: number, pitch: number, jumping: boolean, sneaking: boolean, sprinting: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
                                
                                /**
                                 * Creates a clone `PlayerInput` Object
                                 * @param input the {@code PlayerInput} object to be cloned
                                 * @since 1.4.0
                                 */
                                new (input: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
                                
                                
                                
                                /**
                                 * Parses each row of CSV string into a `PlayerInput`.
                                 *  The capitalization of the header matters.<br>
                                 *  About the columns:
                                 *  <ul>
                                 *    <li> `movementForward` and `movementSideways` as a number</li>
                                 *    <li>`yaw` and `pitch` as an absolute number</li>
                                 *    <li>`jumping`, `sneaking` and `sprinting` have to be boolean</li>
                                 *  </ul>
                                 *  <p>
                                 *  The separation must be a "," it's a csv...(but spaces don't matter)<br>
                                 *  Quoted values don't work
                                 * @param csv CSV string to be parsed
                                 * @return {@code List<PlayerInput>} Each row parsed as a {@code PlayerInput}
                                 * @see #PlayerInput(float, float, float, float, boolean, boolean, boolean)
                                 * @since 1.4.0
                                 */
                                fromCsv(csv: string): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput>;
                                
                                /**
                                 * Parses a JSON string into a `PlayerInput` Object<br>
                                 *  Capitalization of the keys matters.
                                 * @param json JSON string to be parsed
                                 * @return The JSON parsed into a {@code PlayerInput}
                                 * @see #fromCsv(String)
                                 * @since 1.4.0
                                 */
                                fromJson(json: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput;
                                
                            }
                        }
                        interface Inventory<T> extends _javatypes.java.lang.Object {
                            
                            
                            /**
                             * 
                             * @param slot
                             * @since 1.5.0
                             * @return 
                             */
                            click(slot: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<T>;
                            
                            /**
                             * Clicks a slot with a mouse button.
                             * @since 1.0.8
                             * @param slot
                             * @param mousebutton
                             * @return 
                             */
                            click(slot: number, mousebutton: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<T>;
                            
                            /**
                             * Does a drag-click with a mouse button. (the slots don't have to be in order or even adjacent, but when vanilla minecraft calls the underlying function they're always sorted...)
                             * @param slots
                             * @param mousebutton
                             * @return 
                             */
                            dragClick(slots: number[], mousebutton: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<T>;
                            
                            /**
                             * 
                             * @since 1.5.0
                             * @param slot
                             */
                            dropSlot(slot: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<T>;
                            
                            /**
                             * 
                             * @since 1.2.5
                             * @return the index of the selected hotbar slot.
                             */
                            getSelectedHotbarSlotIndex(): number;
                            
                            /**
                             * 
                             * @since 1.2.5
                             * @param index
                             */
                            setSelectedHotbarSlotIndex(index: number): void;
                            
                            /**
                             * closes the inventory, (if the inventory/container is visible it will close the gui). also drops any "held on mouse" items.
                             * @return 
                             */
                            closeAndDrop(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<T>;
                            
                            /**
                             * Closes the inventory, and open gui if applicable.
                             */
                            close(): void;
                            
                            /**
                             * simulates a shift-click on a slot.
                             *  It should be safe to chain these without {@link _javatypes.FClient#waitTick} at least for a bunch of the same item.
                             * @param slot
                             * @return 
                             */
                            quick(slot: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<T>;
                            
                            /**
                             * 
                             * @param slot
                             * @since 1.7.0
                             * @return 
                             */
                            quickAll(slot: number): number;
                            
                            /**
                             * quicks all that match the slot
                             * @param slot a slot from the section you want to move items from
                             * @param button
                             * @since 1.7.0
                             * @return number of items that matched
                             */
                            quickAll(slot: number, button: number): number;
                            
                            /**
                             * 
                             * @return the held (by the mouse) item.
                             */
                            getHeld(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @param slot
                             * @return the item in the slot.
                             */
                            getSlot(slot: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            
                            /**
                             * 
                             * @return the size of the container/inventory.
                             */
                            getTotalSlots(): number;
                            
                            /**
                             * Splits the held stack into two slots. can be alternatively done with {@link _javatypes.Inventory#dragClick} if this one has issues on some servers.
                             * @param slot1
                             * @param slot2
                             * @return 
                             * @throws Exception
                             */
                            split(slot1: number, slot2: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<T>;
                            
                            /**
                             * Does that double click thingy to turn a incomplete stack pickup into a complete stack pickup if you have more in your inventory.
                             * @param slot
                             * @return 
                             */
                            grabAll(slot: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<T>;
                            
                            /**
                             * swaps the items in two slots.
                             * @param slot1
                             * @param slot2
                             * @return 
                             */
                            swap(slot1: number, slot2: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<T>;
                            
                            /**
                             * equivelent to hitting the numbers or f for swapping slots to hotbar
                             * @param slot
                             * @param hotbarSlot 0-8 or 40 for offhand
                             * @since 1.6.5 [citation needed]
                             * @return 
                             */
                            swapHotbar(slot: number, hotbarSlot: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<T>;
                            
                            /**
                             * 
                             * @since 1.2.8
                             */
                            openGui(): void;
                            
                            /**
                             * 
                             * @since 1.1.3
                             * @return the id of the slot under the mouse.
                             */
                            getSlotUnderMouse(): number;
                            
                            /**
                             * 
                             * @since 1.1.3
                             * @return the part of the mapping the slot is in.
                             */
                            getType(): string;
                            
                            /**
                             * 
                             * @since 1.1.3
                             * @return the inventory mappings different depending on the type of open container/inventory.
                             */
                            getMap(): _javatypes.java.util.Map<string, number[]>;
                            
                            /**
                             * 
                             * @since 1.1.3
                             * @param slotNum
                             * @return returns the part of the mapping the slot is in.
                             */
                            getLocation(slotNum: number): string;
                            
                            /**
                             * 
                             * @since 1.3.1
                             * @return all craftable recipes
                             */
                            getCraftableRecipes(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.RecipeHelper>;
                            
                            /**
                             * 
                             * @since 1.2.3
                             * @return 
                             */
                            getContainerTitle(): string;
                            getRawContainer(): T;
                            toString(): string;
                            
                            /**
                             * 
                             * @since 1.6.0
                             * @return 
                             */
                            getCurrentSyncId(): number;
                            
                        }
                        namespace Inventory {
                            interface static {
                                
                                
                                create(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<any>;
                                create(s: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory<any>;
                                
                            }
                        }
                        interface ChatHistoryManager extends _javatypes.java.lang.Object {
                            
                            
                            /**
                             * 
                             * @param index
                             * @since 1.6.0
                             * @return 
                             */
                            getRecvLine(index: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ChatHudLineHelper;
                            
                            /**
                             * 
                             * @since 1.6.0
                             * @param index
                             * @param line
                             */
                            insertRecvText(index: number, line: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper): void;
                            
                            /**
                             * you should probably run {@link #refreshVisible} after...
                             * @param index
                             * @param line
                             * @param timeTicks
                             * @since 1.6.0
                             */
                            insertRecvText(index: number, line: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, timeTicks: number): void;
                            
                            /**
                             * 
                             * @param index
                             * @param line
                             * @param timeTicks
                             * @param await
                             * @since 1.6.0
                             * @throws InterruptedException
                             */
                            insertRecvText(index: number, line: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, timeTicks: number, await: boolean): void;
                            
                            /**
                             * 
                             * @since 1.6.0
                             * @param index
                             */
                            removeRecvText(index: number): void;
                            
                            /**
                             * 
                             * @param index
                             * @param await
                             * @since 1.6.0
                             * @throws InterruptedException
                             */
                            removeRecvText(index: number, await: boolean): void;
                            
                            /**
                             * 
                             * @since 1.6.0
                             * @param text
                             */
                            removeRecvTextMatching(text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper): void;
                            
                            /**
                             * 
                             * @param text
                             * @param await
                             * @since 1.6.0
                             * @throws InterruptedException
                             */
                            removeRecvTextMatching(text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, await: boolean): void;
                            
                            /**
                             * 
                             * @since 1.6.0
                             * @param filter
                             */
                            removeRecvTextMatchingFilter(filter: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ChatHudLineHelper, _javatypes.java.lang.Object, boolean, any>): void;
                            
                            /**
                             * 
                             * @param filter
                             * @param await
                             * @since 1.6.0
                             * @throws InterruptedException
                             */
                            removeRecvTextMatchingFilter(filter: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ChatHudLineHelper, _javatypes.java.lang.Object, boolean, any>, await: boolean): void;
                            
                            /**
                             * this will reset the view of visible messages
                             * @since 1.6.0
                             */
                            refreshVisible(): void;
                            
                            /**
                             * 
                             * @param await
                             * @since 1.6.0
                             * @throws InterruptedException
                             */
                            refreshVisible(await: boolean): void;
                            
                            /**
                             * 
                             * @since 1.6.0
                             */
                            clearRecv(): void;
                            
                            /**
                             * 
                             * @param await
                             * @since 1.6.0
                             * @throws InterruptedException
                             */
                            clearRecv(await: boolean): void;
                            
                            /**
                             * 
                             * @since 1.6.0
                             * @return direct reference to sent message history list. modifications will affect the list.
                             */
                            getSent(): _javatypes.java.util.List<string>;
                            
                            /**
                             * 
                             * @since 1.6.0
                             */
                            clearSent(): void;
                            
                            /**
                             * 
                             * @param await
                             * @since 1.6.0
                             * @throws InterruptedException
                             */
                            clearSent(await: boolean): void;
                            
                        }
                        namespace ChatHistoryManager {
                            interface static {
                                new (hud: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.ChatHistoryManager;
                                
                                
                                
                            }
                        }
                        interface Draw2D extends /* supressed minecraft class */ _javatypes.java.lang.Object, _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D> {
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @deprecated please use {@link Draw2D#setOnInit(MethodWrapper)}
                             */
                            onInit: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>;
                            
                            /**
                             * 
                             * @since 1.1.9 [citation needed]
                             * @deprecated please use {@link Draw2D#setOnFailInit(MethodWrapper)}
                             */
                            catchInit: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<string, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>;
                            
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @see IDraw2D#getWidth()
                             */
                            getWidth(): number;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @see IDraw2D#getHeight()
                             */
                            getHeight(): number;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @see IDraw2D#getTexts()
                             */
                            getTexts(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text>;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @see IDraw2D#getRects()
                             */
                            getRects(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect>;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @see IDraw2D#getItems()
                             */
                            getItems(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item>;
                            
                            /**
                             * 
                             * @since 1.2.3
                             * @see IDraw2D#getImages()
                             */
                            getImages(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image>;
                            getElements(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement>;
                            removeElement(e: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D;
                            reAddElement(e: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @see IDraw2D#addText(String, int, int, int, boolean)
                             */
                            addText(text: string, x: number, y: number, color: number, shadow: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            addText(text: string, x: number, y: number, color: number, zIndex: number, shadow: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @see IDraw2D#addText(String, int, int, int, boolean, double, double)
                             */
                            addText(text: string, x: number, y: number, color: number, shadow: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            addText(text: string, x: number, y: number, color: number, zIndex: number, shadow: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            addText(text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, x: number, y: number, color: number, shadow: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            addText(text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, x: number, y: number, color: number, zIndex: number, shadow: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            addText(text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, x: number, y: number, color: number, shadow: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            addText(text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, x: number, y: number, color: number, zIndex: number, shadow: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @see IDraw2D#removeText(xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Text)
                             */
                            removeText(t: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D;
                            
                            /**
                             * 
                             * @since 1.2.3
                             * @see IDraw2D#addImage(int, int, int, int, String, int, int, int, int, int, int)
                             */
                            addImage(x: number, y: number, width: number, height: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            addImage(x: number, y: number, width: number, height: number, zIndex: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @see IDraw2D#addImage(int, int, int, int, String, int, int, int, int, int, int, double)
                             */
                            addImage(x: number, y: number, width: number, height: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @see IDraw2D#addImage(int, int, int, int, int, String, int, int, int, int, int, int, double)
                             */
                            addImage(x: number, y: number, width: number, height: number, zIndex: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @see IDraw2D#addImage(int, int, int, int, int, int, String, int, int, int, int, int, int, double)
                             */
                            addImage(x: number, y: number, width: number, height: number, zIndex: number, color: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @see IDraw2D#addImage(int, int, int, int, int, int, int, String, int, int, int, int, int, int, double)
                             */
                            addImage(x: number, y: number, width: number, height: number, zIndex: number, alpha: number, color: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @since 1.2.3
                             * @see IDraw2D#removeImage(xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Image)
                             */
                            removeImage(i: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @see IDraw2D#addRect(int, int, int, int, int)
                             */
                            addRect(x1: number, y1: number, x2: number, y2: number, color: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.1.8
                             * @see IDraw2D#addRect(int, int, int, int, int, int)
                             */
                            addRect(x1: number, y1: number, x2: number, y2: number, color: number, alpha: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @see IDraw2D#addRect(int, int, int, int, int, int, double)
                             */
                            addRect(x1: number, y1: number, x2: number, y2: number, color: number, alpha: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            addRect(x1: number, y1: number, x2: number, y2: number, color: number, alpha: number, rotation: number, zIndex: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @see IDraw2D#removeRect(xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Rect)
                             */
                            removeRect(r: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @see IDraw2D#addItem(int, int, String)
                             */
                            addItem(x: number, y: number, id: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            addItem(x: number, y: number, zIndex: number, id: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.0
                             * @see IDraw2D#addItem(int, int, String, boolean)
                             */
                            addItem(x: number, y: number, id: string, overlay: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            addItem(x: number, y: number, zIndex: number, id: string, overlay: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.0
                             * @see IDraw2D#addItem(int, int, String, boolean, double, double)
                             */
                            addItem(x: number, y: number, id: string, overlay: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            addItem(x: number, y: number, zIndex: number, id: string, overlay: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @see IDraw2D#addItem(int, int, ItemStackHelper)
                             */
                            addItem(x: number, y: number, Item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            addItem(x: number, y: number, zIndex: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.0
                             * @see IDraw2D#addItem(int, int, ItemStackHelper, boolean)
                             */
                            addItem(x: number, y: number, Item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper, overlay: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            addItem(x: number, y: number, zIndex: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper, overlay: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @see IDraw2D#addItem(int, int, ItemStackHelper, boolean, double, double)
                             */
                            addItem(x: number, y: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper, overlay: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            addItem(x: number, y: number, zIndex: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper, overlay: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @see IDraw2D#removeItem(xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Item)
                             */
                            removeItem(i: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D;
                            init(): void;
                            render(matrixStack: /* minecraft classes, as any, because obfuscation: */ any): void;
                            
                            /**
                             * init function, called when window is resized or screen/draw2d is registered.
                             *  clears all previous elements when called.
                             * @since 1.2.7
                             * @see IDraw2D#setOnInit(MethodWrapper)
                             * @param onInit calls your method as a {@link java.util.function.Consumer Consumer}&lt;{@link Draw2D}&gt;
                             */
                            setOnInit(onInit: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @see IDraw2D#setOnFailInit(MethodWrapper)
                             * @param catchInit calls your method as a {@link java.util.function.Consumer Consumer}&lt;{@link java.lang.String String}&gt;
                             */
                            setOnFailInit(catchInit: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<string, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D;
                            
                            /**
                             * register so the overlay actually renders
                             * @since 1.6.5
                             * @return self for chaining
                             */
                            register(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D;
                            
                            /**
                             * unregister so the overlay stops rendering
                             * @since 1.6.5
                             * @return self for chaining
                             */
                            unregister(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D;
                            
                        }
                        namespace Draw2D {
                            interface static {
                                new (): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D;
                                
                                
                                
                            }
                        }
                        interface WorldScanner extends _javatypes.java.lang.Object {
                            
                            
                            /**
                             * Gets a list of all chunks in the given range around the center chunk.
                             * @param centerX
                             * @param centerZ
                             * @param chunkrange
                             * @return 
                             */
                            getChunkRange(centerX: number, centerZ: number, chunkrange: number): _javatypes.java.util.List</* minecraft classes, as any, because obfuscation: */ any>;
                            
                            /**
                             * Scans all chunks in the given range around the player and returns a list of all block positions, for blocks matching the filter.
                             *  This will scan in a square with length 2*range + 1. So range = 0 for example will only scan the chunk the player
                             *  is standing in, while range = 1 will scan in a 3x3 area.
                             * @param range
                             * @return 
                             */
                            scanAroundPlayer(range: number): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D>;
                            
                            /**
                             * Scans all chunks in the given range around the center chunk and returns a list of all block positions, for blocks matching the filter.
                             *  This will scan in a square with length 2*range + 1. So range = 0 for example will only scan the specified chunk,
                             *  while range = 1 will scan in a 3x3 area.
                             * @param centerX
                             * @param centerZ
                             * @param chunkrange
                             * @return the list
                             */
                            scanChunkRange(centerX: number, centerZ: number, chunkrange: number): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D>;
                            
                            /**
                             * Gets the amount of all blocks matching the criteria inside the chunk.
                             * @param chunkX
                             * @param chunkZ
                             * @param ignoreState whether multiple states should be combined to a single block
                             * @return 
                             */
                            getBlocksInChunk(chunkX: number, chunkZ: number, ignoreState: boolean): _javatypes.java.util.Map<string, number>;
                            
                            /**
                             * Gets the amount of all blocks matching the criteria inside square around the center chunk 
                             *  with radius chunkrange/2.
                             * @param centerX
                             * @param centerZ
                             * @param chunkrange
                             * @param ignoreState whether multiple states should be combined to a single block
                             * @return 
                             */
                            getBlocksInChunks(centerX: number, centerZ: number, chunkrange: number, ignoreState: boolean): _javatypes.java.util.Map<string, number>;
                            
                            /**
                             * Get the amount of cached block states. This will normally be around 200 - 400.
                             * @return 
                             */
                            getCachedAmount(): number;
                            
                        }
                        namespace WorldScanner {
                            interface static {
                                
                                /**
                                 * Creates a new World scanner with for the given world. It accepts two boolean functions, 
                                 *  one for {@link _javatypes.BlockHelper} and the other for {@link _javatypes.BlockStateHelper}.
                                 * @param world
                                 * @param blockFilter
                                 * @param stateFilter
                                 */
                                new (world: /* minecraft classes, as any, because obfuscation: */ any, blockFilter: _javatypes.java.util._function.Function<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockHelper, boolean>, stateFilter: _javatypes.java.util._function.Function<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockStateHelper, boolean>): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScanner;
                                
                                
                                
                            }
                        }
                        interface Draw3D extends _javatypes.java.lang.Object {
                            
                            
                            /**
                             * 
                             * @return 
                             * @since 1.0.6
                             */
                            getBoxes(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Box>;
                            
                            /**
                             * 
                             * @return 
                             * @since 1.0.6
                             */
                            getLines(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Line>;
                            
                            /**
                             * 
                             * @return 
                             * @since 1.6.5
                             */
                            getDraw2Ds(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Surface>;
                            
                            /**
                             * 
                             * @param x1
                             * @param y1
                             * @param z1
                             * @param x2
                             * @param y2
                             * @param z2
                             * @param color
                             * @param fillColor
                             * @param fill
                             * @return The {@link Box} you added.
                             * @since 1.0.6
                             */
                            addBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number, fillColor: number, fill: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Box;
                            
                            /**
                             * 
                             * @param x1
                             * @param y1
                             * @param z1
                             * @param x2
                             * @param y2
                             * @param z2
                             * @param color
                             * @param fillColor
                             * @param fill
                             * @param cull
                             * @return 
                             * @since 1.3.1
                             */
                            addBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number, fillColor: number, fill: boolean, cull: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Box;
                            
                            /**
                             * 
                             * @param x1
                             * @param y1
                             * @param z1
                             * @param x2
                             * @param y2
                             * @param z2
                             * @param color
                             * @param alpha
                             * @param fillColor
                             * @param fillAlpha
                             * @param fill
                             * @return the {@link Box} you added.
                             * @since 1.1.8
                             */
                            addBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number, alpha: number, fillColor: number, fillAlpha: number, fill: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Box;
                            addBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number, alpha: number, fillColor: number, fillAlpha: number, fill: boolean, cull: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Box;
                            
                            /**
                             * 
                             * @param b
                             * @return 
                             * @since 1.0.6
                             */
                            removeBox(b: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Box): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D;
                            
                            /**
                             * 
                             * @param x1
                             * @param y1
                             * @param z1
                             * @param x2
                             * @param y2
                             * @param z2
                             * @param color
                             * @return the {@link Line} you added.
                             * @since 1.0.6
                             */
                            addLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Line;
                            
                            /**
                             * 
                             * @param x1
                             * @param y1
                             * @param z1
                             * @param x2
                             * @param y2
                             * @param z2
                             * @param color
                             * @param cull
                             * @return 
                             * @since 1.3.1
                             */
                            addLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number, cull: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Line;
                            
                            /**
                             * 
                             * @param x1
                             * @param y1
                             * @param z1
                             * @param x2
                             * @param y2
                             * @param z2
                             * @param color
                             * @param alpha
                             * @return the {@link Line} you added.
                             * @since 1.1.8
                             */
                            addLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number, alpha: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Line;
                            
                            /**
                             * 
                             * @param x1
                             * @param y1
                             * @param z1
                             * @param x2
                             * @param y2
                             * @param z2
                             * @param color
                             * @param alpha
                             * @param cull
                             * @return 
                             * @since 1.3.1
                             */
                            addLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number, alpha: number, cull: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Line;
                            
                            /**
                             * 
                             * @param l
                             * @return 
                             * @since 1.0.6
                             */
                            removeLine(l: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Line): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D;
                            
                            /**
                             * Draws a cube({@link _javatypes.Box}) with a specific radius(`side length = 2*radius`)
                             * @param point the center point
                             * @param radius 1/2 of the side length of the cube
                             * @param color point color
                             * @return the {@link Box} generated, and visualized
                             * @see Draw3D.Box
                             * @since 1.4.0
                             */
                            addPoint(point: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D, radius: number, color: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Box;
                            
                            /**
                             * Draws a cube({@link _javatypes.Box}) with a specific radius(`side length = 2*radius`)
                             * @param x x value of the center point
                             * @param y y value of the center point
                             * @param z z value of the center point
                             * @param radius 1/2 of the side length of the cube
                             * @param color point color
                             * @return the {@link Box} generated, and visualized
                             * @see Draw3D.Box
                             * @since 1.4.0
                             */
                            addPoint(x: number, y: number, z: number, radius: number, color: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Box;
                            
                            /**
                             * Draws a cube({@link _javatypes.Box}) with a specific radius(`side length = 2*radius`)
                             * @param x x value of the center point
                             * @param y y value of the center point
                             * @param z z value of the center point
                             * @param radius 1/2 of the side length of the cube
                             * @param color point color
                             * @param alpha alpha of the point
                             * @param cull whether to cull the point or not
                             * @return the {@link Box} generated, and visualized
                             * @see Draw3D.Box
                             * @since 1.4.0
                             */
                            addPoint(x: number, y: number, z: number, radius: number, color: number, alpha: number, cull: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Box;
                            
                            /**
                             * 
                             * @param x top left
                             * @param y
                             * @param z
                             * @since 1.6.5
                             * @return 
                             */
                            addDraw2D(x: number, y: number, z: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Surface;
                            
                            /**
                             * 
                             * @param x
                             * @param y
                             * @param z
                             * @param width
                             * @param height
                             * @since 1.6.5
                             * @return 
                             */
                            addDraw2D(x: number, y: number, z: number, width: number, height: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Surface;
                            
                            /**
                             * 
                             * @param x
                             * @param y
                             * @param z
                             * @param xRot
                             * @param yRot
                             * @param zRot
                             * @since 1.6.5
                             * @return 
                             */
                            addDraw2D(x: number, y: number, z: number, xRot: number, yRot: number, zRot: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Surface;
                            
                            /**
                             * 
                             * @param x
                             * @param y
                             * @param z
                             * @param xRot
                             * @param yRot
                             * @param zRot
                             * @param width
                             * @param height
                             * @since 1.6.5
                             * @return 
                             */
                            addDraw2D(x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, width: number, height: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Surface;
                            
                            /**
                             * 
                             * @param x
                             * @param y
                             * @param z
                             * @param xRot
                             * @param yRot
                             * @param zRot
                             * @param width
                             * @param height
                             * @param minSubdivisions
                             * @since 1.6.5
                             * @return 
                             */
                            addDraw2D(x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, width: number, height: number, minSubdivisions: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Surface;
                            
                            /**
                             * 
                             * @param x
                             * @param y
                             * @param z
                             * @param xRot
                             * @param yRot
                             * @param zRot
                             * @param width
                             * @param height
                             * @param minSubdivisions
                             * @param renderBack
                             * @since 1.6.5
                             * @return 
                             */
                            addDraw2D(x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, width: number, height: number, minSubdivisions: number, renderBack: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Surface;
                            
                            /**
                             * 
                             * @param x top left
                             * @param y
                             * @param z
                             * @param xRot
                             * @param yRot
                             * @param zRot
                             * @param width
                             * @param height
                             * @param minSubdivisions
                             * @param renderBack
                             * @since 1.6.5
                             * @return 
                             */
                            addDraw2D(x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, width: number, height: number, minSubdivisions: number, renderBack: boolean, cull: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Surface;
                            
                            /**
                             * 
                             * @since 1.6.5
                             */
                            removeDraw2D(surface: _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Surface): void;
                            
                            /**
                             * register so it actually shows up
                             * @return self for chaining
                             * @since 1.6.5
                             */
                            register(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D;
                            
                            /**
                             * 
                             * @return self for chaining
                             * @since 1.6.5
                             */
                            unregister(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D;
                            render(matrixStack: /* minecraft classes, as any, because obfuscation: */ any): void;
                            
                        }
                        namespace Draw3D {
                            interface static {
                                new (): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D;
                                
                                
                                
                            }
                        }
                        interface CommandBuilder extends _javatypes.java.lang.Object {
                            
                            literalArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            angleArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            blockArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            booleanArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            colorArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            doubleArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            doubleArg(name: string, min: number, max: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            floatRangeArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            longArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            longArg(name: string, min: number, max: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            identifierArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            intArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            intArg(name: string, min: number, max: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            intRangeArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            itemArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            nbtArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            greedyStringArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            quotedStringArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            wordArg(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            textArgType(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            uuidArgType(name: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            regexArgType(name: string, regex: string, flags: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            
                            /**
                             * it is recomended to use {@link _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.FJsMacros#runScript}
                             *  in the callback if you expect to actually do anything complicated with waits.
                             * 
                             *  the {@link _javatypes.CommandContextHelper} arg is an {@link _javatypes.BaseEvent}
                             *  so you can pass it directly to {@link _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.FJsMacros#runScript}.
                             * 
                             *  make sure your callback returns a boolean success = true.
                             * @param callback
                             * @return 
                             */
                            executes(callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandContextHelper, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @param suggestions
                             * @return 
                             */
                            suggestMatching(suggestions: string[]): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @param suggestions
                             * @return 
                             */
                            suggestIdentifier(suggestions: string[]): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @param callback
                             * @return 
                             */
                            suggest(callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandContextHelper, _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.SuggestionsBuilderHelper, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            or(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            
                            /**
                             * name overload for {@link #or} to work around language keyword restrictions
                             * @since 1.5.2
                             * @return 
                             */
                            otherwise(): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            or(argumentLevel: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            
                            /**
                             * name overload for {@link #or} to work around language keyword restrictions
                             * @since 1.5.2
                             * @param argLevel
                             * @return 
                             */
                            otherwise(argLevel: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                            register(): void;
                            
                            /**
                             * 
                             * @since 1.6.5
                             *  removes this command
                             */
                            unregister(): void;
                            
                        }
                        namespace CommandBuilder {
                            interface static {
                                new (): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder;
                                
                                
                                
                            }
                        }
                        interface Draw3D$Line extends _javatypes.java.lang.Object {
                            pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            color: number;
                            cull: boolean;
                            
                            
                            /**
                             * 
                             * @param x1
                             * @param y1
                             * @param z1
                             * @param x2
                             * @param y2
                             * @param z2
                             * @since 1.0.6
                             */
                            setPos(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void;
                            
                            /**
                             * 
                             * @param color
                             * @since 1.0.6
                             */
                            setColor(color: number): void;
                            
                            /**
                             * 
                             * @param color
                             * @param alpha
                             * @since 1.1.8
                             */
                            setColor(color: number, alpha: number): void;
                            
                            /**
                             * 
                             * @param alpha
                             * @since 1.1.8
                             */
                            setAlpha(alpha: number): void;
                            render(matrixStack: /* minecraft classes, as any, because obfuscation: */ any): void;
                            
                        }
                        namespace Draw3D$Line {
                            interface static {
                                new (x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number, cull: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Line;
                                new (x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number, alpha: number, cull: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Line;
                                
                                
                                
                            }
                        }
                        interface Draw3D$Surface extends _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D {
                            readonly pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                            readonly rotations: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                            
                            /**
                             * scale that zIndex is multiplied by to get the actual offset (in blocks) for rendering
                             *  default: `1/1000`
                             *  if there is still z-fighting, increase this value
                             * @since 1.6.5
                             */
                            zIndexScale: number;
                            renderBack: boolean;
                            cull: boolean;
                            
                            setPos(x: number, y: number, z: number): void;
                            setRotations(x: number, y: number, z: number): void;
                            setSizes(x: number, y: number): void;
                            getSizes(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D;
                            setMinSubdivisions(minSubdivisions: number): void;
                            getMinSubdivisions(): number;
                            getHeight(): number;
                            getWidth(): number;
                            init(): void;
                            render3D(matrixStack: /* minecraft classes, as any, because obfuscation: */ any): void;
                            render(matrixStack: /* minecraft classes, as any, because obfuscation: */ any): void;
                            
                        }
                        namespace Draw3D$Surface {
                            interface static {
                                new (pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D, rotations: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D, sizes: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D, minSubdivisions: number, renderBack: boolean, cull: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Surface;
                                
                                
                                
                            }
                        }
                        interface Draw3D$Box extends _javatypes.java.lang.Object {
                            pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            color: number;
                            fillColor: number;
                            fill: boolean;
                            cull: boolean;
                            
                            
                            /**
                             * 
                             * @param x1
                             * @param y1
                             * @param z1
                             * @param x2
                             * @param y2
                             * @param z2
                             * @since 1.0.6
                             */
                            setPos(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void;
                            
                            /**
                             * 
                             * @param color
                             * @since 1.0.6
                             */
                            setColor(color: number): void;
                            
                            /**
                             * 
                             * @param fillColor
                             * @since 1.0.6
                             */
                            setFillColor(fillColor: number): void;
                            
                            /**
                             * 
                             * @param color
                             * @param alpha
                             * @since 1.1.8
                             */
                            setColor(color: number, alpha: number): void;
                            
                            /**
                             * 
                             * @param alpha
                             * @since 1.1.8
                             */
                            setAlpha(alpha: number): void;
                            
                            /**
                             * 
                             * @param fillColor
                             * @param alpha
                             * @since 1.1.8
                             */
                            setFillColor(fillColor: number, alpha: number): void;
                            
                            /**
                             * 
                             * @param alpha
                             * @since 1.1.8
                             */
                            setFillAlpha(alpha: number): void;
                            
                            /**
                             * 
                             * @param fill
                             * @since 1.0.6
                             */
                            setFill(fill: boolean): void;
                            render(matrixStack: /* minecraft classes, as any, because obfuscation: */ any): void;
                            
                        }
                        namespace Draw3D$Box {
                            interface static {
                                new (x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number, fillColor: number, fill: boolean, cull: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Box;
                                new (x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number, alpha: number, fillColor: number, fillAlpha: number, fill: boolean, cull: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D$Box;
                                
                                
                                
                            }
                        }
                    }
                
                    namespace sharedclasses {
                    
                        interface PositionCommon$Pos2D extends _javatypes.java.lang.Object {
                            x: number;
                            y: number;
                            
                            getX(): number;
                            getY(): number;
                            add(pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @param x
                             * @param y
                             * @return 
                             */
                            add(x: number, y: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D;
                            multiply(pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @param x
                             * @param y
                             * @return 
                             */
                            multiply(x: number, y: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @param scale
                             * @return 
                             */
                            scale(scale: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D;
                            toString(): string;
                            to3D(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                            toVector(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param start_pos
                             * @return 
                             */
                            toVector(start_pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param start_x
                             * @param start_y
                             * @return 
                             */
                            toVector(start_x: number, start_y: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @return 
                             */
                            toReverseVector(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param end_pos
                             * @return 
                             */
                            toReverseVector(end_pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param end_x
                             * @param end_y
                             * @return 
                             */
                            toReverseVector(end_x: number, end_y: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            
                        }
                        namespace PositionCommon$Pos2D {
                            interface static {
                                new (x: number, y: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D;
                                
                                readonly ZERO: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D;
                                
                                
                            }
                        }
                        interface PositionCommon$Vec3D extends _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D {
                            z1: number;
                            z2: number;
                            
                            getZ1(): number;
                            getZ2(): number;
                            getDeltaZ(): number;
                            getStart(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                            getEnd(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                            getMagnitude(): number;
                            getMagnitudeSq(): number;
                            add(vec: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param pos
                             * @return 
                             */
                            addStart(pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param pos
                             * @return 
                             */
                            addEnd(pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param x
                             * @param y
                             * @param z
                             * @return 
                             */
                            addStart(x: number, y: number, z: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param x
                             * @param y
                             * @param z
                             * @return 
                             */
                            addEnd(x: number, y: number, z: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @param x1
                             * @param y1
                             * @param z1
                             * @param x2
                             * @param y2
                             * @param z2
                             * @return 
                             */
                            add(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            multiply(vec: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @param x1
                             * @param y1
                             * @param z1
                             * @param x2
                             * @param y2
                             * @param z2
                             * @return 
                             */
                            multiply(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @param scale
                             * @return 
                             */
                            scale(scale: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return 
                             */
                            normalize(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            getPitch(): number;
                            getYaw(): number;
                            dotProduct(vec: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D): number;
                            crossProduct(vec: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            reverse(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            toString(): string;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return 
                             */
                            toMojangFloatVector(): /* minecraft classes, as any, because obfuscation: */ any;
                            
                        }
                        namespace PositionCommon$Vec3D {
                            interface static {
                                new (x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                                new (start: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D, end: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                                
                                
                                
                            }
                        }
                        interface PositionCommon$Vec2D extends _javatypes.java.lang.Object {
                            x1: number;
                            y1: number;
                            x2: number;
                            y2: number;
                            
                            getX1(): number;
                            getY1(): number;
                            getX2(): number;
                            getY2(): number;
                            getDeltaX(): number;
                            getDeltaY(): number;
                            getStart(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D;
                            getEnd(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D;
                            getMagnitude(): number;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @return magnitude squared
                             */
                            getMagnitudeSq(): number;
                            add(vec: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @param x1
                             * @param y1
                             * @param x2
                             * @param y2
                             * @return 
                             */
                            add(x1: number, y1: number, x2: number, y2: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            multiply(vec: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @param x1
                             * @param y1
                             * @param x2
                             * @param y2
                             * @return 
                             */
                            multiply(x1: number, y1: number, x2: number, y2: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @param scale
                             * @return 
                             */
                            scale(scale: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            dotProduct(vec: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D): number;
                            reverse(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            
                            /**
                             * 
                             * @return a new Vec2D with the same direction but a magnitude of 1
                             * @since 1.6.5
                             */
                            normalize(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                            toString(): string;
                            to3D(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                        }
                        namespace PositionCommon$Vec2D {
                            interface static {
                                new (x1: number, y1: number, x2: number, y2: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                                new (start: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D, end: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D;
                                
                                
                                
                            }
                        }
                        interface PositionCommon$Pos3D extends _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D {
                            z: number;
                            
                            getZ(): number;
                            add(pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @param x
                             * @param y
                             * @param z
                             * @return 
                             */
                            add(x: number, y: number, z: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                            multiply(pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @param x
                             * @param y
                             * @param z
                             * @return 
                             */
                            multiply(x: number, y: number, z: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                            
                            /**
                             * 
                             * @since 1.6.3
                             * @param scale
                             * @return 
                             */
                            scale(scale: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                            toString(): string;
                            toVector(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param start_pos
                             * @return 
                             */
                            toVector(start_pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param start_pos
                             * @return 
                             */
                            toVector(start_pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param start_x
                             * @param start_y
                             * @param start_z
                             * @return 
                             */
                            toVector(start_x: number, start_y: number, start_z: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @return 
                             */
                            toReverseVector(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            toReverseVector(end_pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param end_pos
                             * @return 
                             */
                            toReverseVector(end_pos: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.6.4
                             * @param end_x
                             * @param end_y
                             * @param end_z
                             * @return 
                             */
                            toReverseVector(end_x: number, end_y: number, end_z: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec3D;
                            
                            /**
                             * 
                             * @since 1.8.0
                             * @return 
                             */
                            toBlockPos(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper;
                            
                            /**
                             * 
                             * @since 1.8.0
                             * @return 
                             */
                            toRawBlockPos(): /* minecraft classes, as any, because obfuscation: */ any;
                            
                        }
                        namespace PositionCommon$Pos3D {
                            interface static {
                                new (vec: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                                new (x: number, y: number, z: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                                
                                readonly ZERO: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos3D;
                                
                                
                            }
                        }
                        interface RenderCommon$Text extends _javatypes.java.lang.Object, _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement {
                            text: /* minecraft classes, as any, because obfuscation: */ any;
                            scale: number;
                            rotation: number;
                            x: number;
                            y: number;
                            color: number;
                            width: number;
                            shadow: boolean;
                            zIndex: number;
                            
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param scale
                             * @return 
                             * @throws Exception
                             */
                            setScale(scale: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param rotation
                             * @return 
                             */
                            setRotation(rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param x
                             * @param y
                             * @return 
                             */
                            setPos(x: number, y: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param text
                             * @return 
                             */
                            setText(text: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param text
                             * @return 
                             */
                            setText(text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return 
                             */
                            getText(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @return 
                             */
                            getWidth(): number;
                            render(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                            render3D(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                            getZIndex(): number;
                            
                        }
                        namespace RenderCommon$Text {
                            interface static {
                                new (text: string, x: number, y: number, color: number, zIndex: number, shadow: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                                new (text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, x: number, y: number, color: number, zIndex: number, shadow: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                                
                                
                                
                            }
                        }
                        interface RenderCommon$Rect extends _javatypes.java.lang.Object, _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement {
                            rotation: number;
                            x1: number;
                            y1: number;
                            x2: number;
                            y2: number;
                            color: number;
                            zIndex: number;
                            
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param color
                             * @return 
                             */
                            setColor(color: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.1.8
                             * @param color
                             * @param alpha
                             * @return 
                             */
                            setColor(color: number, alpha: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.1.8
                             * @param alpha
                             * @return 
                             */
                            setAlpha(alpha: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.1.8
                             * @param x1
                             * @param y1
                             * @param x2
                             * @param y2
                             * @return 
                             */
                            setPos(x1: number, y1: number, x2: number, y2: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @param rotation
                             * @return 
                             */
                            setRotation(rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            render(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                            getZIndex(): number;
                            
                        }
                        namespace RenderCommon$Rect {
                            interface static {
                                new (x1: number, y1: number, x2: number, y2: number, color: number, rotation: number, zIndex: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                                new (x1: number, y1: number, x2: number, y2: number, color: number, alpha: number, rotation: number, zIndex: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                                
                                
                                
                            }
                        }
                        interface RenderCommon$RenderElement extends _javatypes.java.lang.Interface, /* supressed minecraft class */ _javatypes.java.lang.Interface {
                            
                            getZIndex(): number;
                            render3D(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                            
                        }
                        namespace RenderCommon$RenderElement {
                            interface static {
                                
                                
                                
                            }
                        }
                        interface RenderCommon$Item extends _javatypes.java.lang.Object, _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement {
                            item: /* minecraft classes, as any, because obfuscation: */ any;
                            ovText: string;
                            overlay: boolean;
                            scale: number;
                            rotation: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param x
                             * @param y
                             * @return 
                             */
                            setPos(x: number, y: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @param scale
                             * @return 
                             * @throws Exception
                             */
                            setScale(scale: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @param rotation
                             * @return 
                             */
                            setRotation(rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.0
                             * @param overlay
                             * @return 
                             */
                            setOverlay(overlay: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.0
                             * @param ovText
                             * @return 
                             */
                            setOverlayText(ovText: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.0.5 [citation needed]
                             * @param i
                             * @return 
                             */
                            setItem(i: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.0.5 [citation needed]
                             * @param id
                             * @param count
                             * @return 
                             */
                            setItem(id: string, count: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.0.5 [citation needed]
                             * @return 
                             */
                            getItem(): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper;
                            render(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                            render3D(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                            getZIndex(): number;
                            
                        }
                        namespace RenderCommon$Item {
                            interface static {
                                new (x: number, y: number, zIndex: number, id: string, overlay: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                                new (x: number, y: number, zIndex: number, i: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper, overlay: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                                
                                
                                
                            }
                        }
                        interface RenderCommon$Image extends _javatypes.java.lang.Object, _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement {
                            rotation: number;
                            x: number;
                            y: number;
                            width: number;
                            height: number;
                            imageX: number;
                            imageY: number;
                            regionWidth: number;
                            regionHeight: number;
                            textureWidth: number;
                            textureHeight: number;
                            color: number;
                            zIndex: number;
                            
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @param color
                             * @return 
                             */
                            setColor(color: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @since 1.6.5
                             * @param color
                             * @param alpha
                             * @return 
                             */
                            setColor(color: number, alpha: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @since 1.2.3
                             * @param x
                             * @param y
                             * @param width
                             * @param height
                             */
                            setPos(x: number, y: number, width: number, height: number): void;
                            
                            /**
                             * 
                             * @since 1.2.6
                             * @param rotation
                             * @return 
                             */
                            setRotation(rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @since 1.2.3
                             * @param id
                             * @param imageX
                             * @param imageY
                             * @param regionWidth
                             * @param regionHeight
                             * @param textureWidth
                             * @param textureHeight
                             */
                            setImage(id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number): void;
                            
                            /**
                             * 
                             * @since 1.2.3
                             * @return 
                             */
                            getImage(): string;
                            render(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                            getZIndex(): number;
                            
                        }
                        namespace RenderCommon$Image {
                            interface static {
                                new (x: number, y: number, width: number, height: number, zIndex: number, color: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                                new (x: number, y: number, width: number, height: number, zIndex: number, alpha: number, color: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                                
                                
                                
                            }
                        }
                    }
                
                    namespace sharedinterfaces {
                    
                        interface IDraw2D<T> extends _javatypes.java.lang.Interface {
                            
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return screen width
                             */
                            getWidth(): number;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return screen height
                             */
                            getHeight(): number;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return text elements
                             */
                            getTexts(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text>;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return rect elements
                             */
                            getRects(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect>;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return item elements
                             */
                            getItems(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item>;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return image elements
                             */
                            getImages(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image>;
                            
                            /**
                             * 
                             * @since 1.2.9
                             * @return a read only copy of the list of all elements added by scripts.
                             */
                            getElements(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement>;
                            
                            /**
                             * removes any element regardless of type.
                             * @since 1.2.9
                             * @return self for chaining
                             */
                            removeElement(e: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement): T;
                            
                            /**
                             * re-add an element you removed with {@link #removeElement}
                             * @since 1.2.9
                             * @return self for chaining
                             */
                            reAddElement(e: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$RenderElement;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param text
                             * @param x screen x
                             * @param y screen y
                             * @param color text color
                             * @param shadow include shadow layer
                             * @return added text
                             */
                            addText(text: string, x: number, y: number, color: number, shadow: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param text
                             * @param x screen x
                             * @param y screen y
                             * @param color text color
                             * @param zIndex z-index
                             * @param shadow include shadow layer
                             * @return added text
                             */
                            addText(text: string, x: number, y: number, color: number, zIndex: number, shadow: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param text
                             * @param x screen x
                             * @param y screen y
                             * @param color text color
                             * @param shadow include shadow layer
                             * @param scale text scale (as double)
                             * @param rotation text rotation (as degrees)
                             * @return added text
                             */
                            addText(text: string, x: number, y: number, color: number, shadow: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param text
                             * @param x screen x
                             * @param y screen y
                             * @param color text color
                             * @param zIndex z-index
                             * @param shadow include shadow layer
                             * @param scale text scale (as double)
                             * @param rotation text rotation (as degrees)
                             * @return added text
                             */
                            addText(text: string, x: number, y: number, color: number, zIndex: number, shadow: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param text
                             * @param x screen x
                             * @param y screen y
                             * @param color text color
                             * @param shadow include shadow layer
                             * @return added text
                             */
                            addText(text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, x: number, y: number, color: number, shadow: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param text
                             * @param x screen x
                             * @param y screen y
                             * @param color text color
                             * @param zIndex z-index
                             * @param shadow include shadow layer
                             * @return added text
                             */
                            addText(text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, x: number, y: number, color: number, zIndex: number, shadow: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param text
                             * @param x screen x
                             * @param y screen y
                             * @param color text color
                             * @param shadow include shadow layer
                             * @param scale text scale (as double)
                             * @param rotation text rotation (as degrees)
                             * @return added text
                             */
                            addText(text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, x: number, y: number, color: number, shadow: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param text
                             * @param x screen x
                             * @param y screen y
                             * @param color text color
                             * @param zIndex z-index
                             * @param shadow include shadow layer
                             * @param scale text scale (as double)
                             * @param rotation text rotation (as degrees)
                             * @return added text
                             */
                            addText(text: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper, x: number, y: number, color: number, zIndex: number, shadow: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param t
                             * @return self for chaining
                             */
                            removeText(t: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Text): T;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param x screen x, top left corner
                             * @param y screen y, top left corner
                             * @param width width on screen
                             * @param height height on screen
                             * @param id image id, in the form {@code minecraft:textures} path'd as found in texture packs, ie {@code assets/minecraft/textures/gui/recipe_book.png} becomes {@code minecraft:textures/gui/recipe_book.png}
                             * @param imageX the left-most coordinate of the texture region
                             * @param imageY the top-most coordinate of the texture region
                             * @param regionWidth the width the texture region
                             * @param regionHeight the height the texture region
                             * @param textureWidth the width of the entire texture
                             * @param textureHeight the height of the entire texture
                             * @return added image
                             */
                            addImage(x: number, y: number, width: number, height: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param x screen x, top left corner
                             * @param y screen y, top left corner
                             * @param width width on screen
                             * @param height height on screen
                             * @param zIndex z-index
                             * @param id image id, in the form {@code minecraft:textures} path'd as found in texture packs, ie {@code assets/minecraft/textures/gui/recipe_book.png} becomes {@code minecraft:textures/gui/recipe_book.png}
                             * @param imageX the left-most coordinate of the texture region
                             * @param imageY the top-most coordinate of the texture region
                             * @param regionWidth the width the texture region
                             * @param regionHeight the height the texture region
                             * @param textureWidth the width of the entire texture
                             * @param textureHeight the height of the entire texture
                             * @return added image
                             */
                            addImage(x: number, y: number, width: number, height: number, zIndex: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param x screen x, top left corner
                             * @param y screen y, top left corner
                             * @param width width on screen
                             * @param height height on screen
                             * @param id image id, in the form {@code minecraft:textures} path'd as found in texture packs, ie {@code assets/minecraft/textures/gui/recipe_book.png} becomes {@code minecraft:textures/gui/recipe_book.png}
                             * @param imageX the left-most coordinate of the texture region
                             * @param imageY the top-most coordinate of the texture region
                             * @param regionWidth the width the texture region
                             * @param regionHeight the height the texture region
                             * @param textureWidth the width of the entire texture
                             * @param textureHeight the height of the entire texture
                             * @param rotation the rotation of the texture (as degrees)
                             * @return added image
                             */
                            addImage(x: number, y: number, width: number, height: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param x screen x, top left corner
                             * @param y screen y, top left corner
                             * @param width width on screen
                             * @param height height on screen
                             * @param zIndex z-index
                             * @param id image id, in the form {@code minecraft:textures} path'd as found in texture packs, ie {@code assets/minecraft/textures/gui/recipe_book.png} becomes {@code minecraft:textures/gui/recipe_book.png}
                             * @param imageX the left-most coordinate of the texture region
                             * @param imageY the top-most coordinate of the texture region
                             * @param regionWidth the width the texture region
                             * @param regionHeight the height the texture region
                             * @param textureWidth the width of the entire texture
                             * @param textureHeight the height of the entire texture
                             * @param rotation the rotation of the texture (as degrees)
                             * @return added image
                             */
                            addImage(x: number, y: number, width: number, height: number, zIndex: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @param x
                             * @param y
                             * @param width
                             * @param height
                             * @param zIndex
                             * @param color
                             * @param id
                             * @param imageX
                             * @param imageY
                             * @param regionWidth
                             * @param regionHeight
                             * @param textureWidth
                             * @param textureHeight
                             * @param rotation
                             * @since 1.6.5
                             * @return 
                             */
                            addImage(x: number, y: number, width: number, height: number, zIndex: number, color: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @param x
                             * @param y
                             * @param width
                             * @param height
                             * @param zIndex
                             * @param alpha
                             * @param color
                             * @param id
                             * @param imageX
                             * @param imageY
                             * @param regionWidth
                             * @param regionHeight
                             * @param textureWidth
                             * @param textureHeight
                             * @param rotation
                             * @since 1.6.5
                             * @return 
                             */
                            addImage(x: number, y: number, width: number, height: number, zIndex: number, alpha: number, color: number, id: string, imageX: number, imageY: number, regionWidth: number, regionHeight: number, textureWidth: number, textureHeight: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param i
                             * @return self for chaining
                             */
                            removeImage(i: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Image): T;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param x1
                             * @param y1
                             * @param x2
                             * @param y2
                             * @param color as hex, with alpha channel
                             * @return added rect
                             */
                            addRect(x1: number, y1: number, x2: number, y2: number, color: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param x1
                             * @param y1
                             * @param x2
                             * @param y2
                             * @param color as hex
                             * @param alpha alpha channel 0-255
                             * @return added rect
                             */
                            addRect(x1: number, y1: number, x2: number, y2: number, color: number, alpha: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param x1
                             * @param y1
                             * @param x2
                             * @param y2
                             * @param color as hex
                             * @param alpha alpha channel 0-255
                             * @param rotation as degrees
                             * @return added rect
                             */
                            addRect(x1: number, y1: number, x2: number, y2: number, color: number, alpha: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param x1
                             * @param y1
                             * @param x2
                             * @param y2
                             * @param color as hex
                             * @param alpha alpha channel 0-255
                             * @param rotation as degrees
                             * @param zIndex z-index
                             * @return added rect
                             */
                            addRect(x1: number, y1: number, x2: number, y2: number, color: number, alpha: number, rotation: number, zIndex: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param r
                             * @return self for chaining
                             */
                            removeRect(r: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect): T;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param x left most corner
                             * @param y top most corner
                             * @param id item id
                             * @return added item
                             */
                            addItem(x: number, y: number, id: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param x left most corner
                             * @param y top most corner
                             * @param zIndex z-index
                             * @param id item id
                             * @return added item
                             */
                            addItem(x: number, y: number, zIndex: number, id: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param x left most corner
                             * @param y top most corner
                             * @param id item id
                             * @param overlay should include overlay health and count
                             * @return added item
                             */
                            addItem(x: number, y: number, id: string, overlay: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param x left most corner
                             * @param y top most corner
                             * @param zIndex z-index
                             * @param id item id
                             * @param overlay should include overlay health and count
                             * @return added item
                             */
                            addItem(x: number, y: number, zIndex: number, id: string, overlay: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param x left most corner
                             * @param y top most corner
                             * @param id item id
                             * @param overlay should include overlay health and count
                             * @param scale scale of item
                             * @param rotation rotation of item
                             * @return added item
                             */
                            addItem(x: number, y: number, id: string, overlay: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param x left most corner
                             * @param y top most corner
                             * @param zIndex z-index
                             * @param id item id
                             * @param overlay should include overlay health and count
                             * @param scale scale of item
                             * @param rotation rotation of item
                             * @return added item
                             */
                            addItem(x: number, y: number, zIndex: number, id: string, overlay: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param x left most corner
                             * @param y top most corner
                             * @param item from inventory as helper
                             * @return added item
                             */
                            addItem(x: number, y: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param x left most corner
                             * @param y top most corner
                             * @param zIndex z-index
                             * @param item from inventory as helper
                             * @return added item
                             */
                            addItem(x: number, y: number, zIndex: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param x left most corner
                             * @param y top most corner
                             * @param item from inventory as helper
                             * @param overlay should include overlay health and count
                             * @return added item
                             */
                            addItem(x: number, y: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper, overlay: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param x left most corner
                             * @param y top most corner
                             * @param zIndex z-index
                             * @param item from inventory as helper
                             * @param overlay should include overlay health and count
                             * @return added item
                             */
                            addItem(x: number, y: number, zIndex: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper, overlay: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param x left most corner
                             * @param y top most corner
                             * @param item from inventory as helper
                             * @param overlay should include overlay health and count
                             * @param scale scale of item
                             * @param rotation rotation of item
                             * @return added item
                             */
                            addItem(x: number, y: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper, overlay: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param x left most corner
                             * @param y top most corner
                             * @param zIndex z-index
                             * @param item from inventory as helper
                             * @param overlay should include overlay health and count
                             * @param scale scale of item
                             * @param rotation rotation of item
                             * @return added item
                             */
                            addItem(x: number, y: number, zIndex: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper, overlay: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param i
                             * @return self for chaining
                             */
                            removeItem(i: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item): T;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param onInit calls your method as a {@link Consumer}&lt;{@link T}&gt;
                             * @return self for chaining
                             */
                            setOnInit(onInit: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<T, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): T;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param catchInit calls your method as a {@link Consumer}&lt;{@link String}&gt;
                             * @return self for chaining
                             */
                            setOnFailInit(catchInit: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<string, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): T;
                            
                            /**
                             * internal
                             * @param matrixStack
                             */
                            render(matrixStack: /* minecraft classes, as any, because obfuscation: */ any): void;
                            
                        }
                        namespace IDraw2D {
                            interface static {
                                
                                
                                
                            }
                        }
                        interface IScreen extends _javatypes.java.lang.Interface, _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen> {
                            
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @return 
                             */
                            getScreenClassName(): string;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @return 
                             */
                            getTitleText(): string;
                            
                            /**
                             * in `1.3.1` updated to work with all button widgets not just ones added by scripts.
                             * @since 1.0.5
                             * @return 
                             */
                            getButtonWidgets(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<any>>;
                            
                            /**
                             * in `1.3.1` updated to work with all text fields not just ones added by scripts.
                             * @since 1.0.5
                             * @return 
                             */
                            getTextFields(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper>;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param x
                             * @param y
                             * @param width
                             * @param height
                             * @param text
                             * @param callback calls your method as a {@link Consumer}&lt;{@link ButtonWidgetHelper}&gt;
                             * @return 
                             */
                            addButton(x: number, y: number, width: number, height: number, text: string, callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<any>, _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<any>;
                            
                            /**
                             * 
                             * @since 1.4.0
                             * @param x
                             * @param y
                             * @param width
                             * @param height
                             * @param zIndex
                             * @param text
                             * @param callback calls your method as a {@link Consumer}&lt;{@link ButtonWidgetHelper}&gt;
                             * @return 
                             */
                            addButton(x: number, y: number, width: number, height: number, zIndex: number, text: string, callback: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<any>, _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<any>;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param btn
                             * @return 
                             */
                            removeButton(btn: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper<any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param x
                             * @param y
                             * @param width
                             * @param height
                             * @param message
                             * @param onChange calls your method as a {@link Consumer}&lt;{@link String}&gt;
                             * @return 
                             */
                            addTextInput(x: number, y: number, width: number, height: number, message: string, onChange: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<string, _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param x
                             * @param y
                             * @param width
                             * @param height
                             * @param zIndex
                             * @param message
                             * @param onChange calls your method as a {@link Consumer}&lt;{@link String}&gt;
                             * @return 
                             */
                            addTextInput(x: number, y: number, width: number, height: number, zIndex: number, message: string, onChange: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<string, _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper;
                            
                            /**
                             * 
                             * @since 1.0.5
                             * @param inp
                             * @return 
                             */
                            removeTextInput(inp: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param onMouseDown calls your method as a {@link BiConsumer}&lt;{@link PositionCommon.Pos2D}, {@link Integer}&gt;
                             * @return 
                             */
                            setOnMouseDown(onMouseDown: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D, number, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param onMouseDrag calls your method as a {@link BiConsumer}&lt;{@link PositionCommon.Vec2D}, {@link Integer}&gt;
                             * @return 
                             */
                            setOnMouseDrag(onMouseDrag: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Vec2D, number, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param onMouseUp calls your method as a {@link BiConsumer}&lt;{@link PositionCommon.Pos2D}, {@link Integer}&gt;
                             * @return 
                             */
                            setOnMouseUp(onMouseUp: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D, number, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param onScroll calls your method as a {@link BiConsumer}&lt;{@link PositionCommon.Pos2D}, {@link Double}&gt;
                             * @return 
                             */
                            setOnScroll(onScroll: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon$Pos2D, number, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param onKeyPressed calls your method as a {@link BiConsumer}&lt;{@link Integer}, {@link Integer}&gt;
                             * @return 
                             */
                            setOnKeyPressed(onKeyPressed: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<number, number, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
                            
                            /**
                             * 
                             * @since 1.2.7
                             * @param onClose calls your method as a {@link Consumer}&lt;{@link IScreen}&gt;
                             * @return 
                             */
                            setOnClose(onClose: _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
                            
                            /**
                             * 
                             * @since 1.1.9
                             */
                            close(): void;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            addRect(x1: number, y1: number, x2: number, y2: number, color: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            addRect(x1: number, y1: number, x2: number, y2: number, color: number, alpha: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            addRect(x1: number, y1: number, x2: number, y2: number, color: number, alpha: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            removeRect(r: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Rect): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            addItem(x: number, y: number, id: string): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            addItem(x: number, y: number, id: string, overlay: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            addItem(x: number, y: number, id: string, overlay: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            addItem(x: number, y: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            addItem(x: number, y: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper, overlay: boolean): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            addItem(x: number, y: number, item: _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper, overlay: boolean, scale: number, rotation: number): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item;
                            
                            /**
                             * 
                             * @since 1.2.0
                             */
                            removeItem(i: _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon$Item): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
                            
                            /**
                             * calls the screen's init function re-loading it.
                             * @since 1.2.7
                             */
                            reloadScreen(): _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen;
                            
                            /**
                             * DON'T TOUCH
                             * @since 1.4.1
                             */
                            onRenderInternal(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                            getOnClose(): _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen, _javatypes.java.lang.Object, _javatypes.java.lang.Object, any>;
                            
                        }
                        namespace IScreen {
                            interface static {
                                
                                
                                
                            }
                        }
                    }
                }
            
                namespace gui {
                
                
                    namespace editor {
                    
                        interface SelectCursor extends _javatypes.java.lang.Object {
                            onChange: _javatypes.java.util._function.Consumer<_javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.SelectCursor>;
                            defaultStyle: /* minecraft classes, as any, because obfuscation: */ any;
                            startLine: number;
                            endLine: number;
                            startIndex: number;
                            endIndex: number;
                            startLineIndex: number;
                            endLineIndex: number;
                            dragStartIndex: number;
                            arrowLineIndex: number;
                            arrowEnd: boolean;
                            startCol: number;
                            endCol: number;
                            
                            updateStartIndex(startIndex: number, current: string): void;
                            updateEndIndex(endIndex: number, current: string): void;
                            
                        }
                        namespace SelectCursor {
                            interface static {
                                new (defaultStyle: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.SelectCursor;
                                
                                
                                
                            }
                        }
                        interface History extends _javatypes.java.lang.Object {
                            onChange: _javatypes.java.util._function.Consumer<string>;
                            current: string;
                            
                            
                            /**
                             * 
                             * @param position
                             * @param content
                             * @return is new step.
                             */
                            addChar(position: number, content: number): boolean;
                            add(position: number, content: string): boolean;
                            
                            /**
                             * 
                             * @param position
                             * @return is new step.
                             */
                            deletePos(position: number, length: number): boolean;
                            
                            /**
                             * 
                             * @param position
                             * @return is new step
                             */
                            bkspacePos(position: number, length: number): boolean;
                            shiftLine(startLine: number, lines: number, shiftDown: boolean): boolean;
                            replace(position: number, length: number, content: string): void;
                            tabLines(startLine: number, lineCount: number, reverse: boolean): void;
                            tabLinesKeepCursor(startLine: number, startLineIndex: number, endLineIndex: number, lineCount: number, reverse: boolean): void;
                            
                            /**
                             * 
                             * @return position of step. -1 if nothing to undo.
                             */
                            undo(): number;
                            
                            /**
                             * 
                             * @return position of step. -1 if nothing to redo.
                             */
                            redo(): number;
                            
                        }
                        namespace History {
                            interface static {
                                new (start: string, cursor: _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.SelectCursor): _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.History;
                                
                                
                                
                            }
                        }
                    
                        namespace highlighting {
                        
                            interface AutoCompleteSuggestion extends _javatypes.java.lang.Object {
                                readonly startIndex: number;
                                readonly suggestion: string;
                                readonly displayText: /* minecraft classes, as any, because obfuscation: */ any;
                                
                                
                            }
                            namespace AutoCompleteSuggestion {
                                interface static {
                                    new (startIndex: number, suggestion: string): _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AutoCompleteSuggestion;
                                    new (startIndex: number, suggestion: string, displayText: /* minecraft classes, as any, because obfuscation: */ any): _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AutoCompleteSuggestion;
                                    
                                    
                                    
                                }
                            }
                            interface AbstractRenderCodeCompiler extends _javatypes.java.lang.Object {
                                
                                recompileRenderedText(text: string): void;
                                getRightClickOptions(index: number): _javatypes.java.util.Map<string, _javatypes.java.lang.Runnable>;
                                getRenderedText(): /* minecraft classes, as any, because obfuscation: */ any[];
                                getSuggestions(): _javatypes.java.util.List<_javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AutoCompleteSuggestion>;
                                
                            }
                            namespace AbstractRenderCodeCompiler {
                                interface static {
                                    new (language: string, screen: _javatypes.xyz.wagyourtail.jsmacros.client.gui.screens.EditorScreen): _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AbstractRenderCodeCompiler;
                                    
                                    
                                    
                                }
                            }
                        }
                    }
                
                    namespace screens {
                    
                        interface EditorScreen extends _javatypes.xyz.wagyourtail.wagyourgui.BaseScreen {
                            readonly history: _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.History;
                            readonly cursor: _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.SelectCursor;
                            blockFirst: boolean;
                            textRenderTime: number;
                            prevChar: number;
                            language: string;
                            codeCompiler: _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AbstractRenderCodeCompiler;
                            
                            getDefaultLanguage(): string;
                            setScroll(pages: number): void;
                            setLanguage(language: string): void;
                            init(): void;
                            copyToClipboard(): void;
                            pasteFromClipboard(): void;
                            cutToClipboard(): void;
                            keyPressed(keyCode: number, scanCode: number, modifiers: number): boolean;
                            scrollToCursor(): void;
                            save(): void;
                            needSave(): boolean;
                            mouseScrolled(mouseX: number, mouseY: number, amount: number): boolean;
                            render(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                            openParent(): void;
                            mouseClicked(mouseX: number, mouseY: number, btn: number): boolean;
                            selectWordAtCursor(): void;
                            mouseDragged(mouseX: number, mouseY: number, button: number, deltaX: number, deltaY: number): boolean;
                            updateSettings(): void;
                            charTyped(chr: number, keyCode: number): boolean;
                            
                        }
                        namespace EditorScreen {
                            interface static {
                                new (parent: /* minecraft classes, as any, because obfuscation: */ any, file: _javatypes.java.io.File): _javatypes.xyz.wagyourtail.jsmacros.client.gui.screens.EditorScreen;
                                
                                readonly langs: _javatypes.java.util.List<string>;
                                defaultStyle: /* minecraft classes, as any, because obfuscation: */ any;
                                
                                openAndScrollToIndex(file: _javatypes.java.io.File, startIndex: number, endIndex: number): void;
                                openAndScrollToLine(file: _javatypes.java.io.File, line: number, col: number, endCol: number): void;
                                
                            }
                        }
                    }
                }
            }
        }
    
        namespace wagyourgui {
        
            interface BaseScreen extends /* supressed minecraft class */ _javatypes.java.lang.Object, _javatypes.xyz.wagyourtail.wagyourgui.overlays.IOverlayParent {
                
                setParent(parent: /* minecraft classes, as any, because obfuscation: */ any): void;
                reload(): void;
                removed(): void;
                openOverlay(overlay: _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer): void;
                getFirstOverlayParent(): _javatypes.xyz.wagyourtail.wagyourgui.overlays.IOverlayParent;
                getChildOverlay(): _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer;
                openOverlay(overlay: _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer, disableButtons: boolean): void;
                closeOverlay(overlay: _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer): void;
                remove(btn: /* minecraft classes, as any, because obfuscation: */ any): void;
                addDrawableChild<T>(drawableElement: T): T;
                setFocused(focused: /* minecraft classes, as any, because obfuscation: */ any): void;
                keyPressed(keyCode: number, scanCode: number, modifiers: number): boolean;
                mouseScrolled(mouseX: number, mouseY: number, amount: number): boolean;
                mouseClicked(mouseX: number, mouseY: number, button: number): boolean;
                render(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                shouldCloseOnEsc(): boolean;
                updateSettings(): void;
                close(): void;
                openParent(): void;
                
            }
            namespace BaseScreen {
                interface static {
                    
                    
                    trimmed(textRenderer: /* minecraft classes, as any, because obfuscation: */ any, str: /* minecraft classes, as any, because obfuscation: */ any, width: number): /* minecraft classes, as any, because obfuscation: */ any;
                    
                }
            }
        
            namespace overlays {
            
                interface IOverlayParent extends _javatypes.java.lang.Interface, _javatypes.xyz.wagyourtail.wagyourgui.containers.IContainerParent {
                    
                    closeOverlay(overlay: _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer): void;
                    setFocused(focused: /* minecraft classes, as any, because obfuscation: */ any): void;
                    getChildOverlay(): _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer;
                    
                }
                namespace IOverlayParent {
                    interface static {
                        
                        
                        
                    }
                }
                interface OverlayContainer extends _javatypes.xyz.wagyourtail.wagyourgui.containers.MultiElementContainer<_javatypes.xyz.wagyourtail.wagyourgui.overlays.IOverlayParent>, _javatypes.xyz.wagyourtail.wagyourgui.overlays.IOverlayParent {
                    savedBtnStates: _javatypes.java.util.Map</* minecraft classes, as any, because obfuscation: */ any, boolean>;
                    scroll: _javatypes.xyz.wagyourtail.wagyourgui.elements.Scrollbar;
                    
                    remove(btn: /* minecraft classes, as any, because obfuscation: */ any): void;
                    openOverlay(overlay: _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer): void;
                    getFirstOverlayParent(): _javatypes.xyz.wagyourtail.wagyourgui.overlays.IOverlayParent;
                    openOverlay(overlay: _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer, disableButtons: boolean): void;
                    getChildOverlay(): _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer;
                    closeOverlay(overlay: _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer): void;
                    setFocused(focused: /* minecraft classes, as any, because obfuscation: */ any): void;
                    onClick(mouseX: number, mouseY: number, button: number): void;
                    
                    /**
                     * 
                     * @return true if should be handled by overlay
                     */
                    keyPressed(keyCode: number, scanCode: number, modifiers: number): boolean;
                    close(): void;
                    onClose(): void;
                    renderBackground(matrices: /* minecraft classes, as any, because obfuscation: */ any): void;
                    render(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                    
                }
                namespace OverlayContainer {
                    interface static {
                        new (x: number, y: number, width: number, height: number, textRenderer: /* minecraft classes, as any, because obfuscation: */ any, parent: _javatypes.xyz.wagyourtail.wagyourgui.overlays.IOverlayParent): _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer;
                        
                        
                        
                    }
                }
            }
        
            namespace containers {
            
                interface IContainerParent extends _javatypes.java.lang.Interface {
                    
                    addDrawableChild<T>(drawableElement: T): T;
                    remove(button: /* minecraft classes, as any, because obfuscation: */ any): void;
                    openOverlay(overlay: _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer): void;
                    openOverlay(overlay: _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer, disableButtons: boolean): void;
                    getFirstOverlayParent(): _javatypes.xyz.wagyourtail.wagyourgui.overlays.IOverlayParent;
                    
                }
                namespace IContainerParent {
                    interface static {
                        
                        
                        
                    }
                }
                interface MultiElementContainer<T> extends /* supressed minecraft class */ _javatypes.java.lang.Object, _javatypes.xyz.wagyourtail.wagyourgui.containers.IContainerParent {
                    readonly parent: T;
                    x: number;
                    y: number;
                    width: number;
                    height: number;
                    
                    init(): void;
                    getVisible(): boolean;
                    setVisible(visible: boolean): void;
                    addDrawableChild<T>(drawableElement: T): T;
                    getButtons(): _javatypes.java.util.List</* minecraft classes, as any, because obfuscation: */ any>;
                    setPos(x: number, y: number, width: number, height: number): void;
                    openOverlay(overlay: _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer): void;
                    openOverlay(overlay: _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer, disableButtons: boolean): void;
                    remove(button: /* minecraft classes, as any, because obfuscation: */ any): void;
                    getFirstOverlayParent(): _javatypes.xyz.wagyourtail.wagyourgui.overlays.IOverlayParent;
                    render(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                    
                }
                namespace MultiElementContainer {
                    interface static {
                        new <T>(x: number, y: number, width: number, height: number, textRenderer: /* minecraft classes, as any, because obfuscation: */ any, parent: T): _javatypes.xyz.wagyourtail.wagyourgui.containers.MultiElementContainer<T>;
                        
                        
                        
                    }
                }
            }
        
            namespace elements {
            
                interface Scrollbar extends /* supressed minecraft class */ _javatypes.java.lang.Object {
                    
                    setPos(x: number, y: number, width: number, height: number): _javatypes.xyz.wagyourtail.wagyourgui.elements.Scrollbar;
                    setScrollPages(scrollPages: number): void;
                    scrollToPercent(percent: number): void;
                    onClick(mouseX: number, mouseY: number): void;
                    onChange(): void;
                    mouseDragged(mouseX: number, mouseY: number, button: number, deltaX: number, deltaY: number): boolean;
                    render(matrices: /* minecraft classes, as any, because obfuscation: */ any, mouseX: number, mouseY: number, delta: number): void;
                    appendNarrations(builder: /* minecraft classes, as any, because obfuscation: */ any): void;
                    
                }
                namespace Scrollbar {
                    interface static {
                        new (x: number, y: number, width: number, height: number, color: number, borderColor: number, hilightColor: number, scrollPages: number, onChange: _javatypes.java.util._function.Consumer<number>): _javatypes.xyz.wagyourtail.wagyourgui.elements.Scrollbar;
                        
                        
                        
                    }
                }
            }
        }
    }

    namespace com {
    
    
        namespace mojang.brigadier {
        
            interface ImmutableStringReader extends _javatypes.java.lang.Interface {
                
                getString(): string;
                getRemainingLength(): number;
                getTotalLength(): number;
                getCursor(): number;
                getRead(): string;
                getRemaining(): string;
                canRead(arg0: number): boolean;
                canRead(): boolean;
                peek(): number;
                peek(arg0: number): number;
                
            }
            namespace ImmutableStringReader {
                interface static {
                    
                    
                    
                }
            }
            interface CommandDispatcher<S> extends _javatypes.java.lang.Object {
                
                register(arg0: _javatypes.com.mojang.brigadier.builder.LiteralArgumentBuilder<S>): _javatypes.com.mojang.brigadier.tree.LiteralCommandNode<S>;
                setConsumer(arg0: _javatypes.com.mojang.brigadier.ResultConsumer<S>): void;
                execute(arg0: string, arg1: S): number;
                execute(arg0: _javatypes.com.mojang.brigadier.StringReader, arg1: S): number;
                execute(arg0: _javatypes.com.mojang.brigadier.ParseResults<S>): number;
                parse(arg0: string, arg1: S): _javatypes.com.mojang.brigadier.ParseResults<S>;
                parse(arg0: _javatypes.com.mojang.brigadier.StringReader, arg1: S): _javatypes.com.mojang.brigadier.ParseResults<S>;
                getAllUsage(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg1: S, arg2: boolean): string[];
                getSmartUsage(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg1: S): _javatypes.java.util.Map<_javatypes.com.mojang.brigadier.tree.CommandNode<S>, string>;
                getCompletionSuggestions(arg0: _javatypes.com.mojang.brigadier.ParseResults<S>): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.com.mojang.brigadier.suggestion.Suggestions>;
                getCompletionSuggestions(arg0: _javatypes.com.mojang.brigadier.ParseResults<S>, arg1: number): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.com.mojang.brigadier.suggestion.Suggestions>;
                getRoot(): _javatypes.com.mojang.brigadier.tree.RootCommandNode<S>;
                getPath(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>): _javatypes.java.util.Collection<string>;
                findNode(arg0: _javatypes.java.util.Collection<string>): _javatypes.com.mojang.brigadier.tree.CommandNode<S>;
                findAmbiguities(arg0: _javatypes.com.mojang.brigadier.AmbiguityConsumer<S>): void;
                
            }
            namespace CommandDispatcher {
                interface static {
                    new <S>(arg0: _javatypes.com.mojang.brigadier.tree.RootCommandNode<S>): _javatypes.com.mojang.brigadier.CommandDispatcher<S>;
                    new <S>(): _javatypes.com.mojang.brigadier.CommandDispatcher<S>;
                    
                    readonly ARGUMENT_SEPARATOR: string;
                    readonly ARGUMENT_SEPARATOR_CHAR: number;
                    
                    
                }
            }
            interface StringReader extends _javatypes.java.lang.Object, _javatypes.com.mojang.brigadier.ImmutableStringReader {
                
                getString(): string;
                setCursor(arg0: number): void;
                getRemainingLength(): number;
                getTotalLength(): number;
                getCursor(): number;
                getRead(): string;
                getRemaining(): string;
                canRead(arg0: number): boolean;
                canRead(): boolean;
                peek(): number;
                peek(arg0: number): number;
                read(): number;
                skip(): void;
                skipWhitespace(): void;
                readInt(): number;
                readLong(): number;
                readDouble(): number;
                readFloat(): number;
                readUnquotedString(): string;
                readQuotedString(): string;
                readStringUntil(arg0: number): string;
                readString(): string;
                readBoolean(): boolean;
                expect(arg0: number): void;
                
            }
            namespace StringReader {
                interface static {
                    new (arg0: _javatypes.com.mojang.brigadier.StringReader): _javatypes.com.mojang.brigadier.StringReader;
                    new (arg0: string): _javatypes.com.mojang.brigadier.StringReader;
                    
                    
                    isAllowedNumber(arg0: number): boolean;
                    isQuotedStringStart(arg0: number): boolean;
                    isAllowedInUnquotedString(arg0: number): boolean;
                    
                }
            }
            interface RedirectModifier<S> extends _javatypes.java.lang.Interface {
                
                apply(arg0: _javatypes.com.mojang.brigadier.context.CommandContext<S>): _javatypes.java.util.Collection<S>;
                
            }
            namespace RedirectModifier {
                interface static {
                    
                    
                    
                }
            }
            interface Message extends _javatypes.java.lang.Interface {
                
                getString(): string;
                
            }
            namespace Message {
                interface static {
                    
                    
                    
                }
            }
            interface AmbiguityConsumer<S> extends _javatypes.java.lang.Interface {
                
                ambiguous(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg1: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg2: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg3: _javatypes.java.util.Collection<string>): void;
                
            }
            namespace AmbiguityConsumer {
                interface static {
                    
                    
                    
                }
            }
            interface Command<S> extends _javatypes.java.lang.Interface {
                
                run(arg0: _javatypes.com.mojang.brigadier.context.CommandContext<S>): number;
                
            }
            namespace Command {
                interface static {
                    
                    readonly SINGLE_SUCCESS: number;
                    
                    
                }
            }
            interface ResultConsumer<S> extends _javatypes.java.lang.Interface {
                
                onCommandComplete(arg0: _javatypes.com.mojang.brigadier.context.CommandContext<S>, arg1: boolean, arg2: number): void;
                
            }
            namespace ResultConsumer {
                interface static {
                    
                    
                    
                }
            }
            interface SingleRedirectModifier<S> extends _javatypes.java.lang.Interface {
                
                apply(arg0: _javatypes.com.mojang.brigadier.context.CommandContext<S>): S;
                
            }
            namespace SingleRedirectModifier {
                interface static {
                    
                    
                    
                }
            }
            interface ParseResults<S> extends _javatypes.java.lang.Object {
                
                getContext(): _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>;
                getReader(): _javatypes.com.mojang.brigadier.ImmutableStringReader;
                getExceptions(): _javatypes.java.util.Map<_javatypes.com.mojang.brigadier.tree.CommandNode<S>, _javatypes.com.mojang.brigadier.exceptions.CommandSyntaxException>;
                
            }
            namespace ParseResults {
                interface static {
                    new <S>(arg0: _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>, arg1: _javatypes.com.mojang.brigadier.ImmutableStringReader, arg2: _javatypes.java.util.Map<_javatypes.com.mojang.brigadier.tree.CommandNode<S>, _javatypes.com.mojang.brigadier.exceptions.CommandSyntaxException>): _javatypes.com.mojang.brigadier.ParseResults<S>;
                    new <S>(arg0: _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>): _javatypes.com.mojang.brigadier.ParseResults<S>;
                    
                    
                    
                }
            }
        
            namespace context {
            
                interface StringRange extends _javatypes.java.lang.Object {
                    
                    getStart(): number;
                    getEnd(): number;
                    get(arg0: _javatypes.com.mojang.brigadier.ImmutableStringReader): string;
                    get(arg0: string): string;
                    isEmpty(): boolean;
                    getLength(): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace StringRange {
                    interface static {
                        new (arg0: number, arg1: number): _javatypes.com.mojang.brigadier.context.StringRange;
                        
                        
                        at(arg0: number): _javatypes.com.mojang.brigadier.context.StringRange;
                        between(arg0: number, arg1: number): _javatypes.com.mojang.brigadier.context.StringRange;
                        encompassing(arg0: _javatypes.com.mojang.brigadier.context.StringRange, arg1: _javatypes.com.mojang.brigadier.context.StringRange): _javatypes.com.mojang.brigadier.context.StringRange;
                        
                    }
                }
                interface CommandContext<S> extends _javatypes.java.lang.Object {
                    
                    copyFor(arg0: S): _javatypes.com.mojang.brigadier.context.CommandContext<S>;
                    getChild(): _javatypes.com.mojang.brigadier.context.CommandContext<S>;
                    getLastChild(): _javatypes.com.mojang.brigadier.context.CommandContext<S>;
                    getCommand(): _javatypes.com.mojang.brigadier.Command<S>;
                    getSource(): S;
                    getArgument<V>(arg0: string, arg1: _javatypes.java.lang.Class<V>): V;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    getRedirectModifier(): _javatypes.com.mojang.brigadier.RedirectModifier<S>;
                    getRange(): _javatypes.com.mojang.brigadier.context.StringRange;
                    getInput(): string;
                    getRootNode(): _javatypes.com.mojang.brigadier.tree.CommandNode<S>;
                    getNodes(): _javatypes.java.util.List<_javatypes.com.mojang.brigadier.context.ParsedCommandNode<S>>;
                    hasNodes(): boolean;
                    isForked(): boolean;
                    
                }
                namespace CommandContext {
                    interface static {
                        new <S>(arg0: S, arg1: string, arg2: _javatypes.java.util.Map<string, _javatypes.com.mojang.brigadier.context.ParsedArgument<S, any>>, arg3: _javatypes.com.mojang.brigadier.Command<S>, arg4: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg5: _javatypes.java.util.List<_javatypes.com.mojang.brigadier.context.ParsedCommandNode<S>>, arg6: _javatypes.com.mojang.brigadier.context.StringRange, arg7: _javatypes.com.mojang.brigadier.context.CommandContext<S>, arg8: _javatypes.com.mojang.brigadier.RedirectModifier<S>, arg9: boolean): _javatypes.com.mojang.brigadier.context.CommandContext<S>;
                        
                        
                        
                    }
                }
                interface CommandContextBuilder<S> extends _javatypes.java.lang.Object {
                    
                    withSource(arg0: S): _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>;
                    getSource(): S;
                    getRootNode(): _javatypes.com.mojang.brigadier.tree.CommandNode<S>;
                    withArgument(arg0: string, arg1: _javatypes.com.mojang.brigadier.context.ParsedArgument<S, any>): _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>;
                    getArguments(): _javatypes.java.util.Map<string, _javatypes.com.mojang.brigadier.context.ParsedArgument<S, any>>;
                    withCommand(arg0: _javatypes.com.mojang.brigadier.Command<S>): _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>;
                    withNode(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg1: _javatypes.com.mojang.brigadier.context.StringRange): _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>;
                    copy(): _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>;
                    withChild(arg0: _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>): _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>;
                    getChild(): _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>;
                    getLastChild(): _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>;
                    getCommand(): _javatypes.com.mojang.brigadier.Command<S>;
                    getNodes(): _javatypes.java.util.List<_javatypes.com.mojang.brigadier.context.ParsedCommandNode<S>>;
                    build(arg0: string): _javatypes.com.mojang.brigadier.context.CommandContext<S>;
                    getDispatcher(): _javatypes.com.mojang.brigadier.CommandDispatcher<S>;
                    getRange(): _javatypes.com.mojang.brigadier.context.StringRange;
                    findSuggestionContext(arg0: number): _javatypes.com.mojang.brigadier.context.SuggestionContext<S>;
                    
                }
                namespace CommandContextBuilder {
                    interface static {
                        new <S>(arg0: _javatypes.com.mojang.brigadier.CommandDispatcher<S>, arg1: S, arg2: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg3: number): _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>;
                        
                        
                        
                    }
                }
                interface ParsedCommandNode<S> extends _javatypes.java.lang.Object {
                    
                    getNode(): _javatypes.com.mojang.brigadier.tree.CommandNode<S>;
                    getRange(): _javatypes.com.mojang.brigadier.context.StringRange;
                    toString(): string;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    
                }
                namespace ParsedCommandNode {
                    interface static {
                        new <S>(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg1: _javatypes.com.mojang.brigadier.context.StringRange): _javatypes.com.mojang.brigadier.context.ParsedCommandNode<S>;
                        
                        
                        
                    }
                }
                interface ParsedArgument<S, T> extends _javatypes.java.lang.Object {
                    
                    getRange(): _javatypes.com.mojang.brigadier.context.StringRange;
                    getResult(): T;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    
                }
                namespace ParsedArgument {
                    interface static {
                        new <S, T>(arg0: number, arg1: number, arg2: T): _javatypes.com.mojang.brigadier.context.ParsedArgument<S, T>;
                        
                        
                        
                    }
                }
                interface SuggestionContext<S> extends _javatypes.java.lang.Object {
                    readonly parent: _javatypes.com.mojang.brigadier.tree.CommandNode<S>;
                    readonly startPos: number;
                    
                    
                }
                namespace SuggestionContext {
                    interface static {
                        new <S>(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg1: number): _javatypes.com.mojang.brigadier.context.SuggestionContext<S>;
                        
                        
                        
                    }
                }
            }
        
            namespace tree {
            
                interface CommandNode<S> extends _javatypes.java.lang.Object, _javatypes.java.lang.Comparable<_javatypes.com.mojang.brigadier.tree.CommandNode<S>> {
                    
                    getCommand(): _javatypes.com.mojang.brigadier.Command<S>;
                    getChildren(): _javatypes.java.util.Collection<_javatypes.com.mojang.brigadier.tree.CommandNode<S>>;
                    getChild(arg0: string): _javatypes.com.mojang.brigadier.tree.CommandNode<S>;
                    getRedirect(): _javatypes.com.mojang.brigadier.tree.CommandNode<S>;
                    getRedirectModifier(): _javatypes.com.mojang.brigadier.RedirectModifier<S>;
                    canUse(arg0: S): boolean;
                    addChild(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>): void;
                    findAmbiguities(arg0: _javatypes.com.mojang.brigadier.AmbiguityConsumer<S>): void;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    getRequirement(): _javatypes.java.util._function.Predicate<S>;
                    getName(): string;
                    getUsageText(): string;
                    parse(arg0: _javatypes.com.mojang.brigadier.StringReader, arg1: _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>): void;
                    listSuggestions(arg0: _javatypes.com.mojang.brigadier.context.CommandContext<S>, arg1: _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.com.mojang.brigadier.suggestion.Suggestions>;
                    createBuilder(): _javatypes.com.mojang.brigadier.builder.ArgumentBuilder<S, any>;
                    getRelevantNodes(arg0: _javatypes.com.mojang.brigadier.StringReader): _javatypes.java.util.Collection<any>;
                    compareTo(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>): number;
                    isFork(): boolean;
                    getExamples(): _javatypes.java.util.Collection<string>;
                    
                }
                namespace CommandNode {
                    interface static {
                        
                        
                        
                    }
                }
                interface RootCommandNode<S> extends _javatypes.com.mojang.brigadier.tree.CommandNode<S> {
                    
                    getName(): string;
                    getUsageText(): string;
                    parse(arg0: _javatypes.com.mojang.brigadier.StringReader, arg1: _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>): void;
                    listSuggestions(arg0: _javatypes.com.mojang.brigadier.context.CommandContext<S>, arg1: _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.com.mojang.brigadier.suggestion.Suggestions>;
                    isValidInput(arg0: string): boolean;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    createBuilder(): _javatypes.com.mojang.brigadier.builder.ArgumentBuilder<S, any>;
                    getExamples(): _javatypes.java.util.Collection<string>;
                    toString(): string;
                    
                }
                namespace RootCommandNode {
                    interface static {
                        new <S>(): _javatypes.com.mojang.brigadier.tree.RootCommandNode<S>;
                        
                        
                        
                    }
                }
                interface LiteralCommandNode<S> extends _javatypes.com.mojang.brigadier.tree.CommandNode<S> {
                    
                    getLiteral(): string;
                    getName(): string;
                    parse(arg0: _javatypes.com.mojang.brigadier.StringReader, arg1: _javatypes.com.mojang.brigadier.context.CommandContextBuilder<S>): void;
                    listSuggestions(arg0: _javatypes.com.mojang.brigadier.context.CommandContext<S>, arg1: _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.com.mojang.brigadier.suggestion.Suggestions>;
                    isValidInput(arg0: string): boolean;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    getUsageText(): string;
                    hashCode(): number;
                    createBuilder(): _javatypes.com.mojang.brigadier.builder.LiteralArgumentBuilder<S>;
                    getExamples(): _javatypes.java.util.Collection<string>;
                    toString(): string;
                    
                }
                namespace LiteralCommandNode {
                    interface static {
                        new <S>(arg0: string, arg1: _javatypes.com.mojang.brigadier.Command<S>, arg2: _javatypes.java.util._function.Predicate<S>, arg3: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg4: _javatypes.com.mojang.brigadier.RedirectModifier<S>, arg5: boolean): _javatypes.com.mojang.brigadier.tree.LiteralCommandNode<S>;
                        
                        
                        
                    }
                }
            }
        
            namespace suggestion {
            
                interface Suggestions extends _javatypes.java.lang.Object {
                    
                    getRange(): _javatypes.com.mojang.brigadier.context.StringRange;
                    getList(): _javatypes.java.util.List<_javatypes.com.mojang.brigadier.suggestion.Suggestion>;
                    isEmpty(): boolean;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace Suggestions {
                    interface static {
                        new (arg0: _javatypes.com.mojang.brigadier.context.StringRange, arg1: _javatypes.java.util.List<_javatypes.com.mojang.brigadier.suggestion.Suggestion>): _javatypes.com.mojang.brigadier.suggestion.Suggestions;
                        
                        
                        empty(): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.com.mojang.brigadier.suggestion.Suggestions>;
                        merge(arg0: string, arg1: _javatypes.java.util.Collection<_javatypes.com.mojang.brigadier.suggestion.Suggestions>): _javatypes.com.mojang.brigadier.suggestion.Suggestions;
                        create(arg0: string, arg1: _javatypes.java.util.Collection<_javatypes.com.mojang.brigadier.suggestion.Suggestion>): _javatypes.com.mojang.brigadier.suggestion.Suggestions;
                        
                    }
                }
                interface SuggestionsBuilder extends _javatypes.java.lang.Object {
                    
                    getInput(): string;
                    getStart(): number;
                    getRemaining(): string;
                    getRemainingLowerCase(): string;
                    build(): _javatypes.com.mojang.brigadier.suggestion.Suggestions;
                    buildFuture(): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.com.mojang.brigadier.suggestion.Suggestions>;
                    suggest(arg0: string): _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder;
                    suggest(arg0: string, arg1: _javatypes.com.mojang.brigadier.Message): _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder;
                    suggest(arg0: number): _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder;
                    suggest(arg0: number, arg1: _javatypes.com.mojang.brigadier.Message): _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder;
                    add(arg0: _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder): _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder;
                    createOffset(arg0: number): _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder;
                    restart(): _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder;
                    
                }
                namespace SuggestionsBuilder {
                    interface static {
                        new (arg0: string, arg1: string, arg2: number): _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder;
                        new (arg0: string, arg1: number): _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder;
                        
                        
                        
                    }
                }
                interface Suggestion extends _javatypes.java.lang.Object, _javatypes.java.lang.Comparable<_javatypes.com.mojang.brigadier.suggestion.Suggestion> {
                    
                    getRange(): _javatypes.com.mojang.brigadier.context.StringRange;
                    getText(): string;
                    getTooltip(): _javatypes.com.mojang.brigadier.Message;
                    apply(arg0: string): string;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    compareTo(arg0: _javatypes.com.mojang.brigadier.suggestion.Suggestion): number;
                    compareToIgnoreCase(arg0: _javatypes.com.mojang.brigadier.suggestion.Suggestion): number;
                    expand(arg0: string, arg1: _javatypes.com.mojang.brigadier.context.StringRange): _javatypes.com.mojang.brigadier.suggestion.Suggestion;
                    
                }
                namespace Suggestion {
                    interface static {
                        new (arg0: _javatypes.com.mojang.brigadier.context.StringRange, arg1: string): _javatypes.com.mojang.brigadier.suggestion.Suggestion;
                        new (arg0: _javatypes.com.mojang.brigadier.context.StringRange, arg1: string, arg2: _javatypes.com.mojang.brigadier.Message): _javatypes.com.mojang.brigadier.suggestion.Suggestion;
                        
                        
                        
                    }
                }
            }
        
            namespace builder {
            
                interface ArgumentBuilder<S, T> extends _javatypes.java.lang.Object {
                    
                    then(arg0: _javatypes.com.mojang.brigadier.builder.ArgumentBuilder<S, any>): T;
                    then(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>): T;
                    getArguments(): _javatypes.java.util.Collection<_javatypes.com.mojang.brigadier.tree.CommandNode<S>>;
                    executes(arg0: _javatypes.com.mojang.brigadier.Command<S>): T;
                    getCommand(): _javatypes.com.mojang.brigadier.Command<S>;
                    requires(arg0: _javatypes.java.util._function.Predicate<S>): T;
                    getRequirement(): _javatypes.java.util._function.Predicate<S>;
                    redirect(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>): T;
                    redirect(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg1: _javatypes.com.mojang.brigadier.SingleRedirectModifier<S>): T;
                    fork(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg1: _javatypes.com.mojang.brigadier.RedirectModifier<S>): T;
                    forward(arg0: _javatypes.com.mojang.brigadier.tree.CommandNode<S>, arg1: _javatypes.com.mojang.brigadier.RedirectModifier<S>, arg2: boolean): T;
                    getRedirect(): _javatypes.com.mojang.brigadier.tree.CommandNode<S>;
                    getRedirectModifier(): _javatypes.com.mojang.brigadier.RedirectModifier<S>;
                    isFork(): boolean;
                    build(): _javatypes.com.mojang.brigadier.tree.CommandNode<S>;
                    
                }
                namespace ArgumentBuilder {
                    interface static {
                        new <S, T>(): _javatypes.com.mojang.brigadier.builder.ArgumentBuilder<S, T>;
                        
                        
                        
                    }
                }
                interface LiteralArgumentBuilder<S> extends _javatypes.com.mojang.brigadier.builder.ArgumentBuilder<S, _javatypes.com.mojang.brigadier.builder.LiteralArgumentBuilder<S>> {
                    
                    getLiteral(): string;
                    build(): _javatypes.com.mojang.brigadier.tree.LiteralCommandNode<S>;
                    
                }
                namespace LiteralArgumentBuilder {
                    interface static {
                        
                        
                        literal<S>(arg0: string): _javatypes.com.mojang.brigadier.builder.LiteralArgumentBuilder<S>;
                        
                    }
                }
            }
        
            namespace exceptions {
            
                interface CommandSyntaxException extends _javatypes.java.lang.Exception {
                    
                    getMessage(): string;
                    getRawMessage(): _javatypes.com.mojang.brigadier.Message;
                    getContext(): string;
                    getType(): _javatypes.com.mojang.brigadier.exceptions.CommandExceptionType;
                    getInput(): string;
                    getCursor(): number;
                    
                }
                namespace CommandSyntaxException {
                    interface static {
                        new (arg0: _javatypes.com.mojang.brigadier.exceptions.CommandExceptionType, arg1: _javatypes.com.mojang.brigadier.Message): _javatypes.com.mojang.brigadier.exceptions.CommandSyntaxException;
                        new (arg0: _javatypes.com.mojang.brigadier.exceptions.CommandExceptionType, arg1: _javatypes.com.mojang.brigadier.Message, arg2: string, arg3: number): _javatypes.com.mojang.brigadier.exceptions.CommandSyntaxException;
                        
                        readonly CONTEXT_AMOUNT: number;
                        ENABLE_COMMAND_STACK_TRACES: boolean;
                        BUILT_IN_EXCEPTIONS: _javatypes.com.mojang.brigadier.exceptions.BuiltInExceptionProvider;
                        
                        
                    }
                }
                interface BuiltInExceptionProvider extends _javatypes.java.lang.Interface {
                    
                    doubleTooLow(): _javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
                    doubleTooHigh(): _javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
                    floatTooLow(): _javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
                    floatTooHigh(): _javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
                    integerTooLow(): _javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
                    integerTooHigh(): _javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
                    longTooLow(): _javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
                    longTooHigh(): _javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
                    literalIncorrect(): _javatypes.com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
                    readerExpectedStartOfQuote(): _javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
                    readerExpectedEndOfQuote(): _javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
                    readerInvalidEscape(): _javatypes.com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
                    readerInvalidBool(): _javatypes.com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
                    readerInvalidInt(): _javatypes.com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
                    readerExpectedInt(): _javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
                    readerInvalidLong(): _javatypes.com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
                    readerExpectedLong(): _javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
                    readerInvalidDouble(): _javatypes.com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
                    readerExpectedDouble(): _javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
                    readerInvalidFloat(): _javatypes.com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
                    readerExpectedFloat(): _javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
                    readerExpectedBool(): _javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
                    readerExpectedSymbol(): _javatypes.com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
                    dispatcherUnknownCommand(): _javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
                    dispatcherUnknownArgument(): _javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
                    dispatcherExpectedArgumentSeparator(): _javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
                    dispatcherParseException(): _javatypes.com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
                    
                }
                namespace BuiltInExceptionProvider {
                    interface static {
                        
                        
                        
                    }
                }
                interface CommandExceptionType extends _javatypes.java.lang.Interface {
                    
                    
                }
                namespace CommandExceptionType {
                    interface static {
                        
                        
                        
                    }
                }
                interface SimpleCommandExceptionType extends _javatypes.java.lang.Object, _javatypes.com.mojang.brigadier.exceptions.CommandExceptionType {
                    
                    create(): _javatypes.com.mojang.brigadier.exceptions.CommandSyntaxException;
                    createWithContext(arg0: _javatypes.com.mojang.brigadier.ImmutableStringReader): _javatypes.com.mojang.brigadier.exceptions.CommandSyntaxException;
                    toString(): string;
                    
                }
                namespace SimpleCommandExceptionType {
                    interface static {
                        new (arg0: _javatypes.com.mojang.brigadier.Message): _javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
                        
                        
                        
                    }
                }
                interface Dynamic2CommandExceptionType extends _javatypes.java.lang.Object, _javatypes.com.mojang.brigadier.exceptions.CommandExceptionType {
                    
                    create(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): _javatypes.com.mojang.brigadier.exceptions.CommandSyntaxException;
                    createWithContext(arg0: _javatypes.com.mojang.brigadier.ImmutableStringReader, arg1: _javatypes.java.lang.Object, arg2: _javatypes.java.lang.Object): _javatypes.com.mojang.brigadier.exceptions.CommandSyntaxException;
                    
                }
                namespace Dynamic2CommandExceptionType {
                    interface static {
                        new (arg0: _javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType$Function): _javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
                        
                        
                        
                    }
                }
                interface DynamicCommandExceptionType extends _javatypes.java.lang.Object, _javatypes.com.mojang.brigadier.exceptions.CommandExceptionType {
                    
                    create(arg0: _javatypes.java.lang.Object): _javatypes.com.mojang.brigadier.exceptions.CommandSyntaxException;
                    createWithContext(arg0: _javatypes.com.mojang.brigadier.ImmutableStringReader, arg1: _javatypes.java.lang.Object): _javatypes.com.mojang.brigadier.exceptions.CommandSyntaxException;
                    
                }
                namespace DynamicCommandExceptionType {
                    interface static {
                        new (arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Object, _javatypes.com.mojang.brigadier.Message>): _javatypes.com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
                        
                        
                        
                    }
                }
                interface Dynamic2CommandExceptionType$Function extends _javatypes.java.lang.Interface {
                    
                    apply(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): _javatypes.com.mojang.brigadier.Message;
                    
                }
                namespace Dynamic2CommandExceptionType$Function {
                    interface static {
                        
                        
                        
                    }
                }
            }
        }
    
        namespace google.gson {
        
            interface JsonObject extends _javatypes.com.google.gson.JsonElement {
                
                deepCopy(): _javatypes.com.google.gson.JsonObject;
                add(arg0: string, arg1: _javatypes.com.google.gson.JsonElement): void;
                remove(arg0: string): _javatypes.com.google.gson.JsonElement;
                addProperty(arg0: string, arg1: string): void;
                addProperty(arg0: string, arg1: _javatypes.java.lang.Number): void;
                addProperty(arg0: string, arg1: boolean): void;
                addProperty(arg0: string, arg1: number): void;
                entrySet(): _javatypes.java.util.Set<_javatypes.java.util.Map$Entry<string, _javatypes.com.google.gson.JsonElement>>;
                keySet(): _javatypes.java.util.Set<string>;
                size(): number;
                has(arg0: string): boolean;
                get(arg0: string): _javatypes.com.google.gson.JsonElement;
                getAsJsonPrimitive(arg0: string): _javatypes.com.google.gson.JsonPrimitive;
                getAsJsonArray(arg0: string): _javatypes.com.google.gson.JsonArray;
                getAsJsonObject(arg0: string): _javatypes.com.google.gson.JsonObject;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                
            }
            namespace JsonObject {
                interface static {
                    new (): _javatypes.com.google.gson.JsonObject;
                    
                    
                    
                }
            }
            interface JsonArray extends _javatypes.com.google.gson.JsonElement, _javatypes.java.lang.Iterable<_javatypes.com.google.gson.JsonElement> {
                
                deepCopy(): _javatypes.com.google.gson.JsonArray;
                add(arg0: boolean): void;
                add(arg0: number): void;
                add(arg0: _javatypes.java.lang.Number): void;
                add(arg0: string): void;
                add(arg0: _javatypes.com.google.gson.JsonElement): void;
                addAll(arg0: _javatypes.com.google.gson.JsonArray): void;
                set(arg0: number, arg1: _javatypes.com.google.gson.JsonElement): _javatypes.com.google.gson.JsonElement;
                remove(arg0: _javatypes.com.google.gson.JsonElement): boolean;
                remove(arg0: number): _javatypes.com.google.gson.JsonElement;
                contains(arg0: _javatypes.com.google.gson.JsonElement): boolean;
                size(): number;
                isEmpty(): boolean;
                iterator(): _javatypes.java.util.Iterator<_javatypes.com.google.gson.JsonElement>;
                get(arg0: number): _javatypes.com.google.gson.JsonElement;
                getAsNumber(): _javatypes.java.lang.Number;
                getAsString(): string;
                getAsDouble(): number;
                getAsBigDecimal(): _javatypes.java.math.BigDecimal;
                getAsBigInteger(): _javatypes.java.math.BigInteger;
                getAsFloat(): number;
                getAsLong(): number;
                getAsInt(): number;
                getAsByte(): number;
                getAsCharacter(): number;
                getAsShort(): number;
                getAsBoolean(): boolean;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                
            }
            namespace JsonArray {
                interface static {
                    new (): _javatypes.com.google.gson.JsonArray;
                    new (arg0: number): _javatypes.com.google.gson.JsonArray;
                    
                    
                    
                }
            }
            interface JsonPrimitive extends _javatypes.com.google.gson.JsonElement {
                
                deepCopy(): _javatypes.com.google.gson.JsonPrimitive;
                isBoolean(): boolean;
                getAsBoolean(): boolean;
                isNumber(): boolean;
                getAsNumber(): _javatypes.java.lang.Number;
                isString(): boolean;
                getAsString(): string;
                getAsDouble(): number;
                getAsBigDecimal(): _javatypes.java.math.BigDecimal;
                getAsBigInteger(): _javatypes.java.math.BigInteger;
                getAsFloat(): number;
                getAsLong(): number;
                getAsShort(): number;
                getAsInt(): number;
                getAsByte(): number;
                getAsCharacter(): number;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                
            }
            namespace JsonPrimitive {
                interface static {
                    new (arg0: boolean): _javatypes.com.google.gson.JsonPrimitive;
                    new (arg0: _javatypes.java.lang.Number): _javatypes.com.google.gson.JsonPrimitive;
                    new (arg0: string): _javatypes.com.google.gson.JsonPrimitive;
                    new (arg0: number): _javatypes.com.google.gson.JsonPrimitive;
                    
                    
                    
                }
            }
            interface JsonElement extends _javatypes.java.lang.Object {
                
                deepCopy(): _javatypes.com.google.gson.JsonElement;
                isJsonArray(): boolean;
                isJsonObject(): boolean;
                isJsonPrimitive(): boolean;
                isJsonNull(): boolean;
                getAsJsonObject(): _javatypes.com.google.gson.JsonObject;
                getAsJsonArray(): _javatypes.com.google.gson.JsonArray;
                getAsJsonPrimitive(): _javatypes.com.google.gson.JsonPrimitive;
                getAsJsonNull(): _javatypes.com.google.gson.JsonNull;
                getAsBoolean(): boolean;
                getAsNumber(): _javatypes.java.lang.Number;
                getAsString(): string;
                getAsDouble(): number;
                getAsFloat(): number;
                getAsLong(): number;
                getAsInt(): number;
                getAsByte(): number;
                getAsCharacter(): number;
                getAsBigDecimal(): _javatypes.java.math.BigDecimal;
                getAsBigInteger(): _javatypes.java.math.BigInteger;
                getAsShort(): number;
                toString(): string;
                
            }
            namespace JsonElement {
                interface static {
                    new (): _javatypes.com.google.gson.JsonElement;
                    
                    
                    
                }
            }
            interface JsonNull extends _javatypes.com.google.gson.JsonElement {
                
                deepCopy(): _javatypes.com.google.gson.JsonNull;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                
            }
            namespace JsonNull {
                interface static {
                    new (): _javatypes.com.google.gson.JsonNull;
                    
                    readonly INSTANCE: _javatypes.com.google.gson.JsonNull;
                    
                    
                }
            }
        }
    
        namespace neovisionaries.ws.client {
        
            interface WebSocketException extends _javatypes.java.lang.Exception {
                
                getError(): _javatypes.com.neovisionaries.ws.client.WebSocketError;
                
            }
            namespace WebSocketException {
                interface static {
                    new (arg0: _javatypes.com.neovisionaries.ws.client.WebSocketError): _javatypes.com.neovisionaries.ws.client.WebSocketException;
                    new (arg0: _javatypes.com.neovisionaries.ws.client.WebSocketError, arg1: string): _javatypes.com.neovisionaries.ws.client.WebSocketException;
                    new (arg0: _javatypes.com.neovisionaries.ws.client.WebSocketError, arg1: _javatypes.java.lang.Throwable): _javatypes.com.neovisionaries.ws.client.WebSocketException;
                    new (arg0: _javatypes.com.neovisionaries.ws.client.WebSocketError, arg1: string, arg2: _javatypes.java.lang.Throwable): _javatypes.com.neovisionaries.ws.client.WebSocketException;
                    
                    
                    
                }
            }
            interface WebSocket extends _javatypes.java.lang.Object {
                
                recreate(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                recreate(arg0: number): _javatypes.com.neovisionaries.ws.client.WebSocket;
                getState(): _javatypes.com.neovisionaries.ws.client.WebSocketState;
                isOpen(): boolean;
                addProtocol(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                removeProtocol(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                clearProtocols(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                addExtension(arg0: _javatypes.com.neovisionaries.ws.client.WebSocketExtension): _javatypes.com.neovisionaries.ws.client.WebSocket;
                addExtension(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                removeExtension(arg0: _javatypes.com.neovisionaries.ws.client.WebSocketExtension): _javatypes.com.neovisionaries.ws.client.WebSocket;
                removeExtensions(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                clearExtensions(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                addHeader(arg0: string, arg1: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                removeHeaders(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                clearHeaders(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                setUserInfo(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                setUserInfo(arg0: string, arg1: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                clearUserInfo(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                isExtended(): boolean;
                setExtended(arg0: boolean): _javatypes.com.neovisionaries.ws.client.WebSocket;
                isAutoFlush(): boolean;
                setAutoFlush(arg0: boolean): _javatypes.com.neovisionaries.ws.client.WebSocket;
                isMissingCloseFrameAllowed(): boolean;
                setMissingCloseFrameAllowed(arg0: boolean): _javatypes.com.neovisionaries.ws.client.WebSocket;
                isDirectTextMessage(): boolean;
                setDirectTextMessage(arg0: boolean): _javatypes.com.neovisionaries.ws.client.WebSocket;
                flush(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                getFrameQueueSize(): number;
                setFrameQueueSize(arg0: number): _javatypes.com.neovisionaries.ws.client.WebSocket;
                getMaxPayloadSize(): number;
                setMaxPayloadSize(arg0: number): _javatypes.com.neovisionaries.ws.client.WebSocket;
                getPingInterval(): number;
                setPingInterval(arg0: number): _javatypes.com.neovisionaries.ws.client.WebSocket;
                getPongInterval(): number;
                setPongInterval(arg0: number): _javatypes.com.neovisionaries.ws.client.WebSocket;
                getPingPayloadGenerator(): _javatypes.com.neovisionaries.ws.client.PayloadGenerator;
                setPingPayloadGenerator(arg0: _javatypes.com.neovisionaries.ws.client.PayloadGenerator): _javatypes.com.neovisionaries.ws.client.WebSocket;
                getPongPayloadGenerator(): _javatypes.com.neovisionaries.ws.client.PayloadGenerator;
                setPongPayloadGenerator(arg0: _javatypes.com.neovisionaries.ws.client.PayloadGenerator): _javatypes.com.neovisionaries.ws.client.WebSocket;
                getPingSenderName(): string;
                setPingSenderName(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                getPongSenderName(): string;
                setPongSenderName(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                addListener(arg0: _javatypes.com.neovisionaries.ws.client.WebSocketListener): _javatypes.com.neovisionaries.ws.client.WebSocket;
                addListeners(arg0: _javatypes.java.util.List<_javatypes.com.neovisionaries.ws.client.WebSocketListener>): _javatypes.com.neovisionaries.ws.client.WebSocket;
                removeListener(arg0: _javatypes.com.neovisionaries.ws.client.WebSocketListener): _javatypes.com.neovisionaries.ws.client.WebSocket;
                removeListeners(arg0: _javatypes.java.util.List<_javatypes.com.neovisionaries.ws.client.WebSocketListener>): _javatypes.com.neovisionaries.ws.client.WebSocket;
                clearListeners(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                getSocket(): _javatypes.java.net.Socket;
                getConnectedSocket(): _javatypes.java.net.Socket;
                getURI(): _javatypes.java.net.URI;
                connect(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                connect(arg0: _javatypes.java.util.concurrent.ExecutorService): _javatypes.java.util.concurrent.Future<_javatypes.com.neovisionaries.ws.client.WebSocket>;
                connectable(): _javatypes.java.util.concurrent.Callable<_javatypes.com.neovisionaries.ws.client.WebSocket>;
                connectAsynchronously(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                disconnect(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                disconnect(arg0: number): _javatypes.com.neovisionaries.ws.client.WebSocket;
                disconnect(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                disconnect(arg0: number, arg1: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                disconnect(arg0: number, arg1: string, arg2: number): _javatypes.com.neovisionaries.ws.client.WebSocket;
                getAgreedExtensions(): _javatypes.java.util.List<_javatypes.com.neovisionaries.ws.client.WebSocketExtension>;
                getAgreedProtocol(): string;
                sendFrame(arg0: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendContinuation(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendContinuation(arg0: boolean): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendContinuation(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendContinuation(arg0: string, arg1: boolean): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendContinuation(arg0: number[]): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendContinuation(arg0: number[], arg1: boolean): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendText(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendText(arg0: string, arg1: boolean): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendBinary(arg0: number[]): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendBinary(arg0: number[], arg1: boolean): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendClose(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendClose(arg0: number): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendClose(arg0: number, arg1: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendPing(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendPing(arg0: number[]): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendPing(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendPong(): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendPong(arg0: number[]): _javatypes.com.neovisionaries.ws.client.WebSocket;
                sendPong(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocket;
                
            }
            namespace WebSocket {
                interface static {
                    
                    
                    
                }
            }
            interface WebSocketFrame extends _javatypes.java.lang.Object {
                
                getFin(): boolean;
                setFin(arg0: boolean): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                getRsv1(): boolean;
                setRsv1(arg0: boolean): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                getRsv2(): boolean;
                setRsv2(arg0: boolean): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                getRsv3(): boolean;
                setRsv3(arg0: boolean): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                getOpcode(): number;
                setOpcode(arg0: number): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                isContinuationFrame(): boolean;
                isTextFrame(): boolean;
                isBinaryFrame(): boolean;
                isCloseFrame(): boolean;
                isPingFrame(): boolean;
                isPongFrame(): boolean;
                isDataFrame(): boolean;
                isControlFrame(): boolean;
                hasPayload(): boolean;
                getPayloadLength(): number;
                getPayload(): number[];
                getPayloadText(): string;
                setPayload(arg0: number[]): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                setPayload(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                setCloseFramePayload(arg0: number, arg1: string): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                getCloseCode(): number;
                getCloseReason(): string;
                toString(): string;
                
            }
            namespace WebSocketFrame {
                interface static {
                    new (): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    
                    
                    createContinuationFrame(): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createContinuationFrame(arg0: number[]): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createContinuationFrame(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createTextFrame(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createBinaryFrame(arg0: number[]): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createCloseFrame(): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createCloseFrame(arg0: number): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createCloseFrame(arg0: number, arg1: string): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createPingFrame(): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createPingFrame(arg0: number[]): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createPingFrame(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createPongFrame(): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createPongFrame(arg0: number[]): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    createPongFrame(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocketFrame;
                    
                }
            }
            interface WebSocketListener extends _javatypes.java.lang.Interface {
                
                onStateChanged(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketState): void;
                onConnected(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.java.util.Map<string, _javatypes.java.util.List<string>>): void;
                onConnectError(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketException): void;
                onDisconnected(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketFrame, arg2: _javatypes.com.neovisionaries.ws.client.WebSocketFrame, arg3: boolean): void;
                onFrame(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): void;
                onContinuationFrame(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): void;
                onTextFrame(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): void;
                onBinaryFrame(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): void;
                onCloseFrame(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): void;
                onPingFrame(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): void;
                onPongFrame(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): void;
                onTextMessage(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: string): void;
                onTextMessage(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: number[]): void;
                onBinaryMessage(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: number[]): void;
                onSendingFrame(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): void;
                onFrameSent(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): void;
                onFrameUnsent(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): void;
                onThreadCreated(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.ThreadType, arg2: _javatypes.java.lang.Thread): void;
                onThreadStarted(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.ThreadType, arg2: _javatypes.java.lang.Thread): void;
                onThreadStopping(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.ThreadType, arg2: _javatypes.java.lang.Thread): void;
                onError(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketException): void;
                onFrameError(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketException, arg2: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): void;
                onMessageError(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketException, arg2: _javatypes.java.util.List<_javatypes.com.neovisionaries.ws.client.WebSocketFrame>): void;
                onMessageDecompressionError(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketException, arg2: number[]): void;
                onTextMessageError(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketException, arg2: number[]): void;
                onSendError(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketException, arg2: _javatypes.com.neovisionaries.ws.client.WebSocketFrame): void;
                onUnexpectedError(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.com.neovisionaries.ws.client.WebSocketException): void;
                handleCallbackError(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: _javatypes.java.lang.Throwable): void;
                onSendingHandshake(arg0: _javatypes.com.neovisionaries.ws.client.WebSocket, arg1: string, arg2: _javatypes.java.util.List<string[]>): void;
                
            }
            namespace WebSocketListener {
                interface static {
                    
                    
                    
                }
            }
            interface WebSocketExtension extends _javatypes.java.lang.Object {
                
                getName(): string;
                getParameters(): _javatypes.java.util.Map<string, string>;
                containsParameter(arg0: string): boolean;
                getParameter(arg0: string): string;
                setParameter(arg0: string, arg1: string): _javatypes.com.neovisionaries.ws.client.WebSocketExtension;
                toString(): string;
                
            }
            namespace WebSocketExtension {
                interface static {
                    new (arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocketExtension;
                    new (arg0: _javatypes.com.neovisionaries.ws.client.WebSocketExtension): _javatypes.com.neovisionaries.ws.client.WebSocketExtension;
                    
                    readonly PERMESSAGE_DEFLATE: string;
                    
                    parse(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocketExtension;
                    
                }
            }
            interface PayloadGenerator extends _javatypes.java.lang.Interface {
                
                generate(): number[];
                
            }
            namespace PayloadGenerator {
                interface static {
                    
                    
                    
                }
            }
            interface WebSocketError extends _javatypes.java.lang.Enum<_javatypes.com.neovisionaries.ws.client.WebSocketError> {
                
                
            }
            namespace WebSocketError {
                interface static {
                    
                    readonly NOT_IN_CREATED_STATE: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly SOCKET_INPUT_STREAM_FAILURE: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly SOCKET_OUTPUT_STREAM_FAILURE: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly OPENING_HAHDSHAKE_REQUEST_FAILURE: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly OPENING_HANDSHAKE_RESPONSE_FAILURE: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly STATUS_LINE_EMPTY: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly STATUS_LINE_BAD_FORMAT: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly NOT_SWITCHING_PROTOCOLS: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly HTTP_HEADER_FAILURE: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly NO_UPGRADE_HEADER: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly NO_WEBSOCKET_IN_UPGRADE_HEADER: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly NO_CONNECTION_HEADER: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly NO_UPGRADE_IN_CONNECTION_HEADER: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly NO_SEC_WEBSOCKET_ACCEPT_HEADER: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly UNEXPECTED_SEC_WEBSOCKET_ACCEPT_HEADER: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly EXTENSION_PARSE_ERROR: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly UNSUPPORTED_EXTENSION: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly EXTENSIONS_CONFLICT: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly UNSUPPORTED_PROTOCOL: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly INSUFFICENT_DATA: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly INVALID_PAYLOAD_LENGTH: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly TOO_LONG_PAYLOAD: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly INSUFFICIENT_MEMORY_FOR_PAYLOAD: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly INTERRUPTED_IN_READING: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly IO_ERROR_IN_READING: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly IO_ERROR_IN_WRITING: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly FLUSH_ERROR: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly NON_ZERO_RESERVED_BITS: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly UNEXPECTED_RESERVED_BIT: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly FRAME_MASKED: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly UNKNOWN_OPCODE: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly FRAGMENTED_CONTROL_FRAME: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly UNEXPECTED_CONTINUATION_FRAME: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly CONTINUATION_NOT_CLOSED: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly TOO_LONG_CONTROL_FRAME_PAYLOAD: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly MESSAGE_CONSTRUCTION_ERROR: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly TEXT_MESSAGE_CONSTRUCTION_ERROR: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly UNEXPECTED_ERROR_IN_READING_THREAD: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly UNEXPECTED_ERROR_IN_WRITING_THREAD: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly PERMESSAGE_DEFLATE_UNSUPPORTED_PARAMETER: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly PERMESSAGE_DEFLATE_INVALID_MAX_WINDOW_BITS: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly COMPRESSION_ERROR: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly DECOMPRESSION_ERROR: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly SOCKET_CONNECT_ERROR: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly PROXY_HANDSHAKE_ERROR: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly SOCKET_OVERLAY_ERROR: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly SSL_HANDSHAKE_ERROR: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly NO_MORE_FRAME: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    readonly HOSTNAME_UNVERIFIED: _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    
                    values(): _javatypes.com.neovisionaries.ws.client.WebSocketError[];
                    valueOf(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocketError;
                    
                }
            }
            interface WebSocketState extends _javatypes.java.lang.Enum<_javatypes.com.neovisionaries.ws.client.WebSocketState> {
                
                
            }
            namespace WebSocketState {
                interface static {
                    
                    readonly CREATED: _javatypes.com.neovisionaries.ws.client.WebSocketState;
                    readonly CONNECTING: _javatypes.com.neovisionaries.ws.client.WebSocketState;
                    readonly OPEN: _javatypes.com.neovisionaries.ws.client.WebSocketState;
                    readonly CLOSING: _javatypes.com.neovisionaries.ws.client.WebSocketState;
                    readonly CLOSED: _javatypes.com.neovisionaries.ws.client.WebSocketState;
                    
                    values(): _javatypes.com.neovisionaries.ws.client.WebSocketState[];
                    valueOf(arg0: string): _javatypes.com.neovisionaries.ws.client.WebSocketState;
                    
                }
            }
            interface ThreadType extends _javatypes.java.lang.Enum<_javatypes.com.neovisionaries.ws.client.ThreadType> {
                
                
            }
            namespace ThreadType {
                interface static {
                    
                    readonly READING_THREAD: _javatypes.com.neovisionaries.ws.client.ThreadType;
                    readonly WRITING_THREAD: _javatypes.com.neovisionaries.ws.client.ThreadType;
                    readonly CONNECT_THREAD: _javatypes.com.neovisionaries.ws.client.ThreadType;
                    readonly FINISH_THREAD: _javatypes.com.neovisionaries.ws.client.ThreadType;
                    
                    values(): _javatypes.com.neovisionaries.ws.client.ThreadType[];
                    valueOf(arg0: string): _javatypes.com.neovisionaries.ws.client.ThreadType;
                    
                }
            }
        }
    }

    namespace io.noties.prism4j {
    
        interface Prism4j$Node extends _javatypes.java.lang.Interface {
            
            textLength(): number;
            isSyntax(): boolean;
            
        }
        namespace Prism4j$Node {
            interface static {
                
                
                
            }
        }
    }

    namespace javax {
    
    
        namespace sound.sampled {
        
            interface Clip extends _javatypes.java.lang.Interface, _javatypes.javax.sound.sampled.DataLine {
                
                open(arg0: _javatypes.javax.sound.sampled.AudioFormat, arg1: number[], arg2: number, arg3: number): void;
                open(arg0: _javatypes.javax.sound.sampled.AudioInputStream): void;
                getFrameLength(): number;
                getMicrosecondLength(): number;
                setFramePosition(arg0: number): void;
                setMicrosecondPosition(arg0: number): void;
                setLoopPoints(arg0: number, arg1: number): void;
                loop(arg0: number): void;
                
            }
            namespace Clip {
                interface static {
                    
                    readonly LOOP_CONTINUOUSLY: number;
                    
                    
                }
            }
            interface AudioInputStream extends _javatypes.java.io.InputStream {
                
                getFormat(): _javatypes.javax.sound.sampled.AudioFormat;
                getFrameLength(): number;
                read(): number;
                read(arg0: number[]): number;
                read(arg0: number[], arg1: number, arg2: number): number;
                skip(arg0: number): number;
                available(): number;
                close(): void;
                mark(arg0: number): void;
                reset(): void;
                markSupported(): boolean;
                
            }
            namespace AudioInputStream {
                interface static {
                    new (arg0: _javatypes.java.io.InputStream, arg1: _javatypes.javax.sound.sampled.AudioFormat, arg2: number): _javatypes.javax.sound.sampled.AudioInputStream;
                    new (arg0: _javatypes.javax.sound.sampled.TargetDataLine): _javatypes.javax.sound.sampled.AudioInputStream;
                    
                    
                    
                }
            }
            interface AudioFormat extends _javatypes.java.lang.Object {
                
                getEncoding(): _javatypes.javax.sound.sampled.AudioFormat$Encoding;
                getSampleRate(): number;
                getSampleSizeInBits(): number;
                getChannels(): number;
                getFrameSize(): number;
                getFrameRate(): number;
                isBigEndian(): boolean;
                properties(): _javatypes.java.util.Map<string, _javatypes.java.lang.Object>;
                getProperty(arg0: string): _javatypes.java.lang.Object;
                matches(arg0: _javatypes.javax.sound.sampled.AudioFormat): boolean;
                toString(): string;
                
            }
            namespace AudioFormat {
                interface static {
                    new (arg0: _javatypes.javax.sound.sampled.AudioFormat$Encoding, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean): _javatypes.javax.sound.sampled.AudioFormat;
                    new (arg0: _javatypes.javax.sound.sampled.AudioFormat$Encoding, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: _javatypes.java.util.Map<string, _javatypes.java.lang.Object>): _javatypes.javax.sound.sampled.AudioFormat;
                    new (arg0: number, arg1: number, arg2: number, arg3: boolean, arg4: boolean): _javatypes.javax.sound.sampled.AudioFormat;
                    
                    
                    
                }
            }
            interface DataLine extends _javatypes.java.lang.Interface, _javatypes.javax.sound.sampled.Line {
                
                drain(): void;
                flush(): void;
                start(): void;
                stop(): void;
                isRunning(): boolean;
                isActive(): boolean;
                getFormat(): _javatypes.javax.sound.sampled.AudioFormat;
                getBufferSize(): number;
                available(): number;
                getFramePosition(): number;
                getLongFramePosition(): number;
                getMicrosecondPosition(): number;
                getLevel(): number;
                
            }
            namespace DataLine {
                interface static {
                    
                    
                    
                }
            }
            interface Line extends _javatypes.java.lang.Interface, _javatypes.java.lang.AutoCloseable {
                
                getLineInfo(): _javatypes.javax.sound.sampled.Line$Info;
                open(): void;
                close(): void;
                isOpen(): boolean;
                getControls(): _javatypes.javax.sound.sampled.Control[];
                isControlSupported(arg0: _javatypes.javax.sound.sampled.Control$Type): boolean;
                getControl(arg0: _javatypes.javax.sound.sampled.Control$Type): _javatypes.javax.sound.sampled.Control;
                addLineListener(arg0: _javatypes.javax.sound.sampled.LineListener): void;
                removeLineListener(arg0: _javatypes.javax.sound.sampled.LineListener): void;
                
            }
            namespace Line {
                interface static {
                    
                    
                    
                }
            }
            interface TargetDataLine extends _javatypes.java.lang.Interface, _javatypes.javax.sound.sampled.DataLine {
                
                open(arg0: _javatypes.javax.sound.sampled.AudioFormat, arg1: number): void;
                open(arg0: _javatypes.javax.sound.sampled.AudioFormat): void;
                read(arg0: number[], arg1: number, arg2: number): number;
                
            }
            namespace TargetDataLine {
                interface static {
                    
                    
                    
                }
            }
            interface AudioFormat$Encoding extends _javatypes.java.lang.Object {
                
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace AudioFormat$Encoding {
                interface static {
                    new (arg0: string): _javatypes.javax.sound.sampled.AudioFormat$Encoding;
                    
                    readonly PCM_SIGNED: _javatypes.javax.sound.sampled.AudioFormat$Encoding;
                    readonly PCM_UNSIGNED: _javatypes.javax.sound.sampled.AudioFormat$Encoding;
                    readonly PCM_FLOAT: _javatypes.javax.sound.sampled.AudioFormat$Encoding;
                    readonly ULAW: _javatypes.javax.sound.sampled.AudioFormat$Encoding;
                    readonly ALAW: _javatypes.javax.sound.sampled.AudioFormat$Encoding;
                    
                    
                }
            }
            export interface LineListener extends _javatypes.java.lang.Interface, _javatypes.java.util.EventListener {
                
                update(arg0: _javatypes.javax.sound.sampled.LineEvent): void;
                
            }
            namespace LineListener {
                interface static {
                    
                    
                    
                }
            }
            interface Control$Type extends _javatypes.java.lang.Object {
                
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace Control$Type {
                interface static {
                    
                    
                    
                }
            }
            interface Line$Info extends _javatypes.java.lang.Object {
                
                getLineClass(): _javatypes.java.lang.Class<any>;
                matches(arg0: _javatypes.javax.sound.sampled.Line$Info): boolean;
                toString(): string;
                
            }
            namespace Line$Info {
                interface static {
                    new (arg0: _javatypes.java.lang.Class<any>): _javatypes.javax.sound.sampled.Line$Info;
                    
                    
                    
                }
            }
            interface Control extends _javatypes.java.lang.Object {
                
                getType(): _javatypes.javax.sound.sampled.Control$Type;
                toString(): string;
                
            }
            namespace Control {
                interface static {
                    
                    
                    
                }
            }
            export interface LineEvent extends _javatypes.java.util.EventObject {
                
                getLine(): _javatypes.javax.sound.sampled.Line;
                getType(): _javatypes.javax.sound.sampled.LineEvent$Type;
                getFramePosition(): number;
                toString(): string;
                
            }
            namespace LineEvent {
                interface static {
                    new (arg0: _javatypes.javax.sound.sampled.Line, arg1: _javatypes.javax.sound.sampled.LineEvent$Type, arg2: number): _javatypes.javax.sound.sampled.LineEvent;
                    
                    
                    
                }
            }
            interface LineEvent$Type extends _javatypes.java.lang.Object {
                
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace LineEvent$Type {
                interface static {
                    
                    readonly OPEN: _javatypes.javax.sound.sampled.LineEvent$Type;
                    readonly CLOSE: _javatypes.javax.sound.sampled.LineEvent$Type;
                    readonly START: _javatypes.javax.sound.sampled.LineEvent$Type;
                    readonly STOP: _javatypes.javax.sound.sampled.LineEvent$Type;
                    
                    
                }
            }
        }
    
        namespace security.auth {
        
            interface Subject extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                
                setReadOnly(): void;
                isReadOnly(): boolean;
                getPrincipals(): _javatypes.java.util.Set<_javatypes.java.security.Principal>;
                getPrincipals<T>(arg0: _javatypes.java.lang.Class<T>): _javatypes.java.util.Set<T>;
                getPublicCredentials(): _javatypes.java.util.Set<_javatypes.java.lang.Object>;
                getPrivateCredentials(): _javatypes.java.util.Set<_javatypes.java.lang.Object>;
                getPublicCredentials<T>(arg0: _javatypes.java.lang.Class<T>): _javatypes.java.util.Set<T>;
                getPrivateCredentials<T>(arg0: _javatypes.java.lang.Class<T>): _javatypes.java.util.Set<T>;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                toString(): string;
                hashCode(): number;
                
            }
            namespace Subject {
                interface static {
                    new (): _javatypes.javax.security.auth.Subject;
                    new (arg0: boolean, arg1: _javatypes.java.util.Set<any>, arg2: _javatypes.java.util.Set<any>, arg3: _javatypes.java.util.Set<any>): _javatypes.javax.security.auth.Subject;
                    
                    
                    getSubject(arg0: _javatypes.java.security.AccessControlContext): _javatypes.javax.security.auth.Subject;
                    doAs<T>(arg0: _javatypes.javax.security.auth.Subject, arg1: _javatypes.java.security.PrivilegedAction<T>): T;
                    doAs<T>(arg0: _javatypes.javax.security.auth.Subject, arg1: _javatypes.java.security.PrivilegedExceptionAction<T>): T;
                    doAsPrivileged<T>(arg0: _javatypes.javax.security.auth.Subject, arg1: _javatypes.java.security.PrivilegedAction<T>, arg2: _javatypes.java.security.AccessControlContext): T;
                    doAsPrivileged<T>(arg0: _javatypes.javax.security.auth.Subject, arg1: _javatypes.java.security.PrivilegedExceptionAction<T>, arg2: _javatypes.java.security.AccessControlContext): T;
                    
                }
            }
        }
    }

    namespace java {
    
    
        namespace io {
        
            interface IOException extends _javatypes.java.lang.Exception {
                
                
            }
            namespace IOException {
                interface static {
                    new (): _javatypes.java.io.IOException;
                    new (arg0: string): _javatypes.java.io.IOException;
                    new (arg0: string, arg1: _javatypes.java.lang.Throwable): _javatypes.java.io.IOException;
                    new (arg0: _javatypes.java.lang.Throwable): _javatypes.java.io.IOException;
                    
                    
                    
                }
            }
            interface InputStream extends _javatypes.java.lang.Object, _javatypes.java.io.Closeable {
                
                read(): number;
                read(arg0: number[]): number;
                read(arg0: number[], arg1: number, arg2: number): number;
                readAllBytes(): number[];
                readNBytes(arg0: number): number[];
                readNBytes(arg0: number[], arg1: number, arg2: number): number;
                skip(arg0: number): number;
                skipNBytes(arg0: number): void;
                available(): number;
                close(): void;
                mark(arg0: number): void;
                reset(): void;
                markSupported(): boolean;
                transferTo(arg0: _javatypes.java.io.OutputStream): number;
                
            }
            namespace InputStream {
                interface static {
                    new (): _javatypes.java.io.InputStream;
                    
                    
                    nullInputStream(): _javatypes.java.io.InputStream;
                    
                }
            }
            interface Closeable extends _javatypes.java.lang.Interface, _javatypes.java.lang.AutoCloseable {
                
                close(): void;
                
            }
            namespace Closeable {
                interface static {
                    
                    
                    
                }
            }
            interface OutputStream extends _javatypes.java.lang.Object, _javatypes.java.io.Closeable, _javatypes.java.io.Flushable {
                
                write(arg0: number): void;
                write(arg0: number[]): void;
                write(arg0: number[], arg1: number, arg2: number): void;
                flush(): void;
                close(): void;
                
            }
            namespace OutputStream {
                interface static {
                    new (): _javatypes.java.io.OutputStream;
                    
                    
                    nullOutputStream(): _javatypes.java.io.OutputStream;
                    
                }
            }
            interface Flushable extends _javatypes.java.lang.Interface {
                
                flush(): void;
                
            }
            namespace Flushable {
                interface static {
                    
                    
                    
                }
            }
            interface PrintStream extends _javatypes.java.io.FilterOutputStream, _javatypes.java.lang.Appendable, _javatypes.java.io.Closeable {
                
                flush(): void;
                close(): void;
                checkError(): boolean;
                write(arg0: number): void;
                write(arg0: number[], arg1: number, arg2: number): void;
                write(arg0: number[]): void;
                writeBytes(arg0: number[]): void;
                print(arg0: boolean): void;
                print(arg0: number): void;
                print(arg0: number): void;
                print(arg0: number): void;
                print(arg0: number): void;
                print(arg0: number): void;
                print(arg0: number[]): void;
                print(arg0: string): void;
                print(arg0: _javatypes.java.lang.Object): void;
                println(): void;
                println(arg0: boolean): void;
                println(arg0: number): void;
                println(arg0: number): void;
                println(arg0: number): void;
                println(arg0: number): void;
                println(arg0: number): void;
                println(arg0: number[]): void;
                println(arg0: string): void;
                println(arg0: _javatypes.java.lang.Object): void;
                printf(arg0: string, arg1: _javatypes.java.lang.Object[]): _javatypes.java.io.PrintStream;
                printf(arg0: _javatypes.java.util.Locale, arg1: string, arg2: _javatypes.java.lang.Object[]): _javatypes.java.io.PrintStream;
                format(arg0: string, arg1: _javatypes.java.lang.Object[]): _javatypes.java.io.PrintStream;
                format(arg0: _javatypes.java.util.Locale, arg1: string, arg2: _javatypes.java.lang.Object[]): _javatypes.java.io.PrintStream;
                append(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.io.PrintStream;
                append(arg0: _javatypes.java.lang.CharSequence, arg1: number, arg2: number): _javatypes.java.io.PrintStream;
                append(arg0: number): _javatypes.java.io.PrintStream;
                
            }
            namespace PrintStream {
                interface static {
                    new (arg0: _javatypes.java.io.OutputStream): _javatypes.java.io.PrintStream;
                    new (arg0: _javatypes.java.io.OutputStream, arg1: boolean): _javatypes.java.io.PrintStream;
                    new (arg0: _javatypes.java.io.OutputStream, arg1: boolean, arg2: string): _javatypes.java.io.PrintStream;
                    new (arg0: _javatypes.java.io.OutputStream, arg1: boolean, arg2: _javatypes.java.nio.charset.Charset): _javatypes.java.io.PrintStream;
                    new (arg0: string): _javatypes.java.io.PrintStream;
                    new (arg0: string, arg1: string): _javatypes.java.io.PrintStream;
                    new (arg0: string, arg1: _javatypes.java.nio.charset.Charset): _javatypes.java.io.PrintStream;
                    new (arg0: _javatypes.java.io.File): _javatypes.java.io.PrintStream;
                    new (arg0: _javatypes.java.io.File, arg1: string): _javatypes.java.io.PrintStream;
                    new (arg0: _javatypes.java.io.File, arg1: _javatypes.java.nio.charset.Charset): _javatypes.java.io.PrintStream;
                    
                    
                    
                }
            }
            interface DataOutputStream extends _javatypes.java.io.FilterOutputStream, _javatypes.java.io.DataOutput {
                
                write(arg0: number): void;
                write(arg0: number[], arg1: number, arg2: number): void;
                flush(): void;
                writeBoolean(arg0: boolean): void;
                writeByte(arg0: number): void;
                writeShort(arg0: number): void;
                writeChar(arg0: number): void;
                writeInt(arg0: number): void;
                writeLong(arg0: number): void;
                writeFloat(arg0: number): void;
                writeDouble(arg0: number): void;
                writeBytes(arg0: string): void;
                writeChars(arg0: string): void;
                writeUTF(arg0: string): void;
                size(): number;
                
            }
            namespace DataOutputStream {
                interface static {
                    new (arg0: _javatypes.java.io.OutputStream): _javatypes.java.io.DataOutputStream;
                    
                    
                    
                }
            }
            interface DataInputStream extends _javatypes.java.io.FilterInputStream, _javatypes.java.io.DataInput {
                
                read(arg0: number[]): number;
                read(arg0: number[], arg1: number, arg2: number): number;
                readFully(arg0: number[]): void;
                readFully(arg0: number[], arg1: number, arg2: number): void;
                skipBytes(arg0: number): number;
                readBoolean(): boolean;
                readByte(): number;
                readUnsignedByte(): number;
                readShort(): number;
                readUnsignedShort(): number;
                readChar(): number;
                readInt(): number;
                readLong(): number;
                readFloat(): number;
                readDouble(): number;
                readLine(): string;
                readUTF(): string;
                
            }
            namespace DataInputStream {
                interface static {
                    new (arg0: _javatypes.java.io.InputStream): _javatypes.java.io.DataInputStream;
                    
                    
                    readUTF(arg0: _javatypes.java.io.DataInput): string;
                    
                }
            }
            interface PrintWriter extends _javatypes.java.io.Writer {
                
                flush(): void;
                close(): void;
                checkError(): boolean;
                write(arg0: number): void;
                write(arg0: number[], arg1: number, arg2: number): void;
                write(arg0: number[]): void;
                write(arg0: string, arg1: number, arg2: number): void;
                write(arg0: string): void;
                print(arg0: boolean): void;
                print(arg0: number): void;
                print(arg0: number): void;
                print(arg0: number): void;
                print(arg0: number): void;
                print(arg0: number): void;
                print(arg0: number[]): void;
                print(arg0: string): void;
                print(arg0: _javatypes.java.lang.Object): void;
                println(): void;
                println(arg0: boolean): void;
                println(arg0: number): void;
                println(arg0: number): void;
                println(arg0: number): void;
                println(arg0: number): void;
                println(arg0: number): void;
                println(arg0: number[]): void;
                println(arg0: string): void;
                println(arg0: _javatypes.java.lang.Object): void;
                printf(arg0: string, arg1: _javatypes.java.lang.Object[]): _javatypes.java.io.PrintWriter;
                printf(arg0: _javatypes.java.util.Locale, arg1: string, arg2: _javatypes.java.lang.Object[]): _javatypes.java.io.PrintWriter;
                format(arg0: string, arg1: _javatypes.java.lang.Object[]): _javatypes.java.io.PrintWriter;
                format(arg0: _javatypes.java.util.Locale, arg1: string, arg2: _javatypes.java.lang.Object[]): _javatypes.java.io.PrintWriter;
                append(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.io.PrintWriter;
                append(arg0: _javatypes.java.lang.CharSequence, arg1: number, arg2: number): _javatypes.java.io.PrintWriter;
                append(arg0: number): _javatypes.java.io.PrintWriter;
                
            }
            namespace PrintWriter {
                interface static {
                    new (arg0: _javatypes.java.io.Writer): _javatypes.java.io.PrintWriter;
                    new (arg0: _javatypes.java.io.Writer, arg1: boolean): _javatypes.java.io.PrintWriter;
                    new (arg0: _javatypes.java.io.OutputStream): _javatypes.java.io.PrintWriter;
                    new (arg0: _javatypes.java.io.OutputStream, arg1: boolean): _javatypes.java.io.PrintWriter;
                    new (arg0: _javatypes.java.io.OutputStream, arg1: boolean, arg2: _javatypes.java.nio.charset.Charset): _javatypes.java.io.PrintWriter;
                    new (arg0: string): _javatypes.java.io.PrintWriter;
                    new (arg0: string, arg1: string): _javatypes.java.io.PrintWriter;
                    new (arg0: string, arg1: _javatypes.java.nio.charset.Charset): _javatypes.java.io.PrintWriter;
                    new (arg0: _javatypes.java.io.File): _javatypes.java.io.PrintWriter;
                    new (arg0: _javatypes.java.io.File, arg1: string): _javatypes.java.io.PrintWriter;
                    new (arg0: _javatypes.java.io.File, arg1: _javatypes.java.nio.charset.Charset): _javatypes.java.io.PrintWriter;
                    
                    
                    
                }
            }
            interface DataOutput extends _javatypes.java.lang.Interface {
                
                write(arg0: number): void;
                write(arg0: number[]): void;
                write(arg0: number[], arg1: number, arg2: number): void;
                writeBoolean(arg0: boolean): void;
                writeByte(arg0: number): void;
                writeShort(arg0: number): void;
                writeChar(arg0: number): void;
                writeInt(arg0: number): void;
                writeLong(arg0: number): void;
                writeFloat(arg0: number): void;
                writeDouble(arg0: number): void;
                writeBytes(arg0: string): void;
                writeChars(arg0: string): void;
                writeUTF(arg0: string): void;
                
            }
            namespace DataOutput {
                interface static {
                    
                    
                    
                }
            }
            interface DataInput extends _javatypes.java.lang.Interface {
                
                readFully(arg0: number[]): void;
                readFully(arg0: number[], arg1: number, arg2: number): void;
                skipBytes(arg0: number): number;
                readBoolean(): boolean;
                readByte(): number;
                readUnsignedByte(): number;
                readShort(): number;
                readUnsignedShort(): number;
                readChar(): number;
                readInt(): number;
                readLong(): number;
                readFloat(): number;
                readDouble(): number;
                readLine(): string;
                readUTF(): string;
                
            }
            namespace DataInput {
                interface static {
                    
                    
                    
                }
            }
            interface FilterInputStream extends _javatypes.java.io.InputStream {
                
                read(): number;
                read(arg0: number[]): number;
                read(arg0: number[], arg1: number, arg2: number): number;
                skip(arg0: number): number;
                available(): number;
                close(): void;
                mark(arg0: number): void;
                reset(): void;
                markSupported(): boolean;
                
            }
            namespace FilterInputStream {
                interface static {
                    
                    
                    
                }
            }
            interface Writer extends _javatypes.java.lang.Object, _javatypes.java.lang.Appendable, _javatypes.java.io.Closeable, _javatypes.java.io.Flushable {
                
                write(arg0: number): void;
                write(arg0: number[]): void;
                write(arg0: number[], arg1: number, arg2: number): void;
                write(arg0: string): void;
                write(arg0: string, arg1: number, arg2: number): void;
                append(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.io.Writer;
                append(arg0: _javatypes.java.lang.CharSequence, arg1: number, arg2: number): _javatypes.java.io.Writer;
                append(arg0: number): _javatypes.java.io.Writer;
                flush(): void;
                close(): void;
                
            }
            namespace Writer {
                interface static {
                    
                    
                    nullWriter(): _javatypes.java.io.Writer;
                    
                }
            }
            interface FilterOutputStream extends _javatypes.java.io.OutputStream {
                
                write(arg0: number): void;
                write(arg0: number[]): void;
                write(arg0: number[], arg1: number, arg2: number): void;
                flush(): void;
                close(): void;
                
            }
            namespace FilterOutputStream {
                interface static {
                    new (arg0: _javatypes.java.io.OutputStream): _javatypes.java.io.FilterOutputStream;
                    
                    
                    
                }
            }
            interface Reader extends _javatypes.java.lang.Object, _javatypes.java.lang.Readable, _javatypes.java.io.Closeable {
                
                read(arg0: _javatypes.java.nio.CharBuffer): number;
                read(): number;
                read(arg0: number[]): number;
                read(arg0: number[], arg1: number, arg2: number): number;
                skip(arg0: number): number;
                ready(): boolean;
                markSupported(): boolean;
                mark(arg0: number): void;
                reset(): void;
                close(): void;
                transferTo(arg0: _javatypes.java.io.Writer): number;
                
            }
            namespace Reader {
                interface static {
                    
                    
                    nullReader(): _javatypes.java.io.Reader;
                    
                }
            }
        }
    
        namespace lang {
        
            interface Exception extends _javatypes.java.lang.Throwable {
                
                
            }
            namespace Exception {
                interface static {
                    new (): _javatypes.java.lang.Exception;
                    new (arg0: string): _javatypes.java.lang.Exception;
                    new (arg0: string, arg1: _javatypes.java.lang.Throwable): _javatypes.java.lang.Exception;
                    new (arg0: _javatypes.java.lang.Throwable): _javatypes.java.lang.Exception;
                    
                    
                    
                }
            }
            interface Enum<E> extends _javatypes.java.lang.Object, _javatypes.java.lang.constant.Constable, _javatypes.java.lang.Comparable<E>, _javatypes.java.io.Serializable {
                
                name(): string;
                ordinal(): number;
                toString(): string;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                compareTo(arg0: E): number;
                getDeclaringClass(): _javatypes.java.lang.Class<E>;
                describeConstable(): _javatypes.java.util.Optional<_javatypes.java.lang.Enum$EnumDesc<E>>;
                
            }
            namespace Enum {
                interface static {
                    
                    
                    valueOf<T>(arg0: _javatypes.java.lang.Class<T>, arg1: string): T;
                    
                }
            }
            interface Runnable extends _javatypes.java.lang.Interface {
                
                run(): void;
                
            }
            namespace Runnable {
                interface static {
                    
                    
                    
                }
            }
            interface AutoCloseable extends _javatypes.java.lang.Interface {
                
                close(): void;
                
            }
            namespace AutoCloseable {
                interface static {
                    
                    
                    
                }
            }
            interface Number extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                
                intValue(): number;
                longValue(): number;
                floatValue(): number;
                doubleValue(): number;
                byteValue(): number;
                shortValue(): number;
                
            }
            namespace Number {
                interface static {
                    new (): _javatypes.java.lang.Number;
                    
                    
                    
                }
            }
            interface Thread extends _javatypes.java.lang.Object, _javatypes.java.lang.Runnable {
                
                start(): void;
                run(): void;
                stop(): void;
                interrupt(): void;
                isInterrupted(): boolean;
                isAlive(): boolean;
                suspend(): void;
                resume(): void;
                setPriority(arg0: number): void;
                getPriority(): number;
                setName(arg0: string): void;
                getName(): string;
                getThreadGroup(): _javatypes.java.lang.ThreadGroup;
                countStackFrames(): number;
                join(arg0: number): void;
                join(arg0: number, arg1: number): void;
                join(): void;
                setDaemon(arg0: boolean): void;
                isDaemon(): boolean;
                checkAccess(): void;
                toString(): string;
                getContextClassLoader(): _javatypes.java.lang.ClassLoader;
                setContextClassLoader(arg0: _javatypes.java.lang.ClassLoader): void;
                getStackTrace(): _javatypes.java.lang.StackTraceElement[];
                getId(): number;
                getState(): _javatypes.java.lang.Thread$State;
                getUncaughtExceptionHandler(): _javatypes.java.lang.Thread$UncaughtExceptionHandler;
                setUncaughtExceptionHandler(arg0: _javatypes.java.lang.Thread$UncaughtExceptionHandler): void;
                
            }
            namespace Thread {
                interface static {
                    new (): _javatypes.java.lang.Thread;
                    new (arg0: _javatypes.java.lang.Runnable): _javatypes.java.lang.Thread;
                    new (arg0: _javatypes.java.lang.ThreadGroup, arg1: _javatypes.java.lang.Runnable): _javatypes.java.lang.Thread;
                    new (arg0: string): _javatypes.java.lang.Thread;
                    new (arg0: _javatypes.java.lang.ThreadGroup, arg1: string): _javatypes.java.lang.Thread;
                    new (arg0: _javatypes.java.lang.Runnable, arg1: string): _javatypes.java.lang.Thread;
                    new (arg0: _javatypes.java.lang.ThreadGroup, arg1: _javatypes.java.lang.Runnable, arg2: string): _javatypes.java.lang.Thread;
                    new (arg0: _javatypes.java.lang.ThreadGroup, arg1: _javatypes.java.lang.Runnable, arg2: string, arg3: number): _javatypes.java.lang.Thread;
                    new (arg0: _javatypes.java.lang.ThreadGroup, arg1: _javatypes.java.lang.Runnable, arg2: string, arg3: number, arg4: boolean): _javatypes.java.lang.Thread;
                    
                    readonly MIN_PRIORITY: number;
                    readonly NORM_PRIORITY: number;
                    readonly MAX_PRIORITY: number;
                    
                    currentThread(): _javatypes.java.lang.Thread;
                    yield(): void;
                    sleep(arg0: number): void;
                    sleep(arg0: number, arg1: number): void;
                    onSpinWait(): void;
                    interrupted(): boolean;
                    activeCount(): number;
                    enumerate(arg0: _javatypes.java.lang.Thread[]): number;
                    dumpStack(): void;
                    holdsLock(arg0: _javatypes.java.lang.Object): boolean;
                    getAllStackTraces(): _javatypes.java.util.Map<_javatypes.java.lang.Thread, _javatypes.java.lang.StackTraceElement[]>;
                    setDefaultUncaughtExceptionHandler(arg0: _javatypes.java.lang.Thread$UncaughtExceptionHandler): void;
                    getDefaultUncaughtExceptionHandler(): _javatypes.java.lang.Thread$UncaughtExceptionHandler;
                    
                }
            }
            interface Thread$UncaughtExceptionHandler extends _javatypes.java.lang.Interface {
                
                uncaughtException(arg0: _javatypes.java.lang.Thread, arg1: _javatypes.java.lang.Throwable): void;
                
            }
            namespace Thread$UncaughtExceptionHandler {
                interface static {
                    
                    
                    
                }
            }
            interface ThreadGroup extends _javatypes.java.lang.Object, _javatypes.java.lang.Thread$UncaughtExceptionHandler {
                
                getName(): string;
                getParent(): _javatypes.java.lang.ThreadGroup;
                getMaxPriority(): number;
                isDaemon(): boolean;
                isDestroyed(): boolean;
                setDaemon(arg0: boolean): void;
                setMaxPriority(arg0: number): void;
                parentOf(arg0: _javatypes.java.lang.ThreadGroup): boolean;
                checkAccess(): void;
                activeCount(): number;
                enumerate(arg0: _javatypes.java.lang.Thread[]): number;
                enumerate(arg0: _javatypes.java.lang.Thread[], arg1: boolean): number;
                activeGroupCount(): number;
                enumerate(arg0: _javatypes.java.lang.ThreadGroup[]): number;
                enumerate(arg0: _javatypes.java.lang.ThreadGroup[], arg1: boolean): number;
                stop(): void;
                interrupt(): void;
                suspend(): void;
                resume(): void;
                destroy(): void;
                list(): void;
                uncaughtException(arg0: _javatypes.java.lang.Thread, arg1: _javatypes.java.lang.Throwable): void;
                allowThreadSuspension(arg0: boolean): boolean;
                toString(): string;
                
            }
            namespace ThreadGroup {
                interface static {
                    new (arg0: string): _javatypes.java.lang.ThreadGroup;
                    new (arg0: _javatypes.java.lang.ThreadGroup, arg1: string): _javatypes.java.lang.ThreadGroup;
                    
                    
                    
                }
            }
            interface Comparable<T> extends _javatypes.java.lang.Interface {
                
                compareTo(arg0: T): number;
                
            }
            namespace Comparable {
                interface static {
                    
                    
                    
                }
            }
            interface Enum$EnumDesc<E> extends _javatypes.java.lang.constant.DynamicConstantDesc<E> {
                
                resolveConstantDesc(arg0: _javatypes.java.lang.invoke.MethodHandles$Lookup): E;
                toString(): string;
                
            }
            namespace Enum$EnumDesc {
                interface static {
                    
                    
                    of<E>(arg0: _javatypes.java.lang.constant.ClassDesc, arg1: string): _javatypes.java.lang.Enum$EnumDesc<E>;
                    
                }
            }
            interface Thread$State extends _javatypes.java.lang.Enum<_javatypes.java.lang.Thread$State> {
                
                
            }
            namespace Thread$State {
                interface static {
                    
                    readonly NEW: _javatypes.java.lang.Thread$State;
                    readonly RUNNABLE: _javatypes.java.lang.Thread$State;
                    readonly BLOCKED: _javatypes.java.lang.Thread$State;
                    readonly WAITING: _javatypes.java.lang.Thread$State;
                    readonly TIMED_WAITING: _javatypes.java.lang.Thread$State;
                    readonly TERMINATED: _javatypes.java.lang.Thread$State;
                    
                    values(): _javatypes.java.lang.Thread$State[];
                    valueOf(arg0: string): _javatypes.java.lang.Thread$State;
                    
                }
            }
            interface ClassLoader extends _javatypes.java.lang.Object {
                
                getName(): string;
                loadClass(arg0: string): _javatypes.java.lang.Class<any>;
                getResource(arg0: string): _javatypes.java.net.URL;
                getResources(arg0: string): _javatypes.java.util.Enumeration<_javatypes.java.net.URL>;
                resources(arg0: string): _javatypes.java.util.stream.Stream<_javatypes.java.net.URL>;
                isRegisteredAsParallelCapable(): boolean;
                getResourceAsStream(arg0: string): _javatypes.java.io.InputStream;
                getParent(): _javatypes.java.lang.ClassLoader;
                getUnnamedModule(): _javatypes.java.lang.Module;
                getDefinedPackage(arg0: string): _javatypes.java.lang.Package;
                getDefinedPackages(): _javatypes.java.lang.Package[];
                setDefaultAssertionStatus(arg0: boolean): void;
                setPackageAssertionStatus(arg0: string, arg1: boolean): void;
                setClassAssertionStatus(arg0: string, arg1: boolean): void;
                clearAssertionStatus(): void;
                
            }
            namespace ClassLoader {
                interface static {
                    
                    
                    getSystemResource(arg0: string): _javatypes.java.net.URL;
                    getSystemResources(arg0: string): _javatypes.java.util.Enumeration<_javatypes.java.net.URL>;
                    getSystemResourceAsStream(arg0: string): _javatypes.java.io.InputStream;
                    getPlatformClassLoader(): _javatypes.java.lang.ClassLoader;
                    getSystemClassLoader(): _javatypes.java.lang.ClassLoader;
                    
                }
            }
            interface Package extends _javatypes.java.lang.NamedPackage, _javatypes.java.lang.reflect.AnnotatedElement {
                
                getName(): string;
                getSpecificationTitle(): string;
                getSpecificationVersion(): string;
                getSpecificationVendor(): string;
                getImplementationTitle(): string;
                getImplementationVersion(): string;
                getImplementationVendor(): string;
                isSealed(): boolean;
                isSealed(arg0: _javatypes.java.net.URL): boolean;
                isCompatibleWith(arg0: string): boolean;
                hashCode(): number;
                toString(): string;
                getAnnotation<A>(arg0: _javatypes.java.lang.Class<A>): A;
                isAnnotationPresent(arg0: _javatypes.java.lang.Class<any>): boolean;
                getAnnotationsByType<A>(arg0: _javatypes.java.lang.Class<A>): A[];
                getAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                getDeclaredAnnotation<A>(arg0: _javatypes.java.lang.Class<A>): A;
                getDeclaredAnnotationsByType<A>(arg0: _javatypes.java.lang.Class<A>): A[];
                getDeclaredAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                
            }
            namespace Package {
                interface static {
                    
                    
                    getPackage(arg0: string): _javatypes.java.lang.Package;
                    getPackages(): _javatypes.java.lang.Package[];
                    
                }
            }
            interface Module extends _javatypes.java.lang.Object, _javatypes.java.lang.reflect.AnnotatedElement {
                
                isNamed(): boolean;
                getName(): string;
                getClassLoader(): _javatypes.java.lang.ClassLoader;
                getDescriptor(): _javatypes.java.lang.module.ModuleDescriptor;
                getLayer(): _javatypes.java.lang.ModuleLayer;
                canRead(arg0: _javatypes.java.lang.Module): boolean;
                addReads(arg0: _javatypes.java.lang.Module): _javatypes.java.lang.Module;
                isExported(arg0: string, arg1: _javatypes.java.lang.Module): boolean;
                isOpen(arg0: string, arg1: _javatypes.java.lang.Module): boolean;
                isExported(arg0: string): boolean;
                isOpen(arg0: string): boolean;
                addExports(arg0: string, arg1: _javatypes.java.lang.Module): _javatypes.java.lang.Module;
                addOpens(arg0: string, arg1: _javatypes.java.lang.Module): _javatypes.java.lang.Module;
                addUses(arg0: _javatypes.java.lang.Class<any>): _javatypes.java.lang.Module;
                canUse(arg0: _javatypes.java.lang.Class<any>): boolean;
                getPackages(): _javatypes.java.util.Set<string>;
                getAnnotation<T>(arg0: _javatypes.java.lang.Class<T>): T;
                getAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                getDeclaredAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                getResourceAsStream(arg0: string): _javatypes.java.io.InputStream;
                toString(): string;
                
            }
            namespace Module {
                interface static {
                    
                    
                    
                }
            }
            interface NamedPackage extends _javatypes.java.lang.Object {
                
                
            }
            namespace NamedPackage {
                interface static {
                    
                    
                    
                }
            }
            interface ModuleLayer extends _javatypes.java.lang.Object {
                
                defineModulesWithOneLoader(arg0: _javatypes.java.lang.module.Configuration, arg1: _javatypes.java.lang.ClassLoader): _javatypes.java.lang.ModuleLayer;
                defineModulesWithManyLoaders(arg0: _javatypes.java.lang.module.Configuration, arg1: _javatypes.java.lang.ClassLoader): _javatypes.java.lang.ModuleLayer;
                defineModules(arg0: _javatypes.java.lang.module.Configuration, arg1: _javatypes.java.util._function.Function<string, _javatypes.java.lang.ClassLoader>): _javatypes.java.lang.ModuleLayer;
                configuration(): _javatypes.java.lang.module.Configuration;
                parents(): _javatypes.java.util.List<_javatypes.java.lang.ModuleLayer>;
                modules(): _javatypes.java.util.Set<_javatypes.java.lang.Module>;
                findModule(arg0: string): _javatypes.java.util.Optional<_javatypes.java.lang.Module>;
                findLoader(arg0: string): _javatypes.java.lang.ClassLoader;
                toString(): string;
                
            }
            namespace ModuleLayer {
                interface static {
                    
                    
                    defineModulesWithOneLoader(arg0: _javatypes.java.lang.module.Configuration, arg1: _javatypes.java.util.List<_javatypes.java.lang.ModuleLayer>, arg2: _javatypes.java.lang.ClassLoader): _javatypes.java.lang.ModuleLayer$Controller;
                    defineModulesWithManyLoaders(arg0: _javatypes.java.lang.module.Configuration, arg1: _javatypes.java.util.List<_javatypes.java.lang.ModuleLayer>, arg2: _javatypes.java.lang.ClassLoader): _javatypes.java.lang.ModuleLayer$Controller;
                    defineModules(arg0: _javatypes.java.lang.module.Configuration, arg1: _javatypes.java.util.List<_javatypes.java.lang.ModuleLayer>, arg2: _javatypes.java.util._function.Function<string, _javatypes.java.lang.ClassLoader>): _javatypes.java.lang.ModuleLayer$Controller;
                    empty(): _javatypes.java.lang.ModuleLayer;
                    boot(): _javatypes.java.lang.ModuleLayer;
                    
                }
            }
            interface ModuleLayer$Controller extends _javatypes.java.lang.Object {
                
                layer(): _javatypes.java.lang.ModuleLayer;
                addReads(arg0: _javatypes.java.lang.Module, arg1: _javatypes.java.lang.Module): _javatypes.java.lang.ModuleLayer$Controller;
                addExports(arg0: _javatypes.java.lang.Module, arg1: string, arg2: _javatypes.java.lang.Module): _javatypes.java.lang.ModuleLayer$Controller;
                addOpens(arg0: _javatypes.java.lang.Module, arg1: string, arg2: _javatypes.java.lang.Module): _javatypes.java.lang.ModuleLayer$Controller;
                
            }
            namespace ModuleLayer$Controller {
                interface static {
                    
                    
                    
                }
            }
            interface CharSequence extends _javatypes.java.lang.Interface {
                
                length(): number;
                charAt(arg0: number): number;
                isEmpty(): boolean;
                subSequence(arg0: number, arg1: number): _javatypes.java.lang.CharSequence;
                toString(): string;
                chars(): _javatypes.java.util.stream.IntStream;
                codePoints(): _javatypes.java.util.stream.IntStream;
                
            }
            namespace CharSequence {
                interface static {
                    
                    
                    compare(arg0: _javatypes.java.lang.CharSequence, arg1: _javatypes.java.lang.CharSequence): number;
                    
                }
            }
            interface Appendable extends _javatypes.java.lang.Interface {
                
                append(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.lang.Appendable;
                append(arg0: _javatypes.java.lang.CharSequence, arg1: number, arg2: number): _javatypes.java.lang.Appendable;
                append(arg0: number): _javatypes.java.lang.Appendable;
                
            }
            namespace Appendable {
                interface static {
                    
                    
                    
                }
            }
            interface Readable extends _javatypes.java.lang.Interface {
                
                read(arg0: _javatypes.java.nio.CharBuffer): number;
                
            }
            namespace Readable {
                interface static {
                    
                    
                    
                }
            }
            interface Iterable<T> extends _javatypes.java.lang.Interface {
                
                iterator(): _javatypes.java.util.Iterator<T>;
                forEach(arg0: _javatypes.java.util._function.Consumer<any>): void;
                spliterator(): _javatypes.java.util.Spliterator<T>;
                
            }
            namespace Iterable {
                interface static {
                    
                    
                    
                }
            }
            interface Cloneable extends _javatypes.java.lang.Interface {
                
                
            }
            namespace Cloneable {
                interface static {
                    
                    
                    
                }
            }
            interface Void extends _javatypes.java.lang.Object {
                
                
            }
            namespace Void {
                interface static {
                    
                    readonly TYPE: _javatypes.java.lang.Class<_javatypes.java.lang.Void>;
                    
                    
                }
            }
            interface StringBuffer extends _javatypes.java.lang.AbstractStringBuilder, _javatypes.java.io.Serializable, _javatypes.java.lang.Comparable<_javatypes.java.lang.StringBuffer>, _javatypes.java.lang.CharSequence {
                
                compareTo(arg0: _javatypes.java.lang.StringBuffer): number;
                length(): number;
                capacity(): number;
                ensureCapacity(arg0: number): void;
                trimToSize(): void;
                setLength(arg0: number): void;
                charAt(arg0: number): number;
                codePointAt(arg0: number): number;
                codePointBefore(arg0: number): number;
                codePointCount(arg0: number, arg1: number): number;
                offsetByCodePoints(arg0: number, arg1: number): number;
                getChars(arg0: number, arg1: number, arg2: number[], arg3: number): void;
                setCharAt(arg0: number, arg1: number): void;
                append(arg0: _javatypes.java.lang.Object): _javatypes.java.lang.StringBuffer;
                append(arg0: string): _javatypes.java.lang.StringBuffer;
                append(arg0: _javatypes.java.lang.StringBuffer): _javatypes.java.lang.StringBuffer;
                append(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.lang.StringBuffer;
                append(arg0: _javatypes.java.lang.CharSequence, arg1: number, arg2: number): _javatypes.java.lang.StringBuffer;
                append(arg0: number[]): _javatypes.java.lang.StringBuffer;
                append(arg0: number[], arg1: number, arg2: number): _javatypes.java.lang.StringBuffer;
                append(arg0: boolean): _javatypes.java.lang.StringBuffer;
                append(arg0: number): _javatypes.java.lang.StringBuffer;
                append(arg0: number): _javatypes.java.lang.StringBuffer;
                appendCodePoint(arg0: number): _javatypes.java.lang.StringBuffer;
                append(arg0: number): _javatypes.java.lang.StringBuffer;
                append(arg0: number): _javatypes.java.lang.StringBuffer;
                append(arg0: number): _javatypes.java.lang.StringBuffer;
                delete(arg0: number, arg1: number): _javatypes.java.lang.StringBuffer;
                deleteCharAt(arg0: number): _javatypes.java.lang.StringBuffer;
                replace(arg0: number, arg1: number, arg2: string): _javatypes.java.lang.StringBuffer;
                substring(arg0: number): string;
                subSequence(arg0: number, arg1: number): _javatypes.java.lang.CharSequence;
                substring(arg0: number, arg1: number): string;
                insert(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.lang.StringBuffer;
                insert(arg0: number, arg1: _javatypes.java.lang.Object): _javatypes.java.lang.StringBuffer;
                insert(arg0: number, arg1: string): _javatypes.java.lang.StringBuffer;
                insert(arg0: number, arg1: number[]): _javatypes.java.lang.StringBuffer;
                insert(arg0: number, arg1: _javatypes.java.lang.CharSequence): _javatypes.java.lang.StringBuffer;
                insert(arg0: number, arg1: _javatypes.java.lang.CharSequence, arg2: number, arg3: number): _javatypes.java.lang.StringBuffer;
                insert(arg0: number, arg1: boolean): _javatypes.java.lang.StringBuffer;
                insert(arg0: number, arg1: number): _javatypes.java.lang.StringBuffer;
                insert(arg0: number, arg1: number): _javatypes.java.lang.StringBuffer;
                insert(arg0: number, arg1: number): _javatypes.java.lang.StringBuffer;
                insert(arg0: number, arg1: number): _javatypes.java.lang.StringBuffer;
                insert(arg0: number, arg1: number): _javatypes.java.lang.StringBuffer;
                indexOf(arg0: string): number;
                indexOf(arg0: string, arg1: number): number;
                lastIndexOf(arg0: string): number;
                lastIndexOf(arg0: string, arg1: number): number;
                reverse(): _javatypes.java.lang.StringBuffer;
                toString(): string;
                
            }
            namespace StringBuffer {
                interface static {
                    new (): _javatypes.java.lang.StringBuffer;
                    new (arg0: number): _javatypes.java.lang.StringBuffer;
                    new (arg0: string): _javatypes.java.lang.StringBuffer;
                    new (arg0: _javatypes.java.lang.CharSequence): _javatypes.java.lang.StringBuffer;
                    
                    
                    
                }
            }
            interface AbstractStringBuilder extends _javatypes.java.lang.Object, _javatypes.java.lang.Appendable, _javatypes.java.lang.CharSequence {
                
                length(): number;
                capacity(): number;
                ensureCapacity(arg0: number): void;
                trimToSize(): void;
                setLength(arg0: number): void;
                charAt(arg0: number): number;
                codePointAt(arg0: number): number;
                codePointBefore(arg0: number): number;
                codePointCount(arg0: number, arg1: number): number;
                offsetByCodePoints(arg0: number, arg1: number): number;
                getChars(arg0: number, arg1: number, arg2: number[], arg3: number): void;
                setCharAt(arg0: number, arg1: number): void;
                append(arg0: _javatypes.java.lang.Object): _javatypes.java.lang.AbstractStringBuilder;
                append(arg0: string): _javatypes.java.lang.AbstractStringBuilder;
                append(arg0: _javatypes.java.lang.StringBuffer): _javatypes.java.lang.AbstractStringBuilder;
                append(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.lang.AbstractStringBuilder;
                append(arg0: _javatypes.java.lang.CharSequence, arg1: number, arg2: number): _javatypes.java.lang.AbstractStringBuilder;
                append(arg0: number[]): _javatypes.java.lang.AbstractStringBuilder;
                append(arg0: number[], arg1: number, arg2: number): _javatypes.java.lang.AbstractStringBuilder;
                append(arg0: boolean): _javatypes.java.lang.AbstractStringBuilder;
                append(arg0: number): _javatypes.java.lang.AbstractStringBuilder;
                append(arg0: number): _javatypes.java.lang.AbstractStringBuilder;
                append(arg0: number): _javatypes.java.lang.AbstractStringBuilder;
                append(arg0: number): _javatypes.java.lang.AbstractStringBuilder;
                append(arg0: number): _javatypes.java.lang.AbstractStringBuilder;
                delete(arg0: number, arg1: number): _javatypes.java.lang.AbstractStringBuilder;
                appendCodePoint(arg0: number): _javatypes.java.lang.AbstractStringBuilder;
                deleteCharAt(arg0: number): _javatypes.java.lang.AbstractStringBuilder;
                replace(arg0: number, arg1: number, arg2: string): _javatypes.java.lang.AbstractStringBuilder;
                substring(arg0: number): string;
                subSequence(arg0: number, arg1: number): _javatypes.java.lang.CharSequence;
                substring(arg0: number, arg1: number): string;
                insert(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.lang.AbstractStringBuilder;
                insert(arg0: number, arg1: _javatypes.java.lang.Object): _javatypes.java.lang.AbstractStringBuilder;
                insert(arg0: number, arg1: string): _javatypes.java.lang.AbstractStringBuilder;
                insert(arg0: number, arg1: number[]): _javatypes.java.lang.AbstractStringBuilder;
                insert(arg0: number, arg1: _javatypes.java.lang.CharSequence): _javatypes.java.lang.AbstractStringBuilder;
                insert(arg0: number, arg1: _javatypes.java.lang.CharSequence, arg2: number, arg3: number): _javatypes.java.lang.AbstractStringBuilder;
                insert(arg0: number, arg1: boolean): _javatypes.java.lang.AbstractStringBuilder;
                insert(arg0: number, arg1: number): _javatypes.java.lang.AbstractStringBuilder;
                insert(arg0: number, arg1: number): _javatypes.java.lang.AbstractStringBuilder;
                insert(arg0: number, arg1: number): _javatypes.java.lang.AbstractStringBuilder;
                insert(arg0: number, arg1: number): _javatypes.java.lang.AbstractStringBuilder;
                insert(arg0: number, arg1: number): _javatypes.java.lang.AbstractStringBuilder;
                indexOf(arg0: string): number;
                indexOf(arg0: string, arg1: number): number;
                lastIndexOf(arg0: string): number;
                lastIndexOf(arg0: string, arg1: number): number;
                reverse(): _javatypes.java.lang.AbstractStringBuilder;
                toString(): string;
                chars(): _javatypes.java.util.stream.IntStream;
                codePoints(): _javatypes.java.util.stream.IntStream;
                
            }
            namespace AbstractStringBuilder {
                interface static {
                    
                    
                    
                }
            }
        
            namespace reflect {
            
                interface Method extends _javatypes.java.lang.reflect.Executable {
                    
                    setAccessible(arg0: boolean): void;
                    getDeclaringClass(): _javatypes.java.lang.Class<any>;
                    getName(): string;
                    getModifiers(): number;
                    getTypeParameters(): _javatypes.java.lang.reflect.TypeVariable<_javatypes.java.lang.reflect.Method>[];
                    getReturnType(): _javatypes.java.lang.Class<any>;
                    getGenericReturnType(): _javatypes.java.lang.reflect.Type;
                    getParameterTypes(): _javatypes.java.lang.Class<any>[];
                    getParameterCount(): number;
                    getGenericParameterTypes(): _javatypes.java.lang.reflect.Type[];
                    getExceptionTypes(): _javatypes.java.lang.Class<any>[];
                    getGenericExceptionTypes(): _javatypes.java.lang.reflect.Type[];
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    toGenericString(): string;
                    invoke(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    isBridge(): boolean;
                    isVarArgs(): boolean;
                    isSynthetic(): boolean;
                    isDefault(): boolean;
                    getDefaultValue(): _javatypes.java.lang.Object;
                    getAnnotation<T>(arg0: _javatypes.java.lang.Class<T>): T;
                    getDeclaredAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                    getParameterAnnotations(): _javatypes.java.lang.annotation.Annotation[][];
                    getAnnotatedReturnType(): _javatypes.java.lang.reflect.AnnotatedType;
                    
                }
                namespace Method {
                    interface static {
                        
                        
                        
                    }
                }
                interface Field extends _javatypes.java.lang.reflect.AccessibleObject, _javatypes.java.lang.reflect.Member {
                    
                    setAccessible(arg0: boolean): void;
                    getDeclaringClass(): _javatypes.java.lang.Class<any>;
                    getName(): string;
                    getModifiers(): number;
                    isEnumConstant(): boolean;
                    isSynthetic(): boolean;
                    getType(): _javatypes.java.lang.Class<any>;
                    getGenericType(): _javatypes.java.lang.reflect.Type;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    toGenericString(): string;
                    get(arg0: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                    getBoolean(arg0: _javatypes.java.lang.Object): boolean;
                    getByte(arg0: _javatypes.java.lang.Object): number;
                    getChar(arg0: _javatypes.java.lang.Object): number;
                    getShort(arg0: _javatypes.java.lang.Object): number;
                    getInt(arg0: _javatypes.java.lang.Object): number;
                    getLong(arg0: _javatypes.java.lang.Object): number;
                    getFloat(arg0: _javatypes.java.lang.Object): number;
                    getDouble(arg0: _javatypes.java.lang.Object): number;
                    set(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): void;
                    setBoolean(arg0: _javatypes.java.lang.Object, arg1: boolean): void;
                    setByte(arg0: _javatypes.java.lang.Object, arg1: number): void;
                    setChar(arg0: _javatypes.java.lang.Object, arg1: number): void;
                    setShort(arg0: _javatypes.java.lang.Object, arg1: number): void;
                    setInt(arg0: _javatypes.java.lang.Object, arg1: number): void;
                    setLong(arg0: _javatypes.java.lang.Object, arg1: number): void;
                    setFloat(arg0: _javatypes.java.lang.Object, arg1: number): void;
                    setDouble(arg0: _javatypes.java.lang.Object, arg1: number): void;
                    getAnnotation<T>(arg0: _javatypes.java.lang.Class<T>): T;
                    getAnnotationsByType<T>(arg0: _javatypes.java.lang.Class<T>): T[];
                    getDeclaredAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                    getAnnotatedType(): _javatypes.java.lang.reflect.AnnotatedType;
                    
                }
                namespace Field {
                    interface static {
                        
                        
                        
                    }
                }
                interface AccessibleObject extends _javatypes.java.lang.Object, _javatypes.java.lang.reflect.AnnotatedElement {
                    
                    setAccessible(arg0: boolean): void;
                    trySetAccessible(): boolean;
                    isAccessible(): boolean;
                    canAccess(arg0: _javatypes.java.lang.Object): boolean;
                    getAnnotation<T>(arg0: _javatypes.java.lang.Class<T>): T;
                    isAnnotationPresent(arg0: _javatypes.java.lang.Class<any>): boolean;
                    getAnnotationsByType<T>(arg0: _javatypes.java.lang.Class<T>): T[];
                    getAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                    getDeclaredAnnotation<T>(arg0: _javatypes.java.lang.Class<T>): T;
                    getDeclaredAnnotationsByType<T>(arg0: _javatypes.java.lang.Class<T>): T[];
                    getDeclaredAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                    
                }
                namespace AccessibleObject {
                    interface static {
                        
                        
                        setAccessible(arg0: _javatypes.java.lang.reflect.AccessibleObject[], arg1: boolean): void;
                        
                    }
                }
                interface Type extends _javatypes.java.lang.Interface {
                    
                    getTypeName(): string;
                    
                }
                namespace Type {
                    interface static {
                        
                        
                        
                    }
                }
                interface Member extends _javatypes.java.lang.Interface {
                    
                    getDeclaringClass(): _javatypes.java.lang.Class<any>;
                    getName(): string;
                    getModifiers(): number;
                    isSynthetic(): boolean;
                    
                }
                namespace Member {
                    interface static {
                        
                        readonly PUBLIC: number;
                        readonly DECLARED: number;
                        
                        
                    }
                }
                interface TypeVariable<D> extends _javatypes.java.lang.Interface, _javatypes.java.lang.reflect.Type, _javatypes.java.lang.reflect.AnnotatedElement {
                    
                    getBounds(): _javatypes.java.lang.reflect.Type[];
                    getGenericDeclaration(): D;
                    getName(): string;
                    getAnnotatedBounds(): _javatypes.java.lang.reflect.AnnotatedType[];
                    
                }
                namespace TypeVariable {
                    interface static {
                        
                        
                        
                    }
                }
                interface Executable extends _javatypes.java.lang.reflect.AccessibleObject, _javatypes.java.lang.reflect.Member, _javatypes.java.lang.reflect.GenericDeclaration {
                    
                    getDeclaringClass(): _javatypes.java.lang.Class<any>;
                    getName(): string;
                    getModifiers(): number;
                    getTypeParameters(): _javatypes.java.lang.reflect.TypeVariable<any>[];
                    getParameterTypes(): _javatypes.java.lang.Class<any>[];
                    getParameterCount(): number;
                    getGenericParameterTypes(): _javatypes.java.lang.reflect.Type[];
                    getParameters(): _javatypes.java.lang.reflect.Parameter[];
                    getExceptionTypes(): _javatypes.java.lang.Class<any>[];
                    getGenericExceptionTypes(): _javatypes.java.lang.reflect.Type[];
                    toGenericString(): string;
                    isVarArgs(): boolean;
                    isSynthetic(): boolean;
                    getParameterAnnotations(): _javatypes.java.lang.annotation.Annotation[][];
                    getAnnotation<T>(arg0: _javatypes.java.lang.Class<T>): T;
                    getAnnotationsByType<T>(arg0: _javatypes.java.lang.Class<T>): T[];
                    getDeclaredAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                    getAnnotatedReturnType(): _javatypes.java.lang.reflect.AnnotatedType;
                    getAnnotatedReceiverType(): _javatypes.java.lang.reflect.AnnotatedType;
                    getAnnotatedParameterTypes(): _javatypes.java.lang.reflect.AnnotatedType[];
                    getAnnotatedExceptionTypes(): _javatypes.java.lang.reflect.AnnotatedType[];
                    
                }
                namespace Executable {
                    interface static {
                        
                        
                        
                    }
                }
                interface AnnotatedType extends _javatypes.java.lang.Interface, _javatypes.java.lang.reflect.AnnotatedElement {
                    
                    getAnnotatedOwnerType(): _javatypes.java.lang.reflect.AnnotatedType;
                    getType(): _javatypes.java.lang.reflect.Type;
                    getAnnotation<T>(arg0: _javatypes.java.lang.Class<T>): T;
                    getAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                    getDeclaredAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                    
                }
                namespace AnnotatedType {
                    interface static {
                        
                        
                        
                    }
                }
                interface AnnotatedElement extends _javatypes.java.lang.Interface {
                    
                    isAnnotationPresent(arg0: _javatypes.java.lang.Class<any>): boolean;
                    getAnnotation<T>(arg0: _javatypes.java.lang.Class<T>): T;
                    getAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                    getAnnotationsByType<T>(arg0: _javatypes.java.lang.Class<T>): T[];
                    getDeclaredAnnotation<T>(arg0: _javatypes.java.lang.Class<T>): T;
                    getDeclaredAnnotationsByType<T>(arg0: _javatypes.java.lang.Class<T>): T[];
                    getDeclaredAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                    
                }
                namespace AnnotatedElement {
                    interface static {
                        
                        
                        
                    }
                }
                interface Parameter extends _javatypes.java.lang.Object, _javatypes.java.lang.reflect.AnnotatedElement {
                    
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    isNamePresent(): boolean;
                    toString(): string;
                    getDeclaringExecutable(): _javatypes.java.lang.reflect.Executable;
                    getModifiers(): number;
                    getName(): string;
                    getParameterizedType(): _javatypes.java.lang.reflect.Type;
                    getType(): _javatypes.java.lang.Class<any>;
                    getAnnotatedType(): _javatypes.java.lang.reflect.AnnotatedType;
                    isImplicit(): boolean;
                    isSynthetic(): boolean;
                    isVarArgs(): boolean;
                    getAnnotation<T>(arg0: _javatypes.java.lang.Class<T>): T;
                    getAnnotationsByType<T>(arg0: _javatypes.java.lang.Class<T>): T[];
                    getDeclaredAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                    getDeclaredAnnotation<T>(arg0: _javatypes.java.lang.Class<T>): T;
                    getDeclaredAnnotationsByType<T>(arg0: _javatypes.java.lang.Class<T>): T[];
                    getAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                    
                }
                namespace Parameter {
                    interface static {
                        
                        
                        
                    }
                }
                interface GenericDeclaration extends _javatypes.java.lang.Interface, _javatypes.java.lang.reflect.AnnotatedElement {
                    
                    getTypeParameters(): _javatypes.java.lang.reflect.TypeVariable<any>[];
                    
                }
                namespace GenericDeclaration {
                    interface static {
                        
                        
                        
                    }
                }
                interface Constructor<T> extends _javatypes.java.lang.reflect.Executable {
                    
                    setAccessible(arg0: boolean): void;
                    getDeclaringClass(): _javatypes.java.lang.Class<T>;
                    getName(): string;
                    getModifiers(): number;
                    getTypeParameters(): _javatypes.java.lang.reflect.TypeVariable<_javatypes.java.lang.reflect.Constructor<T>>[];
                    getParameterTypes(): _javatypes.java.lang.Class<any>[];
                    getParameterCount(): number;
                    getGenericParameterTypes(): _javatypes.java.lang.reflect.Type[];
                    getExceptionTypes(): _javatypes.java.lang.Class<any>[];
                    getGenericExceptionTypes(): _javatypes.java.lang.reflect.Type[];
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    toGenericString(): string;
                    newInstance(arg0: _javatypes.java.lang.Object[]): T;
                    isVarArgs(): boolean;
                    isSynthetic(): boolean;
                    getAnnotation<T>(arg0: _javatypes.java.lang.Class<T>): T;
                    getDeclaredAnnotations(): _javatypes.java.lang.annotation.Annotation[];
                    getParameterAnnotations(): _javatypes.java.lang.annotation.Annotation[][];
                    getAnnotatedReturnType(): _javatypes.java.lang.reflect.AnnotatedType;
                    getAnnotatedReceiverType(): _javatypes.java.lang.reflect.AnnotatedType;
                    
                }
                namespace Constructor {
                    interface static {
                        
                        
                        
                    }
                }
            }
        
            namespace annotation {
            
                interface Annotation extends _javatypes.java.lang.Interface {
                    
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    annotationType(): _javatypes.java.lang.Class<any>;
                    
                }
                namespace Annotation {
                    interface static {
                        
                        
                        
                    }
                }
            }
        
            namespace ref {
            
                interface WeakReference<T> extends _javatypes.java.lang.ref.Reference<T> {
                    
                    
                }
                namespace WeakReference {
                    interface static {
                        new <T>(arg0: T): _javatypes.java.lang.ref.WeakReference<T>;
                        new <T>(arg0: T, arg1: _javatypes.java.lang.ref.ReferenceQueue<any>): _javatypes.java.lang.ref.WeakReference<T>;
                        
                        
                        
                    }
                }
                interface Reference<T> extends _javatypes.java.lang.Object {
                    
                    get(): T;
                    refersTo(arg0: T): boolean;
                    clear(): void;
                    isEnqueued(): boolean;
                    enqueue(): boolean;
                    
                }
                namespace Reference {
                    interface static {
                        
                        
                        reachabilityFence(arg0: _javatypes.java.lang.Object): void;
                        
                    }
                }
                interface ReferenceQueue<T> extends _javatypes.java.lang.Object {
                    
                    poll(): _javatypes.java.lang.ref.Reference<any>;
                    remove(arg0: number): _javatypes.java.lang.ref.Reference<any>;
                    remove(): _javatypes.java.lang.ref.Reference<any>;
                    
                }
                namespace ReferenceQueue {
                    interface static {
                        new <T>(): _javatypes.java.lang.ref.ReferenceQueue<T>;
                        
                        
                        
                    }
                }
            }
        
            namespace constant {
            
                interface Constable extends _javatypes.java.lang.Interface {
                    
                    describeConstable(): _javatypes.java.util.Optional<any>;
                    
                }
                namespace Constable {
                    interface static {
                        
                        
                        
                    }
                }
                interface ClassDesc extends _javatypes.java.lang.Interface, _javatypes.java.lang.constant.ConstantDesc, _javatypes.java.lang.invoke.TypeDescriptor$OfField<_javatypes.java.lang.constant.ClassDesc> {
                    
                    arrayType(): _javatypes.java.lang.constant.ClassDesc;
                    arrayType(arg0: number): _javatypes.java.lang.constant.ClassDesc;
                    nested(arg0: string): _javatypes.java.lang.constant.ClassDesc;
                    nested(arg0: string, arg1: string[]): _javatypes.java.lang.constant.ClassDesc;
                    isArray(): boolean;
                    isPrimitive(): boolean;
                    isClassOrInterface(): boolean;
                    componentType(): _javatypes.java.lang.constant.ClassDesc;
                    packageName(): string;
                    displayName(): string;
                    descriptorString(): string;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    
                }
                namespace ClassDesc {
                    interface static {
                        
                        
                        of(arg0: string): _javatypes.java.lang.constant.ClassDesc;
                        of(arg0: string, arg1: string): _javatypes.java.lang.constant.ClassDesc;
                        ofDescriptor(arg0: string): _javatypes.java.lang.constant.ClassDesc;
                        
                    }
                }
                interface DynamicConstantDesc<T> extends _javatypes.java.lang.Object, _javatypes.java.lang.constant.ConstantDesc {
                    
                    constantName(): string;
                    constantType(): _javatypes.java.lang.constant.ClassDesc;
                    bootstrapMethod(): _javatypes.java.lang.constant.DirectMethodHandleDesc;
                    bootstrapArgs(): _javatypes.java.lang.constant.ConstantDesc[];
                    bootstrapArgsList(): _javatypes.java.util.List<_javatypes.java.lang.constant.ConstantDesc>;
                    resolveConstantDesc(arg0: _javatypes.java.lang.invoke.MethodHandles$Lookup): T;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace DynamicConstantDesc {
                    interface static {
                        
                        
                        ofCanonical<T>(arg0: _javatypes.java.lang.constant.DirectMethodHandleDesc, arg1: string, arg2: _javatypes.java.lang.constant.ClassDesc, arg3: _javatypes.java.lang.constant.ConstantDesc[]): _javatypes.java.lang.constant.ConstantDesc;
                        ofNamed<T>(arg0: _javatypes.java.lang.constant.DirectMethodHandleDesc, arg1: string, arg2: _javatypes.java.lang.constant.ClassDesc, arg3: _javatypes.java.lang.constant.ConstantDesc[]): _javatypes.java.lang.constant.DynamicConstantDesc<T>;
                        of<T>(arg0: _javatypes.java.lang.constant.DirectMethodHandleDesc, arg1: _javatypes.java.lang.constant.ConstantDesc[]): _javatypes.java.lang.constant.DynamicConstantDesc<T>;
                        of<T>(arg0: _javatypes.java.lang.constant.DirectMethodHandleDesc): _javatypes.java.lang.constant.DynamicConstantDesc<T>;
                        
                    }
                }
                interface ConstantDesc extends _javatypes.java.lang.Interface {
                    
                    resolveConstantDesc(arg0: _javatypes.java.lang.invoke.MethodHandles$Lookup): _javatypes.java.lang.Object;
                    
                }
                namespace ConstantDesc {
                    interface static {
                        
                        
                        
                    }
                }
                interface DirectMethodHandleDesc extends _javatypes.java.lang.Interface, _javatypes.java.lang.constant.MethodHandleDesc {
                    
                    kind(): _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                    refKind(): number;
                    isOwnerInterface(): boolean;
                    owner(): _javatypes.java.lang.constant.ClassDesc;
                    methodName(): string;
                    lookupDescriptor(): string;
                    
                }
                namespace DirectMethodHandleDesc {
                    interface static {
                        
                        
                        
                    }
                }
                interface DirectMethodHandleDesc$Kind extends _javatypes.java.lang.Enum<_javatypes.java.lang.constant.DirectMethodHandleDesc$Kind> {
                    readonly refKind: number;
                    readonly isInterface: boolean;
                    
                    
                }
                namespace DirectMethodHandleDesc$Kind {
                    interface static {
                        
                        readonly STATIC: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        readonly INTERFACE_STATIC: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        readonly VIRTUAL: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        readonly INTERFACE_VIRTUAL: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        readonly SPECIAL: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        readonly INTERFACE_SPECIAL: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        readonly CONSTRUCTOR: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        readonly GETTER: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        readonly SETTER: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        readonly STATIC_GETTER: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        readonly STATIC_SETTER: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        
                        values(): _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind[];
                        valueOf(arg0: string): _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        valueOf(arg0: number): _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        valueOf(arg0: number, arg1: boolean): _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind;
                        
                    }
                }
                interface MethodHandleDesc extends _javatypes.java.lang.Interface, _javatypes.java.lang.constant.ConstantDesc {
                    
                    asType(arg0: _javatypes.java.lang.constant.MethodTypeDesc): _javatypes.java.lang.constant.MethodHandleDesc;
                    invocationType(): _javatypes.java.lang.constant.MethodTypeDesc;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    
                }
                namespace MethodHandleDesc {
                    interface static {
                        
                        
                        of(arg0: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind, arg1: _javatypes.java.lang.constant.ClassDesc, arg2: string, arg3: string): _javatypes.java.lang.constant.DirectMethodHandleDesc;
                        ofMethod(arg0: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind, arg1: _javatypes.java.lang.constant.ClassDesc, arg2: string, arg3: _javatypes.java.lang.constant.MethodTypeDesc): _javatypes.java.lang.constant.DirectMethodHandleDesc;
                        ofField(arg0: _javatypes.java.lang.constant.DirectMethodHandleDesc$Kind, arg1: _javatypes.java.lang.constant.ClassDesc, arg2: string, arg3: _javatypes.java.lang.constant.ClassDesc): _javatypes.java.lang.constant.DirectMethodHandleDesc;
                        ofConstructor(arg0: _javatypes.java.lang.constant.ClassDesc, arg1: _javatypes.java.lang.constant.ClassDesc[]): _javatypes.java.lang.constant.DirectMethodHandleDesc;
                        
                    }
                }
                interface MethodTypeDesc extends _javatypes.java.lang.Interface, _javatypes.java.lang.constant.ConstantDesc, _javatypes.java.lang.invoke.TypeDescriptor$OfMethod<_javatypes.java.lang.constant.ClassDesc, _javatypes.java.lang.constant.MethodTypeDesc> {
                    
                    returnType(): _javatypes.java.lang.constant.ClassDesc;
                    parameterCount(): number;
                    parameterType(arg0: number): _javatypes.java.lang.constant.ClassDesc;
                    parameterList(): _javatypes.java.util.List<_javatypes.java.lang.constant.ClassDesc>;
                    parameterArray(): _javatypes.java.lang.constant.ClassDesc[];
                    changeReturnType(arg0: _javatypes.java.lang.constant.ClassDesc): _javatypes.java.lang.constant.MethodTypeDesc;
                    changeParameterType(arg0: number, arg1: _javatypes.java.lang.constant.ClassDesc): _javatypes.java.lang.constant.MethodTypeDesc;
                    dropParameterTypes(arg0: number, arg1: number): _javatypes.java.lang.constant.MethodTypeDesc;
                    insertParameterTypes(arg0: number, arg1: _javatypes.java.lang.constant.ClassDesc[]): _javatypes.java.lang.constant.MethodTypeDesc;
                    descriptorString(): string;
                    displayDescriptor(): string;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    
                }
                namespace MethodTypeDesc {
                    interface static {
                        
                        
                        ofDescriptor(arg0: string): _javatypes.java.lang.constant.MethodTypeDesc;
                        of(arg0: _javatypes.java.lang.constant.ClassDesc, arg1: _javatypes.java.lang.constant.ClassDesc[]): _javatypes.java.lang.constant.MethodTypeDesc;
                        
                    }
                }
            }
        
            namespace invoke {
            
                interface MethodHandles$Lookup extends _javatypes.java.lang.Object {
                    
                    lookupClass(): _javatypes.java.lang.Class<any>;
                    previousLookupClass(): _javatypes.java.lang.Class<any>;
                    lookupModes(): number;
                    in(arg0: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.MethodHandles$Lookup;
                    dropLookupMode(arg0: number): _javatypes.java.lang.invoke.MethodHandles$Lookup;
                    defineClass(arg0: number[]): _javatypes.java.lang.Class<any>;
                    defineHiddenClass(arg0: number[], arg1: boolean, arg2: _javatypes.java.lang.invoke.MethodHandles$Lookup$ClassOption[]): _javatypes.java.lang.invoke.MethodHandles$Lookup;
                    defineHiddenClassWithClassData(arg0: number[], arg1: _javatypes.java.lang.Object, arg2: boolean, arg3: _javatypes.java.lang.invoke.MethodHandles$Lookup$ClassOption[]): _javatypes.java.lang.invoke.MethodHandles$Lookup;
                    toString(): string;
                    findStatic(arg0: _javatypes.java.lang.Class<any>, arg1: string, arg2: _javatypes.java.lang.invoke.MethodType): _javatypes.java.lang.invoke.MethodHandle;
                    findVirtual(arg0: _javatypes.java.lang.Class<any>, arg1: string, arg2: _javatypes.java.lang.invoke.MethodType): _javatypes.java.lang.invoke.MethodHandle;
                    findConstructor(arg0: _javatypes.java.lang.Class<any>, arg1: _javatypes.java.lang.invoke.MethodType): _javatypes.java.lang.invoke.MethodHandle;
                    findClass(arg0: string): _javatypes.java.lang.Class<any>;
                    ensureInitialized(arg0: _javatypes.java.lang.Class<any>): _javatypes.java.lang.Class<any>;
                    accessClass(arg0: _javatypes.java.lang.Class<any>): _javatypes.java.lang.Class<any>;
                    findSpecial(arg0: _javatypes.java.lang.Class<any>, arg1: string, arg2: _javatypes.java.lang.invoke.MethodType, arg3: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.MethodHandle;
                    findGetter(arg0: _javatypes.java.lang.Class<any>, arg1: string, arg2: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.MethodHandle;
                    findSetter(arg0: _javatypes.java.lang.Class<any>, arg1: string, arg2: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.MethodHandle;
                    findVarHandle(arg0: _javatypes.java.lang.Class<any>, arg1: string, arg2: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.VarHandle;
                    findStaticGetter(arg0: _javatypes.java.lang.Class<any>, arg1: string, arg2: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.MethodHandle;
                    findStaticSetter(arg0: _javatypes.java.lang.Class<any>, arg1: string, arg2: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.MethodHandle;
                    findStaticVarHandle(arg0: _javatypes.java.lang.Class<any>, arg1: string, arg2: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.VarHandle;
                    bind(arg0: _javatypes.java.lang.Object, arg1: string, arg2: _javatypes.java.lang.invoke.MethodType): _javatypes.java.lang.invoke.MethodHandle;
                    unreflect(arg0: _javatypes.java.lang.reflect.Method): _javatypes.java.lang.invoke.MethodHandle;
                    unreflectSpecial(arg0: _javatypes.java.lang.reflect.Method, arg1: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.MethodHandle;
                    unreflectConstructor(arg0: _javatypes.java.lang.reflect.Constructor<any>): _javatypes.java.lang.invoke.MethodHandle;
                    unreflectGetter(arg0: _javatypes.java.lang.reflect.Field): _javatypes.java.lang.invoke.MethodHandle;
                    unreflectSetter(arg0: _javatypes.java.lang.reflect.Field): _javatypes.java.lang.invoke.MethodHandle;
                    unreflectVarHandle(arg0: _javatypes.java.lang.reflect.Field): _javatypes.java.lang.invoke.VarHandle;
                    revealDirect(arg0: _javatypes.java.lang.invoke.MethodHandle): _javatypes.java.lang.invoke.MethodHandleInfo;
                    hasPrivateAccess(): boolean;
                    hasFullPrivilegeAccess(): boolean;
                    
                }
                namespace MethodHandles$Lookup {
                    interface static {
                        
                        readonly PUBLIC: number;
                        readonly PRIVATE: number;
                        readonly PROTECTED: number;
                        readonly PACKAGE: number;
                        readonly MODULE: number;
                        readonly UNCONDITIONAL: number;
                        readonly ORIGINAL: number;
                        
                        
                    }
                }
                interface TypeDescriptor$OfMethod<F, M> extends _javatypes.java.lang.Interface, _javatypes.java.lang.invoke.TypeDescriptor {
                    
                    parameterCount(): number;
                    parameterType(arg0: number): F;
                    returnType(): F;
                    parameterArray(): F[];
                    parameterList(): _javatypes.java.util.List<F>;
                    changeReturnType(arg0: F): M;
                    changeParameterType(arg0: number, arg1: F): M;
                    dropParameterTypes(arg0: number, arg1: number): M;
                    insertParameterTypes(arg0: number, arg1: F[]): M;
                    
                }
                namespace TypeDescriptor$OfMethod {
                    interface static {
                        
                        
                        
                    }
                }
                interface TypeDescriptor$OfField<F> extends _javatypes.java.lang.Interface, _javatypes.java.lang.invoke.TypeDescriptor {
                    
                    isArray(): boolean;
                    isPrimitive(): boolean;
                    componentType(): F;
                    arrayType(): F;
                    
                }
                namespace TypeDescriptor$OfField {
                    interface static {
                        
                        
                        
                    }
                }
                interface MethodHandleInfo extends _javatypes.java.lang.Interface {
                    
                    getReferenceKind(): number;
                    getDeclaringClass(): _javatypes.java.lang.Class<any>;
                    getName(): string;
                    getMethodType(): _javatypes.java.lang.invoke.MethodType;
                    reflectAs<T>(arg0: _javatypes.java.lang.Class<T>, arg1: _javatypes.java.lang.invoke.MethodHandles$Lookup): T;
                    getModifiers(): number;
                    isVarArgs(): boolean;
                    
                }
                namespace MethodHandleInfo {
                    interface static {
                        
                        readonly REF_getField: number;
                        readonly REF_getStatic: number;
                        readonly REF_putField: number;
                        readonly REF_putStatic: number;
                        readonly REF_invokeVirtual: number;
                        readonly REF_invokeStatic: number;
                        readonly REF_invokeSpecial: number;
                        readonly REF_newInvokeSpecial: number;
                        readonly REF_invokeInterface: number;
                        
                        referenceKindToString(arg0: number): string;
                        toString(arg0: number, arg1: _javatypes.java.lang.Class<any>, arg2: string, arg3: _javatypes.java.lang.invoke.MethodType): string;
                        
                    }
                }
                interface TypeDescriptor extends _javatypes.java.lang.Interface {
                    
                    descriptorString(): string;
                    
                }
                namespace TypeDescriptor {
                    interface static {
                        
                        
                        
                    }
                }
                interface MethodType extends _javatypes.java.lang.Object, _javatypes.java.lang.constant.Constable, _javatypes.java.lang.invoke.TypeDescriptor$OfMethod<_javatypes.java.lang.Class<any>, _javatypes.java.lang.invoke.MethodType>, _javatypes.java.io.Serializable {
                    
                    changeParameterType(arg0: number, arg1: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.MethodType;
                    insertParameterTypes(arg0: number, arg1: _javatypes.java.lang.Class<any>[]): _javatypes.java.lang.invoke.MethodType;
                    appendParameterTypes(arg0: _javatypes.java.lang.Class<any>[]): _javatypes.java.lang.invoke.MethodType;
                    insertParameterTypes(arg0: number, arg1: _javatypes.java.util.List<_javatypes.java.lang.Class<any>>): _javatypes.java.lang.invoke.MethodType;
                    appendParameterTypes(arg0: _javatypes.java.util.List<_javatypes.java.lang.Class<any>>): _javatypes.java.lang.invoke.MethodType;
                    dropParameterTypes(arg0: number, arg1: number): _javatypes.java.lang.invoke.MethodType;
                    changeReturnType(arg0: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.MethodType;
                    hasPrimitives(): boolean;
                    hasWrappers(): boolean;
                    erase(): _javatypes.java.lang.invoke.MethodType;
                    generic(): _javatypes.java.lang.invoke.MethodType;
                    wrap(): _javatypes.java.lang.invoke.MethodType;
                    unwrap(): _javatypes.java.lang.invoke.MethodType;
                    parameterType(arg0: number): _javatypes.java.lang.Class<any>;
                    parameterCount(): number;
                    returnType(): _javatypes.java.lang.Class<any>;
                    parameterList(): _javatypes.java.util.List<_javatypes.java.lang.Class<any>>;
                    lastParameterType(): _javatypes.java.lang.Class<any>;
                    parameterArray(): _javatypes.java.lang.Class<any>[];
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    toMethodDescriptorString(): string;
                    descriptorString(): string;
                    describeConstable(): _javatypes.java.util.Optional<_javatypes.java.lang.constant.MethodTypeDesc>;
                    
                }
                namespace MethodType {
                    interface static {
                        
                        
                        methodType(arg0: _javatypes.java.lang.Class<any>, arg1: _javatypes.java.lang.Class<any>[]): _javatypes.java.lang.invoke.MethodType;
                        methodType(arg0: _javatypes.java.lang.Class<any>, arg1: _javatypes.java.util.List<_javatypes.java.lang.Class<any>>): _javatypes.java.lang.invoke.MethodType;
                        methodType(arg0: _javatypes.java.lang.Class<any>, arg1: _javatypes.java.lang.Class<any>, arg2: _javatypes.java.lang.Class<any>[]): _javatypes.java.lang.invoke.MethodType;
                        methodType(arg0: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.MethodType;
                        methodType(arg0: _javatypes.java.lang.Class<any>, arg1: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.MethodType;
                        methodType(arg0: _javatypes.java.lang.Class<any>, arg1: _javatypes.java.lang.invoke.MethodType): _javatypes.java.lang.invoke.MethodType;
                        genericMethodType(arg0: number, arg1: boolean): _javatypes.java.lang.invoke.MethodType;
                        genericMethodType(arg0: number): _javatypes.java.lang.invoke.MethodType;
                        fromMethodDescriptorString(arg0: string, arg1: _javatypes.java.lang.ClassLoader): _javatypes.java.lang.invoke.MethodType;
                        
                    }
                }
                interface MethodHandle extends _javatypes.java.lang.Object, _javatypes.java.lang.constant.Constable {
                    
                    type(): _javatypes.java.lang.invoke.MethodType;
                    invokeExact(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    invoke(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    invokeWithArguments(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    invokeWithArguments(arg0: _javatypes.java.util.List<any>): _javatypes.java.lang.Object;
                    asType(arg0: _javatypes.java.lang.invoke.MethodType): _javatypes.java.lang.invoke.MethodHandle;
                    asSpreader(arg0: _javatypes.java.lang.Class<any>, arg1: number): _javatypes.java.lang.invoke.MethodHandle;
                    asSpreader(arg0: number, arg1: _javatypes.java.lang.Class<any>, arg2: number): _javatypes.java.lang.invoke.MethodHandle;
                    withVarargs(arg0: boolean): _javatypes.java.lang.invoke.MethodHandle;
                    asCollector(arg0: _javatypes.java.lang.Class<any>, arg1: number): _javatypes.java.lang.invoke.MethodHandle;
                    asCollector(arg0: number, arg1: _javatypes.java.lang.Class<any>, arg2: number): _javatypes.java.lang.invoke.MethodHandle;
                    asVarargsCollector(arg0: _javatypes.java.lang.Class<any>): _javatypes.java.lang.invoke.MethodHandle;
                    isVarargsCollector(): boolean;
                    asFixedArity(): _javatypes.java.lang.invoke.MethodHandle;
                    bindTo(arg0: _javatypes.java.lang.Object): _javatypes.java.lang.invoke.MethodHandle;
                    describeConstable(): _javatypes.java.util.Optional<_javatypes.java.lang.constant.MethodHandleDesc>;
                    toString(): string;
                    
                }
                namespace MethodHandle {
                    interface static {
                        
                        
                        
                    }
                }
                interface VarHandle extends _javatypes.java.lang.Object, _javatypes.java.lang.constant.Constable {
                    
                    hasInvokeExactBehavior(): boolean;
                    get(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    set(arg0: _javatypes.java.lang.Object[]): void;
                    getVolatile(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    setVolatile(arg0: _javatypes.java.lang.Object[]): void;
                    getOpaque(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    setOpaque(arg0: _javatypes.java.lang.Object[]): void;
                    getAcquire(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    setRelease(arg0: _javatypes.java.lang.Object[]): void;
                    compareAndSet(arg0: _javatypes.java.lang.Object[]): boolean;
                    compareAndExchange(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    compareAndExchangeAcquire(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    compareAndExchangeRelease(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    weakCompareAndSetPlain(arg0: _javatypes.java.lang.Object[]): boolean;
                    weakCompareAndSet(arg0: _javatypes.java.lang.Object[]): boolean;
                    weakCompareAndSetAcquire(arg0: _javatypes.java.lang.Object[]): boolean;
                    weakCompareAndSetRelease(arg0: _javatypes.java.lang.Object[]): boolean;
                    getAndSet(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndSetAcquire(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndSetRelease(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndAdd(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndAddAcquire(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndAddRelease(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndBitwiseOr(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndBitwiseOrAcquire(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndBitwiseOrRelease(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndBitwiseAnd(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndBitwiseAndAcquire(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndBitwiseAndRelease(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndBitwiseXor(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndBitwiseXorAcquire(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    getAndBitwiseXorRelease(arg0: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                    withInvokeExactBehavior(): _javatypes.java.lang.invoke.VarHandle;
                    withInvokeBehavior(): _javatypes.java.lang.invoke.VarHandle;
                    toString(): string;
                    varType(): _javatypes.java.lang.Class<any>;
                    coordinateTypes(): _javatypes.java.util.List<_javatypes.java.lang.Class<any>>;
                    accessModeType(arg0: _javatypes.java.lang.invoke.VarHandle$AccessMode): _javatypes.java.lang.invoke.MethodType;
                    isAccessModeSupported(arg0: _javatypes.java.lang.invoke.VarHandle$AccessMode): boolean;
                    toMethodHandle(arg0: _javatypes.java.lang.invoke.VarHandle$AccessMode): _javatypes.java.lang.invoke.MethodHandle;
                    describeConstable(): _javatypes.java.util.Optional<_javatypes.java.lang.invoke.VarHandle$VarHandleDesc>;
                    
                }
                namespace VarHandle {
                    interface static {
                        
                        
                        fullFence(): void;
                        acquireFence(): void;
                        releaseFence(): void;
                        loadLoadFence(): void;
                        storeStoreFence(): void;
                        
                    }
                }
                interface MethodHandles$Lookup$ClassOption extends _javatypes.java.lang.Enum<_javatypes.java.lang.invoke.MethodHandles$Lookup$ClassOption> {
                    
                    
                }
                namespace MethodHandles$Lookup$ClassOption {
                    interface static {
                        
                        readonly NESTMATE: _javatypes.java.lang.invoke.MethodHandles$Lookup$ClassOption;
                        readonly STRONG: _javatypes.java.lang.invoke.MethodHandles$Lookup$ClassOption;
                        
                        values(): _javatypes.java.lang.invoke.MethodHandles$Lookup$ClassOption[];
                        valueOf(arg0: string): _javatypes.java.lang.invoke.MethodHandles$Lookup$ClassOption;
                        
                    }
                }
                interface VarHandle$VarHandleDesc extends _javatypes.java.lang.constant.DynamicConstantDesc<_javatypes.java.lang.invoke.VarHandle> {
                    
                    varType(): _javatypes.java.lang.constant.ClassDesc;
                    resolveConstantDesc(arg0: _javatypes.java.lang.invoke.MethodHandles$Lookup): _javatypes.java.lang.invoke.VarHandle;
                    toString(): string;
                    
                }
                namespace VarHandle$VarHandleDesc {
                    interface static {
                        
                        
                        ofField(arg0: _javatypes.java.lang.constant.ClassDesc, arg1: string, arg2: _javatypes.java.lang.constant.ClassDesc): _javatypes.java.lang.invoke.VarHandle$VarHandleDesc;
                        ofStaticField(arg0: _javatypes.java.lang.constant.ClassDesc, arg1: string, arg2: _javatypes.java.lang.constant.ClassDesc): _javatypes.java.lang.invoke.VarHandle$VarHandleDesc;
                        ofArray(arg0: _javatypes.java.lang.constant.ClassDesc): _javatypes.java.lang.invoke.VarHandle$VarHandleDesc;
                        
                    }
                }
                interface VarHandle$AccessMode extends _javatypes.java.lang.Enum<_javatypes.java.lang.invoke.VarHandle$AccessMode> {
                    
                    methodName(): string;
                    
                }
                namespace VarHandle$AccessMode {
                    interface static {
                        
                        readonly GET: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly SET: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_VOLATILE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly SET_VOLATILE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_ACQUIRE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly SET_RELEASE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_OPAQUE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly SET_OPAQUE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly COMPARE_AND_SET: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly COMPARE_AND_EXCHANGE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly COMPARE_AND_EXCHANGE_ACQUIRE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly COMPARE_AND_EXCHANGE_RELEASE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly WEAK_COMPARE_AND_SET_PLAIN: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly WEAK_COMPARE_AND_SET: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly WEAK_COMPARE_AND_SET_ACQUIRE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly WEAK_COMPARE_AND_SET_RELEASE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_SET: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_SET_ACQUIRE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_SET_RELEASE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_ADD: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_ADD_ACQUIRE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_ADD_RELEASE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_BITWISE_OR: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_BITWISE_OR_RELEASE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_BITWISE_OR_ACQUIRE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_BITWISE_AND: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_BITWISE_AND_RELEASE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_BITWISE_AND_ACQUIRE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_BITWISE_XOR: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_BITWISE_XOR_RELEASE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        readonly GET_AND_BITWISE_XOR_ACQUIRE: _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        
                        values(): _javatypes.java.lang.invoke.VarHandle$AccessMode[];
                        valueOf(arg0: string): _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        valueFromMethodName(arg0: string): _javatypes.java.lang.invoke.VarHandle$AccessMode;
                        
                    }
                }
            }
        
            namespace module {
            
                interface ModuleDescriptor extends _javatypes.java.lang.Object, _javatypes.java.lang.Comparable<_javatypes.java.lang.module.ModuleDescriptor> {
                    
                    name(): string;
                    modifiers(): _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Modifier>;
                    isOpen(): boolean;
                    isAutomatic(): boolean;
                    requires(): _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Requires>;
                    exports(): _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Exports>;
                    opens(): _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Opens>;
                    uses(): _javatypes.java.util.Set<string>;
                    provides(): _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Provides>;
                    version(): _javatypes.java.util.Optional<_javatypes.java.lang.module.ModuleDescriptor$Version>;
                    rawVersion(): _javatypes.java.util.Optional<string>;
                    toNameAndVersion(): string;
                    mainClass(): _javatypes.java.util.Optional<string>;
                    packages(): _javatypes.java.util.Set<string>;
                    compareTo(arg0: _javatypes.java.lang.module.ModuleDescriptor): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace ModuleDescriptor {
                    interface static {
                        
                        
                        newModule(arg0: string, arg1: _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Modifier>): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                        newModule(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                        newOpenModule(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                        newAutomaticModule(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                        read(arg0: _javatypes.java.io.InputStream, arg1: _javatypes.java.util._function.Supplier<_javatypes.java.util.Set<string>>): _javatypes.java.lang.module.ModuleDescriptor;
                        read(arg0: _javatypes.java.io.InputStream): _javatypes.java.lang.module.ModuleDescriptor;
                        read(arg0: _javatypes.java.nio.ByteBuffer, arg1: _javatypes.java.util._function.Supplier<_javatypes.java.util.Set<string>>): _javatypes.java.lang.module.ModuleDescriptor;
                        read(arg0: _javatypes.java.nio.ByteBuffer): _javatypes.java.lang.module.ModuleDescriptor;
                        
                    }
                }
                interface ModuleDescriptor$Builder extends _javatypes.java.lang.Object {
                    
                    requires(arg0: _javatypes.java.lang.module.ModuleDescriptor$Requires): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    requires(arg0: _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Requires$Modifier>, arg1: string, arg2: _javatypes.java.lang.module.ModuleDescriptor$Version): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    requires(arg0: _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Requires$Modifier>, arg1: string): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    requires(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    exports(arg0: _javatypes.java.lang.module.ModuleDescriptor$Exports): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    exports(arg0: _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Exports$Modifier>, arg1: string, arg2: _javatypes.java.util.Set<string>): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    exports(arg0: _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Exports$Modifier>, arg1: string): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    exports(arg0: string, arg1: _javatypes.java.util.Set<string>): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    exports(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    opens(arg0: _javatypes.java.lang.module.ModuleDescriptor$Opens): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    opens(arg0: _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Opens$Modifier>, arg1: string, arg2: _javatypes.java.util.Set<string>): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    opens(arg0: _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Opens$Modifier>, arg1: string): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    opens(arg0: string, arg1: _javatypes.java.util.Set<string>): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    opens(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    uses(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    provides(arg0: _javatypes.java.lang.module.ModuleDescriptor$Provides): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    provides(arg0: string, arg1: _javatypes.java.util.List<string>): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    packages(arg0: _javatypes.java.util.Set<string>): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    version(arg0: _javatypes.java.lang.module.ModuleDescriptor$Version): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    version(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    mainClass(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Builder;
                    build(): _javatypes.java.lang.module.ModuleDescriptor;
                    
                }
                namespace ModuleDescriptor$Builder {
                    interface static {
                        
                        
                        
                    }
                }
                interface ModuleDescriptor$Exports extends _javatypes.java.lang.Object, _javatypes.java.lang.Comparable<_javatypes.java.lang.module.ModuleDescriptor$Exports> {
                    
                    modifiers(): _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Exports$Modifier>;
                    isQualified(): boolean;
                    source(): string;
                    targets(): _javatypes.java.util.Set<string>;
                    compareTo(arg0: _javatypes.java.lang.module.ModuleDescriptor$Exports): number;
                    hashCode(): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    toString(): string;
                    
                }
                namespace ModuleDescriptor$Exports {
                    interface static {
                        
                        
                        
                    }
                }
                interface ModuleDescriptor$Requires extends _javatypes.java.lang.Object, _javatypes.java.lang.Comparable<_javatypes.java.lang.module.ModuleDescriptor$Requires> {
                    
                    modifiers(): _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Requires$Modifier>;
                    name(): string;
                    compiledVersion(): _javatypes.java.util.Optional<_javatypes.java.lang.module.ModuleDescriptor$Version>;
                    rawCompiledVersion(): _javatypes.java.util.Optional<string>;
                    compareTo(arg0: _javatypes.java.lang.module.ModuleDescriptor$Requires): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace ModuleDescriptor$Requires {
                    interface static {
                        
                        
                        
                    }
                }
                interface ModuleDescriptor$Opens extends _javatypes.java.lang.Object, _javatypes.java.lang.Comparable<_javatypes.java.lang.module.ModuleDescriptor$Opens> {
                    
                    modifiers(): _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleDescriptor$Opens$Modifier>;
                    isQualified(): boolean;
                    source(): string;
                    targets(): _javatypes.java.util.Set<string>;
                    compareTo(arg0: _javatypes.java.lang.module.ModuleDescriptor$Opens): number;
                    hashCode(): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    toString(): string;
                    
                }
                namespace ModuleDescriptor$Opens {
                    interface static {
                        
                        
                        
                    }
                }
                interface ModuleDescriptor$Modifier extends _javatypes.java.lang.Enum<_javatypes.java.lang.module.ModuleDescriptor$Modifier> {
                    
                    
                }
                namespace ModuleDescriptor$Modifier {
                    interface static {
                        
                        readonly OPEN: _javatypes.java.lang.module.ModuleDescriptor$Modifier;
                        readonly AUTOMATIC: _javatypes.java.lang.module.ModuleDescriptor$Modifier;
                        readonly SYNTHETIC: _javatypes.java.lang.module.ModuleDescriptor$Modifier;
                        readonly MANDATED: _javatypes.java.lang.module.ModuleDescriptor$Modifier;
                        
                        values(): _javatypes.java.lang.module.ModuleDescriptor$Modifier[];
                        valueOf(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Modifier;
                        
                    }
                }
                interface ModuleDescriptor$Provides extends _javatypes.java.lang.Object, _javatypes.java.lang.Comparable<_javatypes.java.lang.module.ModuleDescriptor$Provides> {
                    
                    service(): string;
                    providers(): _javatypes.java.util.List<string>;
                    compareTo(arg0: _javatypes.java.lang.module.ModuleDescriptor$Provides): number;
                    hashCode(): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    toString(): string;
                    
                }
                namespace ModuleDescriptor$Provides {
                    interface static {
                        
                        
                        
                    }
                }
                interface ModuleDescriptor$Version extends _javatypes.java.lang.Object, _javatypes.java.lang.Comparable<_javatypes.java.lang.module.ModuleDescriptor$Version> {
                    
                    compareTo(arg0: _javatypes.java.lang.module.ModuleDescriptor$Version): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace ModuleDescriptor$Version {
                    interface static {
                        
                        
                        parse(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Version;
                        
                    }
                }
                interface ModuleDescriptor$Exports$Modifier extends _javatypes.java.lang.Enum<_javatypes.java.lang.module.ModuleDescriptor$Exports$Modifier> {
                    
                    
                }
                namespace ModuleDescriptor$Exports$Modifier {
                    interface static {
                        
                        readonly SYNTHETIC: _javatypes.java.lang.module.ModuleDescriptor$Exports$Modifier;
                        readonly MANDATED: _javatypes.java.lang.module.ModuleDescriptor$Exports$Modifier;
                        
                        values(): _javatypes.java.lang.module.ModuleDescriptor$Exports$Modifier[];
                        valueOf(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Exports$Modifier;
                        
                    }
                }
                interface ModuleDescriptor$Opens$Modifier extends _javatypes.java.lang.Enum<_javatypes.java.lang.module.ModuleDescriptor$Opens$Modifier> {
                    
                    
                }
                namespace ModuleDescriptor$Opens$Modifier {
                    interface static {
                        
                        readonly SYNTHETIC: _javatypes.java.lang.module.ModuleDescriptor$Opens$Modifier;
                        readonly MANDATED: _javatypes.java.lang.module.ModuleDescriptor$Opens$Modifier;
                        
                        values(): _javatypes.java.lang.module.ModuleDescriptor$Opens$Modifier[];
                        valueOf(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Opens$Modifier;
                        
                    }
                }
                interface ModuleDescriptor$Requires$Modifier extends _javatypes.java.lang.Enum<_javatypes.java.lang.module.ModuleDescriptor$Requires$Modifier> {
                    
                    
                }
                namespace ModuleDescriptor$Requires$Modifier {
                    interface static {
                        
                        readonly TRANSITIVE: _javatypes.java.lang.module.ModuleDescriptor$Requires$Modifier;
                        readonly STATIC: _javatypes.java.lang.module.ModuleDescriptor$Requires$Modifier;
                        readonly SYNTHETIC: _javatypes.java.lang.module.ModuleDescriptor$Requires$Modifier;
                        readonly MANDATED: _javatypes.java.lang.module.ModuleDescriptor$Requires$Modifier;
                        
                        values(): _javatypes.java.lang.module.ModuleDescriptor$Requires$Modifier[];
                        valueOf(arg0: string): _javatypes.java.lang.module.ModuleDescriptor$Requires$Modifier;
                        
                    }
                }
                interface Configuration extends _javatypes.java.lang.Object {
                    
                    resolve(arg0: _javatypes.java.lang.module.ModuleFinder, arg1: _javatypes.java.lang.module.ModuleFinder, arg2: _javatypes.java.util.Collection<string>): _javatypes.java.lang.module.Configuration;
                    resolveAndBind(arg0: _javatypes.java.lang.module.ModuleFinder, arg1: _javatypes.java.lang.module.ModuleFinder, arg2: _javatypes.java.util.Collection<string>): _javatypes.java.lang.module.Configuration;
                    parents(): _javatypes.java.util.List<_javatypes.java.lang.module.Configuration>;
                    modules(): _javatypes.java.util.Set<_javatypes.java.lang.module.ResolvedModule>;
                    findModule(arg0: string): _javatypes.java.util.Optional<_javatypes.java.lang.module.ResolvedModule>;
                    toString(): string;
                    
                }
                namespace Configuration {
                    interface static {
                        
                        
                        resolve(arg0: _javatypes.java.lang.module.ModuleFinder, arg1: _javatypes.java.util.List<_javatypes.java.lang.module.Configuration>, arg2: _javatypes.java.lang.module.ModuleFinder, arg3: _javatypes.java.util.Collection<string>): _javatypes.java.lang.module.Configuration;
                        resolveAndBind(arg0: _javatypes.java.lang.module.ModuleFinder, arg1: _javatypes.java.util.List<_javatypes.java.lang.module.Configuration>, arg2: _javatypes.java.lang.module.ModuleFinder, arg3: _javatypes.java.util.Collection<string>): _javatypes.java.lang.module.Configuration;
                        empty(): _javatypes.java.lang.module.Configuration;
                        
                    }
                }
                interface ResolvedModule extends _javatypes.java.lang.Object {
                    
                    configuration(): _javatypes.java.lang.module.Configuration;
                    reference(): _javatypes.java.lang.module.ModuleReference;
                    name(): string;
                    reads(): _javatypes.java.util.Set<_javatypes.java.lang.module.ResolvedModule>;
                    hashCode(): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    toString(): string;
                    
                }
                namespace ResolvedModule {
                    interface static {
                        
                        
                        
                    }
                }
                interface ModuleFinder extends _javatypes.java.lang.Interface {
                    
                    find(arg0: string): _javatypes.java.util.Optional<_javatypes.java.lang.module.ModuleReference>;
                    findAll(): _javatypes.java.util.Set<_javatypes.java.lang.module.ModuleReference>;
                    
                }
                namespace ModuleFinder {
                    interface static {
                        
                        
                        ofSystem(): _javatypes.java.lang.module.ModuleFinder;
                        of(arg0: _javatypes.java.nio.file.Path[]): _javatypes.java.lang.module.ModuleFinder;
                        compose(arg0: _javatypes.java.lang.module.ModuleFinder[]): _javatypes.java.lang.module.ModuleFinder;
                        
                    }
                }
                interface ModuleReference extends _javatypes.java.lang.Object {
                    
                    descriptor(): _javatypes.java.lang.module.ModuleDescriptor;
                    location(): _javatypes.java.util.Optional<_javatypes.java.net.URI>;
                    open(): _javatypes.java.lang.module.ModuleReader;
                    
                }
                namespace ModuleReference {
                    interface static {
                        
                        
                        
                    }
                }
                interface ModuleReader extends _javatypes.java.lang.Interface, _javatypes.java.io.Closeable {
                    
                    find(arg0: string): _javatypes.java.util.Optional<_javatypes.java.net.URI>;
                    open(arg0: string): _javatypes.java.util.Optional<_javatypes.java.io.InputStream>;
                    read(arg0: string): _javatypes.java.util.Optional<_javatypes.java.nio.ByteBuffer>;
                    release(arg0: _javatypes.java.nio.ByteBuffer): void;
                    list(): _javatypes.java.util.stream.Stream<string>;
                    close(): void;
                    
                }
                namespace ModuleReader {
                    interface static {
                        
                        
                        
                    }
                }
            }
        }
    
        namespace util {
        
            interface Iterator<E> extends _javatypes.java.lang.Interface {
                
                hasNext(): boolean;
                next(): E;
                remove(): void;
                forEachRemaining(arg0: _javatypes.java.util._function.Consumer<any>): void;
                
            }
            namespace Iterator {
                interface static {
                    
                    
                    
                }
            }
            interface EventObject extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                
                getSource(): _javatypes.java.lang.Object;
                toString(): string;
                
            }
            namespace EventObject {
                interface static {
                    new (arg0: _javatypes.java.lang.Object): _javatypes.java.util.EventObject;
                    
                    
                    
                }
            }
            interface Comparator<T> extends _javatypes.java.lang.Interface {
                
                compare(arg0: T, arg1: T): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                reversed(): _javatypes.java.util.Comparator<T>;
                thenComparing(arg0: _javatypes.java.util.Comparator<any>): _javatypes.java.util.Comparator<T>;
                thenComparing<U>(arg0: _javatypes.java.util._function.Function<any, any>, arg1: _javatypes.java.util.Comparator<any>): _javatypes.java.util.Comparator<T>;
                thenComparing<U>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.Comparator<T>;
                thenComparingInt(arg0: _javatypes.java.util._function.ToIntFunction<any>): _javatypes.java.util.Comparator<T>;
                thenComparingLong(arg0: _javatypes.java.util._function.ToLongFunction<any>): _javatypes.java.util.Comparator<T>;
                thenComparingDouble(arg0: _javatypes.java.util._function.ToDoubleFunction<any>): _javatypes.java.util.Comparator<T>;
                
            }
            namespace Comparator {
                interface static {
                    
                    
                    reverseOrder<T>(): _javatypes.java.util.Comparator<T>;
                    naturalOrder<T>(): _javatypes.java.util.Comparator<T>;
                    nullsFirst<T>(arg0: _javatypes.java.util.Comparator<any>): _javatypes.java.util.Comparator<T>;
                    nullsLast<T>(arg0: _javatypes.java.util.Comparator<any>): _javatypes.java.util.Comparator<T>;
                    comparing<T, U>(arg0: _javatypes.java.util._function.Function<any, any>, arg1: _javatypes.java.util.Comparator<any>): _javatypes.java.util.Comparator<T>;
                    comparing<T, U>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.Comparator<T>;
                    comparingInt<T>(arg0: _javatypes.java.util._function.ToIntFunction<any>): _javatypes.java.util.Comparator<T>;
                    comparingLong<T>(arg0: _javatypes.java.util._function.ToLongFunction<any>): _javatypes.java.util.Comparator<T>;
                    comparingDouble<T>(arg0: _javatypes.java.util._function.ToDoubleFunction<any>): _javatypes.java.util.Comparator<T>;
                    
                }
            }
            interface Optional<T> extends _javatypes.java.lang.Object {
                
                get(): T;
                isPresent(): boolean;
                isEmpty(): boolean;
                ifPresent(arg0: _javatypes.java.util._function.Consumer<any>): void;
                ifPresentOrElse(arg0: _javatypes.java.util._function.Consumer<any>, arg1: _javatypes.java.lang.Runnable): void;
                filter(arg0: _javatypes.java.util._function.Predicate<any>): _javatypes.java.util.Optional<T>;
                map<U>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.Optional<U>;
                flatMap<U>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.Optional<U>;
                or(arg0: _javatypes.java.util._function.Supplier<any>): _javatypes.java.util.Optional<T>;
                stream(): _javatypes.java.util.stream.Stream<T>;
                orElse(arg0: T): T;
                orElseGet(arg0: _javatypes.java.util._function.Supplier<any>): T;
                orElseThrow(): T;
                orElseThrow<X>(arg0: _javatypes.java.util._function.Supplier<any>): T;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace Optional {
                interface static {
                    
                    
                    empty<T>(): _javatypes.java.util.Optional<T>;
                    of<T>(arg0: T): _javatypes.java.util.Optional<T>;
                    ofNullable<T>(arg0: T): _javatypes.java.util.Optional<T>;
                    
                }
            }
            interface Enumeration<E> extends _javatypes.java.lang.Interface {
                
                hasMoreElements(): boolean;
                nextElement(): E;
                asIterator(): _javatypes.java.util.Iterator<E>;
                
            }
            namespace Enumeration {
                interface static {
                    
                    
                    
                }
            }
            interface EventListener extends _javatypes.java.lang.Interface {
                
                
            }
            namespace EventListener {
                interface static {
                    
                    
                    
                }
            }
            interface Spliterator$OfInt extends _javatypes.java.lang.Interface, _javatypes.java.util.Spliterator$OfPrimitive<number, _javatypes.java.util._function.IntConsumer, _javatypes.java.util.Spliterator$OfInt> {
                
                trySplit(): _javatypes.java.util.Spliterator$OfInt;
                tryAdvance(arg0: _javatypes.java.util._function.IntConsumer): boolean;
                forEachRemaining(arg0: _javatypes.java.util._function.IntConsumer): void;
                tryAdvance(arg0: _javatypes.java.util._function.Consumer<any>): boolean;
                forEachRemaining(arg0: _javatypes.java.util._function.Consumer<any>): void;
                
            }
            namespace Spliterator$OfInt {
                interface static {
                    
                    
                    
                }
            }
            interface OptionalLong extends _javatypes.java.lang.Object {
                
                getAsLong(): number;
                isPresent(): boolean;
                isEmpty(): boolean;
                ifPresent(arg0: _javatypes.java.util._function.LongConsumer): void;
                ifPresentOrElse(arg0: _javatypes.java.util._function.LongConsumer, arg1: _javatypes.java.lang.Runnable): void;
                stream(): _javatypes.java.util.stream.LongStream;
                orElse(arg0: number): number;
                orElseGet(arg0: _javatypes.java.util._function.LongSupplier): number;
                orElseThrow(): number;
                orElseThrow<X>(arg0: _javatypes.java.util._function.Supplier<any>): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace OptionalLong {
                interface static {
                    
                    
                    empty(): _javatypes.java.util.OptionalLong;
                    of(arg0: number): _javatypes.java.util.OptionalLong;
                    
                }
            }
            interface Spliterator$OfLong extends _javatypes.java.lang.Interface, _javatypes.java.util.Spliterator$OfPrimitive<number, _javatypes.java.util._function.LongConsumer, _javatypes.java.util.Spliterator$OfLong> {
                
                trySplit(): _javatypes.java.util.Spliterator$OfLong;
                tryAdvance(arg0: _javatypes.java.util._function.LongConsumer): boolean;
                forEachRemaining(arg0: _javatypes.java.util._function.LongConsumer): void;
                tryAdvance(arg0: _javatypes.java.util._function.Consumer<any>): boolean;
                forEachRemaining(arg0: _javatypes.java.util._function.Consumer<any>): void;
                
            }
            namespace Spliterator$OfLong {
                interface static {
                    
                    
                    
                }
            }
            interface PrimitiveIterator$OfDouble extends _javatypes.java.lang.Interface, _javatypes.java.util.PrimitiveIterator<number, _javatypes.java.util._function.DoubleConsumer> {
                
                nextDouble(): number;
                forEachRemaining(arg0: _javatypes.java.util._function.DoubleConsumer): void;
                next(): number;
                forEachRemaining(arg0: _javatypes.java.util._function.Consumer<any>): void;
                
            }
            namespace PrimitiveIterator$OfDouble {
                interface static {
                    
                    
                    
                }
            }
            interface OptionalDouble extends _javatypes.java.lang.Object {
                
                getAsDouble(): number;
                isPresent(): boolean;
                isEmpty(): boolean;
                ifPresent(arg0: _javatypes.java.util._function.DoubleConsumer): void;
                ifPresentOrElse(arg0: _javatypes.java.util._function.DoubleConsumer, arg1: _javatypes.java.lang.Runnable): void;
                stream(): _javatypes.java.util.stream.DoubleStream;
                orElse(arg0: number): number;
                orElseGet(arg0: _javatypes.java.util._function.DoubleSupplier): number;
                orElseThrow(): number;
                orElseThrow<X>(arg0: _javatypes.java.util._function.Supplier<any>): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace OptionalDouble {
                interface static {
                    
                    
                    empty(): _javatypes.java.util.OptionalDouble;
                    of(arg0: number): _javatypes.java.util.OptionalDouble;
                    
                }
            }
            interface Spliterator$OfDouble extends _javatypes.java.lang.Interface, _javatypes.java.util.Spliterator$OfPrimitive<number, _javatypes.java.util._function.DoubleConsumer, _javatypes.java.util.Spliterator$OfDouble> {
                
                trySplit(): _javatypes.java.util.Spliterator$OfDouble;
                tryAdvance(arg0: _javatypes.java.util._function.DoubleConsumer): boolean;
                forEachRemaining(arg0: _javatypes.java.util._function.DoubleConsumer): void;
                tryAdvance(arg0: _javatypes.java.util._function.Consumer<any>): boolean;
                forEachRemaining(arg0: _javatypes.java.util._function.Consumer<any>): void;
                
            }
            namespace Spliterator$OfDouble {
                interface static {
                    
                    
                    
                }
            }
            interface PrimitiveIterator$OfLong extends _javatypes.java.lang.Interface, _javatypes.java.util.PrimitiveIterator<number, _javatypes.java.util._function.LongConsumer> {
                
                nextLong(): number;
                forEachRemaining(arg0: _javatypes.java.util._function.LongConsumer): void;
                next(): number;
                forEachRemaining(arg0: _javatypes.java.util._function.Consumer<any>): void;
                
            }
            namespace PrimitiveIterator$OfLong {
                interface static {
                    
                    
                    
                }
            }
            interface IntSummaryStatistics extends _javatypes.java.lang.Object, _javatypes.java.util._function.IntConsumer {
                
                accept(arg0: number): void;
                combine(arg0: _javatypes.java.util.IntSummaryStatistics): void;
                getCount(): number;
                getSum(): number;
                getMin(): number;
                getMax(): number;
                getAverage(): number;
                toString(): string;
                
            }
            namespace IntSummaryStatistics {
                interface static {
                    new (): _javatypes.java.util.IntSummaryStatistics;
                    new (arg0: number, arg1: number, arg2: number, arg3: number): _javatypes.java.util.IntSummaryStatistics;
                    
                    
                    
                }
            }
            interface OptionalInt extends _javatypes.java.lang.Object {
                
                getAsInt(): number;
                isPresent(): boolean;
                isEmpty(): boolean;
                ifPresent(arg0: _javatypes.java.util._function.IntConsumer): void;
                ifPresentOrElse(arg0: _javatypes.java.util._function.IntConsumer, arg1: _javatypes.java.lang.Runnable): void;
                stream(): _javatypes.java.util.stream.IntStream;
                orElse(arg0: number): number;
                orElseGet(arg0: _javatypes.java.util._function.IntSupplier): number;
                orElseThrow(): number;
                orElseThrow<X>(arg0: _javatypes.java.util._function.Supplier<any>): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace OptionalInt {
                interface static {
                    
                    
                    empty(): _javatypes.java.util.OptionalInt;
                    of(arg0: number): _javatypes.java.util.OptionalInt;
                    
                }
            }
            interface Spliterator<T> extends _javatypes.java.lang.Interface {
                
                tryAdvance(arg0: _javatypes.java.util._function.Consumer<any>): boolean;
                forEachRemaining(arg0: _javatypes.java.util._function.Consumer<any>): void;
                trySplit(): _javatypes.java.util.Spliterator<T>;
                estimateSize(): number;
                getExactSizeIfKnown(): number;
                characteristics(): number;
                hasCharacteristics(arg0: number): boolean;
                getComparator(): _javatypes.java.util.Comparator<any>;
                
            }
            namespace Spliterator {
                interface static {
                    
                    readonly ORDERED: number;
                    readonly DISTINCT: number;
                    readonly SORTED: number;
                    readonly SIZED: number;
                    readonly NONNULL: number;
                    readonly IMMUTABLE: number;
                    readonly CONCURRENT: number;
                    readonly SUBSIZED: number;
                    
                    
                }
            }
            interface LongSummaryStatistics extends _javatypes.java.lang.Object, _javatypes.java.util._function.LongConsumer, _javatypes.java.util._function.IntConsumer {
                
                accept(arg0: number): void;
                accept(arg0: number): void;
                combine(arg0: _javatypes.java.util.LongSummaryStatistics): void;
                getCount(): number;
                getSum(): number;
                getMin(): number;
                getMax(): number;
                getAverage(): number;
                toString(): string;
                
            }
            namespace LongSummaryStatistics {
                interface static {
                    new (): _javatypes.java.util.LongSummaryStatistics;
                    new (arg0: number, arg1: number, arg2: number, arg3: number): _javatypes.java.util.LongSummaryStatistics;
                    
                    
                    
                }
            }
            interface DoubleSummaryStatistics extends _javatypes.java.lang.Object, _javatypes.java.util._function.DoubleConsumer {
                
                accept(arg0: number): void;
                combine(arg0: _javatypes.java.util.DoubleSummaryStatistics): void;
                getCount(): number;
                getSum(): number;
                getMin(): number;
                getMax(): number;
                getAverage(): number;
                toString(): string;
                
            }
            namespace DoubleSummaryStatistics {
                interface static {
                    new (): _javatypes.java.util.DoubleSummaryStatistics;
                    new (arg0: number, arg1: number, arg2: number, arg3: number): _javatypes.java.util.DoubleSummaryStatistics;
                    
                    
                    
                }
            }
            interface PrimitiveIterator$OfInt extends _javatypes.java.lang.Interface, _javatypes.java.util.PrimitiveIterator<number, _javatypes.java.util._function.IntConsumer> {
                
                nextInt(): number;
                forEachRemaining(arg0: _javatypes.java.util._function.IntConsumer): void;
                next(): number;
                forEachRemaining(arg0: _javatypes.java.util._function.Consumer<any>): void;
                
            }
            namespace PrimitiveIterator$OfInt {
                interface static {
                    
                    
                    
                }
            }
            interface PrimitiveIterator<T, T_CONS> extends _javatypes.java.lang.Interface, _javatypes.java.util.Iterator<T> {
                
                forEachRemaining(arg0: T_CONS): void;
                
            }
            namespace PrimitiveIterator {
                interface static {
                    
                    
                    
                }
            }
            interface Spliterator$OfPrimitive<T, T_CONS, T_SPLITR> extends _javatypes.java.lang.Interface, _javatypes.java.util.Spliterator<T> {
                
                trySplit(): T_SPLITR;
                tryAdvance(arg0: T_CONS): boolean;
                forEachRemaining(arg0: T_CONS): void;
                
            }
            namespace Spliterator$OfPrimitive {
                interface static {
                    
                    
                    
                }
            }
            interface Locale extends _javatypes.java.lang.Object, _javatypes.java.lang.Cloneable, _javatypes.java.io.Serializable {
                
                getLanguage(): string;
                getScript(): string;
                getCountry(): string;
                getVariant(): string;
                hasExtensions(): boolean;
                stripExtensions(): _javatypes.java.util.Locale;
                getExtension(arg0: number): string;
                getExtensionKeys(): _javatypes.java.util.Set<number>;
                getUnicodeLocaleAttributes(): _javatypes.java.util.Set<string>;
                getUnicodeLocaleType(arg0: string): string;
                getUnicodeLocaleKeys(): _javatypes.java.util.Set<string>;
                toString(): string;
                toLanguageTag(): string;
                getISO3Language(): string;
                getISO3Country(): string;
                getDisplayLanguage(): string;
                getDisplayLanguage(arg0: _javatypes.java.util.Locale): string;
                getDisplayScript(): string;
                getDisplayScript(arg0: _javatypes.java.util.Locale): string;
                getDisplayCountry(): string;
                getDisplayCountry(arg0: _javatypes.java.util.Locale): string;
                getDisplayVariant(): string;
                getDisplayVariant(arg0: _javatypes.java.util.Locale): string;
                getDisplayName(): string;
                getDisplayName(arg0: _javatypes.java.util.Locale): string;
                clone(): _javatypes.java.lang.Object;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                
            }
            namespace Locale {
                interface static {
                    new (arg0: string, arg1: string, arg2: string): _javatypes.java.util.Locale;
                    new (arg0: string, arg1: string): _javatypes.java.util.Locale;
                    new (arg0: string): _javatypes.java.util.Locale;
                    
                    readonly ENGLISH: _javatypes.java.util.Locale;
                    readonly FRENCH: _javatypes.java.util.Locale;
                    readonly GERMAN: _javatypes.java.util.Locale;
                    readonly ITALIAN: _javatypes.java.util.Locale;
                    readonly JAPANESE: _javatypes.java.util.Locale;
                    readonly KOREAN: _javatypes.java.util.Locale;
                    readonly CHINESE: _javatypes.java.util.Locale;
                    readonly SIMPLIFIED_CHINESE: _javatypes.java.util.Locale;
                    readonly TRADITIONAL_CHINESE: _javatypes.java.util.Locale;
                    readonly FRANCE: _javatypes.java.util.Locale;
                    readonly GERMANY: _javatypes.java.util.Locale;
                    readonly ITALY: _javatypes.java.util.Locale;
                    readonly JAPAN: _javatypes.java.util.Locale;
                    readonly KOREA: _javatypes.java.util.Locale;
                    readonly UK: _javatypes.java.util.Locale;
                    readonly US: _javatypes.java.util.Locale;
                    readonly CANADA: _javatypes.java.util.Locale;
                    readonly CANADA_FRENCH: _javatypes.java.util.Locale;
                    readonly ROOT: _javatypes.java.util.Locale;
                    readonly CHINA: _javatypes.java.util.Locale;
                    readonly PRC: _javatypes.java.util.Locale;
                    readonly TAIWAN: _javatypes.java.util.Locale;
                    readonly PRIVATE_USE_EXTENSION: number;
                    readonly UNICODE_LOCALE_EXTENSION: number;
                    
                    getDefault(): _javatypes.java.util.Locale;
                    getDefault(arg0: _javatypes.java.util.Locale$Category): _javatypes.java.util.Locale;
                    setDefault(arg0: _javatypes.java.util.Locale): void;
                    setDefault(arg0: _javatypes.java.util.Locale$Category, arg1: _javatypes.java.util.Locale): void;
                    getAvailableLocales(): _javatypes.java.util.Locale[];
                    getISOCountries(): string[];
                    getISOCountries(arg0: _javatypes.java.util.Locale$IsoCountryCode): _javatypes.java.util.Set<string>;
                    getISOLanguages(): string[];
                    forLanguageTag(arg0: string): _javatypes.java.util.Locale;
                    filter(arg0: _javatypes.java.util.List<_javatypes.java.util.Locale$LanguageRange>, arg1: _javatypes.java.util.Collection<_javatypes.java.util.Locale>, arg2: _javatypes.java.util.Locale$FilteringMode): _javatypes.java.util.List<_javatypes.java.util.Locale>;
                    filter(arg0: _javatypes.java.util.List<_javatypes.java.util.Locale$LanguageRange>, arg1: _javatypes.java.util.Collection<_javatypes.java.util.Locale>): _javatypes.java.util.List<_javatypes.java.util.Locale>;
                    filterTags(arg0: _javatypes.java.util.List<_javatypes.java.util.Locale$LanguageRange>, arg1: _javatypes.java.util.Collection<string>, arg2: _javatypes.java.util.Locale$FilteringMode): _javatypes.java.util.List<string>;
                    filterTags(arg0: _javatypes.java.util.List<_javatypes.java.util.Locale$LanguageRange>, arg1: _javatypes.java.util.Collection<string>): _javatypes.java.util.List<string>;
                    lookup(arg0: _javatypes.java.util.List<_javatypes.java.util.Locale$LanguageRange>, arg1: _javatypes.java.util.Collection<_javatypes.java.util.Locale>): _javatypes.java.util.Locale;
                    lookupTag(arg0: _javatypes.java.util.List<_javatypes.java.util.Locale$LanguageRange>, arg1: _javatypes.java.util.Collection<string>): string;
                    
                }
            }
            interface Locale$IsoCountryCode extends _javatypes.java.lang.Enum<_javatypes.java.util.Locale$IsoCountryCode> {
                
                
            }
            namespace Locale$IsoCountryCode {
                interface static {
                    
                    readonly PART1_ALPHA2: _javatypes.java.util.Locale$IsoCountryCode;
                    readonly PART1_ALPHA3: _javatypes.java.util.Locale$IsoCountryCode;
                    readonly PART3: _javatypes.java.util.Locale$IsoCountryCode;
                    
                    values(): _javatypes.java.util.Locale$IsoCountryCode[];
                    valueOf(arg0: string): _javatypes.java.util.Locale$IsoCountryCode;
                    
                }
            }
            interface Locale$FilteringMode extends _javatypes.java.lang.Enum<_javatypes.java.util.Locale$FilteringMode> {
                
                
            }
            namespace Locale$FilteringMode {
                interface static {
                    
                    readonly AUTOSELECT_FILTERING: _javatypes.java.util.Locale$FilteringMode;
                    readonly EXTENDED_FILTERING: _javatypes.java.util.Locale$FilteringMode;
                    readonly IGNORE_EXTENDED_RANGES: _javatypes.java.util.Locale$FilteringMode;
                    readonly MAP_EXTENDED_RANGES: _javatypes.java.util.Locale$FilteringMode;
                    readonly REJECT_EXTENDED_RANGES: _javatypes.java.util.Locale$FilteringMode;
                    
                    values(): _javatypes.java.util.Locale$FilteringMode[];
                    valueOf(arg0: string): _javatypes.java.util.Locale$FilteringMode;
                    
                }
            }
            interface Locale$Category extends _javatypes.java.lang.Enum<_javatypes.java.util.Locale$Category> {
                
                
            }
            namespace Locale$Category {
                interface static {
                    
                    readonly DISPLAY: _javatypes.java.util.Locale$Category;
                    readonly FORMAT: _javatypes.java.util.Locale$Category;
                    
                    values(): _javatypes.java.util.Locale$Category[];
                    valueOf(arg0: string): _javatypes.java.util.Locale$Category;
                    
                }
            }
            interface Locale$LanguageRange extends _javatypes.java.lang.Object {
                
                getRange(): string;
                getWeight(): number;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                toString(): string;
                
            }
            namespace Locale$LanguageRange {
                interface static {
                    new (arg0: string): _javatypes.java.util.Locale$LanguageRange;
                    new (arg0: string, arg1: number): _javatypes.java.util.Locale$LanguageRange;
                    
                    readonly MAX_WEIGHT: number;
                    readonly MIN_WEIGHT: number;
                    
                    parse(arg0: string): _javatypes.java.util.List<_javatypes.java.util.Locale$LanguageRange>;
                    parse(arg0: string, arg1: _javatypes.java.util.Map<string, _javatypes.java.util.List<string>>): _javatypes.java.util.List<_javatypes.java.util.Locale$LanguageRange>;
                    mapEquivalents(arg0: _javatypes.java.util.List<_javatypes.java.util.Locale$LanguageRange>, arg1: _javatypes.java.util.Map<string, _javatypes.java.util.List<string>>): _javatypes.java.util.List<_javatypes.java.util.Locale$LanguageRange>;
                    
                }
            }
            interface HashMap<K, V> extends _javatypes.java.util.AbstractMap<K, V>, _javatypes.java.util.Map<K, V>, _javatypes.java.lang.Cloneable, _javatypes.java.io.Serializable {
                
                size(): number;
                isEmpty(): boolean;
                get(arg0: _javatypes.java.lang.Object): V;
                containsKey(arg0: _javatypes.java.lang.Object): boolean;
                put(arg0: K, arg1: V): V;
                putAll(arg0: _javatypes.java.util.Map<any, any>): void;
                remove(arg0: _javatypes.java.lang.Object): V;
                clear(): void;
                containsValue(arg0: _javatypes.java.lang.Object): boolean;
                keySet(): _javatypes.java.util.Set<K>;
                values(): _javatypes.java.util.Collection<V>;
                entrySet(): _javatypes.java.util.Set<_javatypes.java.util.Map$Entry<K, V>>;
                getOrDefault(arg0: _javatypes.java.lang.Object, arg1: V): V;
                putIfAbsent(arg0: K, arg1: V): V;
                remove(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): boolean;
                replace(arg0: K, arg1: V, arg2: V): boolean;
                replace(arg0: K, arg1: V): V;
                computeIfAbsent(arg0: K, arg1: _javatypes.java.util._function.Function<any, any>): V;
                computeIfPresent(arg0: K, arg1: _javatypes.java.util._function.BiFunction<any, any, any>): V;
                compute(arg0: K, arg1: _javatypes.java.util._function.BiFunction<any, any, any>): V;
                merge(arg0: K, arg1: V, arg2: _javatypes.java.util._function.BiFunction<any, any, any>): V;
                forEach(arg0: _javatypes.java.util._function.BiConsumer<any, any>): void;
                replaceAll(arg0: _javatypes.java.util._function.BiFunction<any, any, any>): void;
                clone(): _javatypes.java.lang.Object;
                
            }
            namespace HashMap {
                interface static {
                    new <K, V>(arg0: number, arg1: number): _javatypes.java.util.HashMap<K, V>;
                    new <K, V>(arg0: number): _javatypes.java.util.HashMap<K, V>;
                    new <K, V>(): _javatypes.java.util.HashMap<K, V>;
                    new <K, V>(arg0: _javatypes.java.util.Map<any, any>): _javatypes.java.util.HashMap<K, V>;
                    
                    
                    
                }
            }
            interface Map$Entry<K, V> extends _javatypes.java.lang.Interface {
                
                getKey(): K;
                getValue(): V;
                setValue(arg0: V): V;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                
            }
            namespace Map$Entry {
                interface static {
                    
                    
                    comparingByKey<K, V>(): _javatypes.java.util.Comparator<_javatypes.java.util.Map$Entry<K, V>>;
                    comparingByValue<K, V>(): _javatypes.java.util.Comparator<_javatypes.java.util.Map$Entry<K, V>>;
                    comparingByKey<K, V>(arg0: _javatypes.java.util.Comparator<any>): _javatypes.java.util.Comparator<_javatypes.java.util.Map$Entry<K, V>>;
                    comparingByValue<K, V>(arg0: _javatypes.java.util.Comparator<any>): _javatypes.java.util.Comparator<_javatypes.java.util.Map$Entry<K, V>>;
                    copyOf<K, V>(arg0: _javatypes.java.util.Map$Entry<any, any>): _javatypes.java.util.Map$Entry<K, V>;
                    
                }
            }
            interface AbstractMap<K, V> extends _javatypes.java.lang.Object, _javatypes.java.util.Map<K, V> {
                
                size(): number;
                isEmpty(): boolean;
                containsValue(arg0: _javatypes.java.lang.Object): boolean;
                containsKey(arg0: _javatypes.java.lang.Object): boolean;
                get(arg0: _javatypes.java.lang.Object): V;
                put(arg0: K, arg1: V): V;
                remove(arg0: _javatypes.java.lang.Object): V;
                putAll(arg0: _javatypes.java.util.Map<any, any>): void;
                clear(): void;
                keySet(): _javatypes.java.util.Set<K>;
                values(): _javatypes.java.util.Collection<V>;
                entrySet(): _javatypes.java.util.Set<_javatypes.java.util.Map$Entry<K, V>>;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace AbstractMap {
                interface static {
                    
                    
                    
                }
            }
            interface Properties extends _javatypes.java.util.Hashtable<_javatypes.java.lang.Object, _javatypes.java.lang.Object> {
                
                setProperty(arg0: string, arg1: string): _javatypes.java.lang.Object;
                load(arg0: _javatypes.java.io.Reader): void;
                load(arg0: _javatypes.java.io.InputStream): void;
                save(arg0: _javatypes.java.io.OutputStream, arg1: string): void;
                store(arg0: _javatypes.java.io.Writer, arg1: string): void;
                store(arg0: _javatypes.java.io.OutputStream, arg1: string): void;
                loadFromXML(arg0: _javatypes.java.io.InputStream): void;
                storeToXML(arg0: _javatypes.java.io.OutputStream, arg1: string): void;
                storeToXML(arg0: _javatypes.java.io.OutputStream, arg1: string, arg2: string): void;
                storeToXML(arg0: _javatypes.java.io.OutputStream, arg1: string, arg2: _javatypes.java.nio.charset.Charset): void;
                getProperty(arg0: string): string;
                getProperty(arg0: string, arg1: string): string;
                propertyNames(): _javatypes.java.util.Enumeration<any>;
                stringPropertyNames(): _javatypes.java.util.Set<string>;
                list(arg0: _javatypes.java.io.PrintStream): void;
                list(arg0: _javatypes.java.io.PrintWriter): void;
                size(): number;
                isEmpty(): boolean;
                keys(): _javatypes.java.util.Enumeration<_javatypes.java.lang.Object>;
                elements(): _javatypes.java.util.Enumeration<_javatypes.java.lang.Object>;
                contains(arg0: _javatypes.java.lang.Object): boolean;
                containsValue(arg0: _javatypes.java.lang.Object): boolean;
                containsKey(arg0: _javatypes.java.lang.Object): boolean;
                get(arg0: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                put(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                remove(arg0: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                putAll(arg0: _javatypes.java.util.Map<any, any>): void;
                clear(): void;
                toString(): string;
                keySet(): _javatypes.java.util.Set<_javatypes.java.lang.Object>;
                values(): _javatypes.java.util.Collection<_javatypes.java.lang.Object>;
                entrySet(): _javatypes.java.util.Set<_javatypes.java.util.Map$Entry<_javatypes.java.lang.Object, _javatypes.java.lang.Object>>;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                getOrDefault(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                forEach(arg0: _javatypes.java.util._function.BiConsumer<any, any>): void;
                replaceAll(arg0: _javatypes.java.util._function.BiFunction<any, any, any>): void;
                putIfAbsent(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                remove(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): boolean;
                replace(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object, arg2: _javatypes.java.lang.Object): boolean;
                replace(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                computeIfAbsent(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.util._function.Function<any, any>): _javatypes.java.lang.Object;
                computeIfPresent(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.util._function.BiFunction<any, any, any>): _javatypes.java.lang.Object;
                compute(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.util._function.BiFunction<any, any, any>): _javatypes.java.lang.Object;
                merge(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object, arg2: _javatypes.java.util._function.BiFunction<any, any, any>): _javatypes.java.lang.Object;
                clone(): _javatypes.java.lang.Object;
                
            }
            namespace Properties {
                interface static {
                    new (): _javatypes.java.util.Properties;
                    new (arg0: number): _javatypes.java.util.Properties;
                    new (arg0: _javatypes.java.util.Properties): _javatypes.java.util.Properties;
                    
                    
                    
                }
            }
            interface Date extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable, _javatypes.java.lang.Cloneable, _javatypes.java.lang.Comparable<_javatypes.java.util.Date> {
                
                clone(): _javatypes.java.lang.Object;
                getYear(): number;
                setYear(arg0: number): void;
                getMonth(): number;
                setMonth(arg0: number): void;
                getDate(): number;
                setDate(arg0: number): void;
                getDay(): number;
                getHours(): number;
                setHours(arg0: number): void;
                getMinutes(): number;
                setMinutes(arg0: number): void;
                getSeconds(): number;
                setSeconds(arg0: number): void;
                getTime(): number;
                setTime(arg0: number): void;
                before(arg0: _javatypes.java.util.Date): boolean;
                after(arg0: _javatypes.java.util.Date): boolean;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                compareTo(arg0: _javatypes.java.util.Date): number;
                hashCode(): number;
                toString(): string;
                toLocaleString(): string;
                toGMTString(): string;
                getTimezoneOffset(): number;
                toInstant(): _javatypes.java.time.Instant;
                
            }
            namespace Date {
                interface static {
                    new (): _javatypes.java.util.Date;
                    new (arg0: number): _javatypes.java.util.Date;
                    new (arg0: number, arg1: number, arg2: number): _javatypes.java.util.Date;
                    new (arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): _javatypes.java.util.Date;
                    new (arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): _javatypes.java.util.Date;
                    new (arg0: string): _javatypes.java.util.Date;
                    
                    
                    UTC(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
                    parse(arg0: string): number;
                    from(arg0: _javatypes.java.time.Instant): _javatypes.java.util.Date;
                    
                }
            }
            interface SortedMap<K, V> extends _javatypes.java.lang.Interface, _javatypes.java.util.Map<K, V> {
                
                comparator(): _javatypes.java.util.Comparator<any>;
                subMap(arg0: K, arg1: K): _javatypes.java.util.SortedMap<K, V>;
                headMap(arg0: K): _javatypes.java.util.SortedMap<K, V>;
                tailMap(arg0: K): _javatypes.java.util.SortedMap<K, V>;
                firstKey(): K;
                lastKey(): K;
                keySet(): _javatypes.java.util.Set<K>;
                values(): _javatypes.java.util.Collection<V>;
                entrySet(): _javatypes.java.util.Set<_javatypes.java.util.Map$Entry<K, V>>;
                
            }
            namespace SortedMap {
                interface static {
                    
                    
                    
                }
            }
            interface Random extends _javatypes.java.lang.Object, _javatypes.java.util.random.RandomGenerator, _javatypes.java.io.Serializable {
                
                setSeed(arg0: number): void;
                nextBytes(arg0: number[]): void;
                nextInt(): number;
                nextInt(arg0: number): number;
                nextLong(): number;
                nextBoolean(): boolean;
                nextFloat(): number;
                nextDouble(): number;
                nextGaussian(): number;
                ints(arg0: number): _javatypes.java.util.stream.IntStream;
                ints(): _javatypes.java.util.stream.IntStream;
                ints(arg0: number, arg1: number, arg2: number): _javatypes.java.util.stream.IntStream;
                ints(arg0: number, arg1: number): _javatypes.java.util.stream.IntStream;
                longs(arg0: number): _javatypes.java.util.stream.LongStream;
                longs(): _javatypes.java.util.stream.LongStream;
                longs(arg0: number, arg1: number, arg2: number): _javatypes.java.util.stream.LongStream;
                longs(arg0: number, arg1: number): _javatypes.java.util.stream.LongStream;
                doubles(arg0: number): _javatypes.java.util.stream.DoubleStream;
                doubles(): _javatypes.java.util.stream.DoubleStream;
                doubles(arg0: number, arg1: number, arg2: number): _javatypes.java.util.stream.DoubleStream;
                doubles(arg0: number, arg1: number): _javatypes.java.util.stream.DoubleStream;
                
            }
            namespace Random {
                interface static {
                    new (): _javatypes.java.util.Random;
                    new (arg0: number): _javatypes.java.util.Random;
                    
                    
                    
                }
            }
            interface Hashtable<K, V> extends _javatypes.java.util.Dictionary<K, V>, _javatypes.java.util.Map<K, V>, _javatypes.java.lang.Cloneable, _javatypes.java.io.Serializable {
                
                size(): number;
                isEmpty(): boolean;
                keys(): _javatypes.java.util.Enumeration<K>;
                elements(): _javatypes.java.util.Enumeration<V>;
                contains(arg0: _javatypes.java.lang.Object): boolean;
                containsValue(arg0: _javatypes.java.lang.Object): boolean;
                containsKey(arg0: _javatypes.java.lang.Object): boolean;
                get(arg0: _javatypes.java.lang.Object): V;
                put(arg0: K, arg1: V): V;
                remove(arg0: _javatypes.java.lang.Object): V;
                putAll(arg0: _javatypes.java.util.Map<any, any>): void;
                clear(): void;
                clone(): _javatypes.java.lang.Object;
                toString(): string;
                keySet(): _javatypes.java.util.Set<K>;
                entrySet(): _javatypes.java.util.Set<_javatypes.java.util.Map$Entry<K, V>>;
                values(): _javatypes.java.util.Collection<V>;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                getOrDefault(arg0: _javatypes.java.lang.Object, arg1: V): V;
                forEach(arg0: _javatypes.java.util._function.BiConsumer<any, any>): void;
                replaceAll(arg0: _javatypes.java.util._function.BiFunction<any, any, any>): void;
                putIfAbsent(arg0: K, arg1: V): V;
                remove(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): boolean;
                replace(arg0: K, arg1: V, arg2: V): boolean;
                replace(arg0: K, arg1: V): V;
                computeIfAbsent(arg0: K, arg1: _javatypes.java.util._function.Function<any, any>): V;
                computeIfPresent(arg0: K, arg1: _javatypes.java.util._function.BiFunction<any, any, any>): V;
                compute(arg0: K, arg1: _javatypes.java.util._function.BiFunction<any, any, any>): V;
                merge(arg0: K, arg1: V, arg2: _javatypes.java.util._function.BiFunction<any, any, any>): V;
                
            }
            namespace Hashtable {
                interface static {
                    new <K, V>(arg0: number, arg1: number): _javatypes.java.util.Hashtable<K, V>;
                    new <K, V>(arg0: number): _javatypes.java.util.Hashtable<K, V>;
                    new <K, V>(): _javatypes.java.util.Hashtable<K, V>;
                    new <K, V>(arg0: _javatypes.java.util.Map<any, any>): _javatypes.java.util.Hashtable<K, V>;
                    
                    
                    
                }
            }
            interface Dictionary<K, V> extends _javatypes.java.lang.Object {
                
                size(): number;
                isEmpty(): boolean;
                keys(): _javatypes.java.util.Enumeration<K>;
                elements(): _javatypes.java.util.Enumeration<V>;
                get(arg0: _javatypes.java.lang.Object): V;
                put(arg0: K, arg1: V): V;
                remove(arg0: _javatypes.java.lang.Object): V;
                
            }
            namespace Dictionary {
                interface static {
                    new <K, V>(): _javatypes.java.util.Dictionary<K, V>;
                    
                    
                    
                }
            }
        
            namespace _function {
            
                interface Consumer<T> extends _javatypes.java.lang.Interface {
                    
                    accept(arg0: T): void;
                    andThen(arg0: _javatypes.java.util._function.Consumer<any>): _javatypes.java.util._function.Consumer<T>;
                    
                }
                namespace Consumer {
                    interface static {
                        
                        
                        
                    }
                }
                interface DoubleFunction<R> extends _javatypes.java.lang.Interface {
                    
                    apply(arg0: number): R;
                    
                }
                namespace DoubleFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface UnaryOperator<T> extends _javatypes.java.lang.Interface, _javatypes.java.util._function.Function<T, T> {
                    
                    
                }
                namespace UnaryOperator {
                    interface static {
                        
                        
                        identity<T>(): _javatypes.java.util._function.UnaryOperator<T>;
                        
                    }
                }
                interface IntToDoubleFunction extends _javatypes.java.lang.Interface {
                    
                    applyAsDouble(arg0: number): number;
                    
                }
                namespace IntToDoubleFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface DoubleToLongFunction extends _javatypes.java.lang.Interface {
                    
                    applyAsLong(arg0: number): number;
                    
                }
                namespace DoubleToLongFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface ObjLongConsumer<T> extends _javatypes.java.lang.Interface {
                    
                    accept(arg0: T, arg1: number): void;
                    
                }
                namespace ObjLongConsumer {
                    interface static {
                        
                        
                        
                    }
                }
                interface Supplier<T> extends _javatypes.java.lang.Interface {
                    
                    get(): T;
                    
                }
                namespace Supplier {
                    interface static {
                        
                        
                        
                    }
                }
                interface ObjDoubleConsumer<T> extends _javatypes.java.lang.Interface {
                    
                    accept(arg0: T, arg1: number): void;
                    
                }
                namespace ObjDoubleConsumer {
                    interface static {
                        
                        
                        
                    }
                }
                interface ToIntFunction<T> extends _javatypes.java.lang.Interface {
                    
                    applyAsInt(arg0: T): number;
                    
                }
                namespace ToIntFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface DoubleSupplier extends _javatypes.java.lang.Interface {
                    
                    getAsDouble(): number;
                    
                }
                namespace DoubleSupplier {
                    interface static {
                        
                        
                        
                    }
                }
                interface IntBinaryOperator extends _javatypes.java.lang.Interface {
                    
                    applyAsInt(arg0: number, arg1: number): number;
                    
                }
                namespace IntBinaryOperator {
                    interface static {
                        
                        
                        
                    }
                }
                interface IntPredicate extends _javatypes.java.lang.Interface {
                    
                    test(arg0: number): boolean;
                    and(arg0: _javatypes.java.util._function.IntPredicate): _javatypes.java.util._function.IntPredicate;
                    negate(): _javatypes.java.util._function.IntPredicate;
                    or(arg0: _javatypes.java.util._function.IntPredicate): _javatypes.java.util._function.IntPredicate;
                    
                }
                namespace IntPredicate {
                    interface static {
                        
                        
                        
                    }
                }
                interface LongUnaryOperator extends _javatypes.java.lang.Interface {
                    
                    applyAsLong(arg0: number): number;
                    compose(arg0: _javatypes.java.util._function.LongUnaryOperator): _javatypes.java.util._function.LongUnaryOperator;
                    andThen(arg0: _javatypes.java.util._function.LongUnaryOperator): _javatypes.java.util._function.LongUnaryOperator;
                    
                }
                namespace LongUnaryOperator {
                    interface static {
                        
                        
                        identity(): _javatypes.java.util._function.LongUnaryOperator;
                        
                    }
                }
                interface Predicate<T> extends _javatypes.java.lang.Interface {
                    
                    test(arg0: T): boolean;
                    and(arg0: _javatypes.java.util._function.Predicate<any>): _javatypes.java.util._function.Predicate<T>;
                    negate(): _javatypes.java.util._function.Predicate<T>;
                    or(arg0: _javatypes.java.util._function.Predicate<any>): _javatypes.java.util._function.Predicate<T>;
                    
                }
                namespace Predicate {
                    interface static {
                        
                        
                        isEqual<T>(arg0: _javatypes.java.lang.Object): _javatypes.java.util._function.Predicate<T>;
                        not<T>(arg0: _javatypes.java.util._function.Predicate<any>): _javatypes.java.util._function.Predicate<T>;
                        
                    }
                }
                interface LongToIntFunction extends _javatypes.java.lang.Interface {
                    
                    applyAsInt(arg0: number): number;
                    
                }
                namespace LongToIntFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface LongFunction<R> extends _javatypes.java.lang.Interface {
                    
                    apply(arg0: number): R;
                    
                }
                namespace LongFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface LongBinaryOperator extends _javatypes.java.lang.Interface {
                    
                    applyAsLong(arg0: number, arg1: number): number;
                    
                }
                namespace LongBinaryOperator {
                    interface static {
                        
                        
                        
                    }
                }
                interface ToDoubleFunction<T> extends _javatypes.java.lang.Interface {
                    
                    applyAsDouble(arg0: T): number;
                    
                }
                namespace ToDoubleFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface BiPredicate<T, U> extends _javatypes.java.lang.Interface {
                    
                    test(arg0: T, arg1: U): boolean;
                    and(arg0: _javatypes.java.util._function.BiPredicate<any, any>): _javatypes.java.util._function.BiPredicate<T, U>;
                    negate(): _javatypes.java.util._function.BiPredicate<T, U>;
                    or(arg0: _javatypes.java.util._function.BiPredicate<any, any>): _javatypes.java.util._function.BiPredicate<T, U>;
                    
                }
                namespace BiPredicate {
                    interface static {
                        
                        
                        
                    }
                }
                interface LongSupplier extends _javatypes.java.lang.Interface {
                    
                    getAsLong(): number;
                    
                }
                namespace LongSupplier {
                    interface static {
                        
                        
                        
                    }
                }
                interface DoubleConsumer extends _javatypes.java.lang.Interface {
                    
                    accept(arg0: number): void;
                    andThen(arg0: _javatypes.java.util._function.DoubleConsumer): _javatypes.java.util._function.DoubleConsumer;
                    
                }
                namespace DoubleConsumer {
                    interface static {
                        
                        
                        
                    }
                }
                interface IntConsumer extends _javatypes.java.lang.Interface {
                    
                    accept(arg0: number): void;
                    andThen(arg0: _javatypes.java.util._function.IntConsumer): _javatypes.java.util._function.IntConsumer;
                    
                }
                namespace IntConsumer {
                    interface static {
                        
                        
                        
                    }
                }
                interface IntSupplier extends _javatypes.java.lang.Interface {
                    
                    getAsInt(): number;
                    
                }
                namespace IntSupplier {
                    interface static {
                        
                        
                        
                    }
                }
                interface IntFunction<R> extends _javatypes.java.lang.Interface {
                    
                    apply(arg0: number): R;
                    
                }
                namespace IntFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface ObjIntConsumer<T> extends _javatypes.java.lang.Interface {
                    
                    accept(arg0: T, arg1: number): void;
                    
                }
                namespace ObjIntConsumer {
                    interface static {
                        
                        
                        
                    }
                }
                interface IntUnaryOperator extends _javatypes.java.lang.Interface {
                    
                    applyAsInt(arg0: number): number;
                    compose(arg0: _javatypes.java.util._function.IntUnaryOperator): _javatypes.java.util._function.IntUnaryOperator;
                    andThen(arg0: _javatypes.java.util._function.IntUnaryOperator): _javatypes.java.util._function.IntUnaryOperator;
                    
                }
                namespace IntUnaryOperator {
                    interface static {
                        
                        
                        identity(): _javatypes.java.util._function.IntUnaryOperator;
                        
                    }
                }
                interface LongToDoubleFunction extends _javatypes.java.lang.Interface {
                    
                    applyAsDouble(arg0: number): number;
                    
                }
                namespace LongToDoubleFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface LongPredicate extends _javatypes.java.lang.Interface {
                    
                    test(arg0: number): boolean;
                    and(arg0: _javatypes.java.util._function.LongPredicate): _javatypes.java.util._function.LongPredicate;
                    negate(): _javatypes.java.util._function.LongPredicate;
                    or(arg0: _javatypes.java.util._function.LongPredicate): _javatypes.java.util._function.LongPredicate;
                    
                }
                namespace LongPredicate {
                    interface static {
                        
                        
                        
                    }
                }
                interface ToLongFunction<T> extends _javatypes.java.lang.Interface {
                    
                    applyAsLong(arg0: T): number;
                    
                }
                namespace ToLongFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface IntToLongFunction extends _javatypes.java.lang.Interface {
                    
                    applyAsLong(arg0: number): number;
                    
                }
                namespace IntToLongFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface BinaryOperator<T> extends _javatypes.java.lang.Interface, _javatypes.java.util._function.BiFunction<T, T, T> {
                    
                    
                }
                namespace BinaryOperator {
                    interface static {
                        
                        
                        minBy<T>(arg0: _javatypes.java.util.Comparator<any>): _javatypes.java.util._function.BinaryOperator<T>;
                        maxBy<T>(arg0: _javatypes.java.util.Comparator<any>): _javatypes.java.util._function.BinaryOperator<T>;
                        
                    }
                }
                interface BiFunction<T, U, R> extends _javatypes.java.lang.Interface {
                    
                    apply(arg0: T, arg1: U): R;
                    andThen<V>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util._function.BiFunction<T, U, V>;
                    
                }
                namespace BiFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface BiConsumer<T, U> extends _javatypes.java.lang.Interface {
                    
                    accept(arg0: T, arg1: U): void;
                    andThen(arg0: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util._function.BiConsumer<T, U>;
                    
                }
                namespace BiConsumer {
                    interface static {
                        
                        
                        
                    }
                }
                interface DoubleBinaryOperator extends _javatypes.java.lang.Interface {
                    
                    applyAsDouble(arg0: number, arg1: number): number;
                    
                }
                namespace DoubleBinaryOperator {
                    interface static {
                        
                        
                        
                    }
                }
                interface LongConsumer extends _javatypes.java.lang.Interface {
                    
                    accept(arg0: number): void;
                    andThen(arg0: _javatypes.java.util._function.LongConsumer): _javatypes.java.util._function.LongConsumer;
                    
                }
                namespace LongConsumer {
                    interface static {
                        
                        
                        
                    }
                }
                interface DoubleToIntFunction extends _javatypes.java.lang.Interface {
                    
                    applyAsInt(arg0: number): number;
                    
                }
                namespace DoubleToIntFunction {
                    interface static {
                        
                        
                        
                    }
                }
                interface Function<T, R> extends _javatypes.java.lang.Interface {
                    
                    apply(arg0: T): R;
                    compose<V>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util._function.Function<V, R>;
                    andThen<V>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util._function.Function<T, V>;
                    
                }
                namespace Function {
                    interface static {
                        
                        
                        identity<T>(): _javatypes.java.util._function.Function<T, T>;
                        
                    }
                }
                interface DoubleUnaryOperator extends _javatypes.java.lang.Interface {
                    
                    applyAsDouble(arg0: number): number;
                    compose(arg0: _javatypes.java.util._function.DoubleUnaryOperator): _javatypes.java.util._function.DoubleUnaryOperator;
                    andThen(arg0: _javatypes.java.util._function.DoubleUnaryOperator): _javatypes.java.util._function.DoubleUnaryOperator;
                    
                }
                namespace DoubleUnaryOperator {
                    interface static {
                        
                        
                        identity(): _javatypes.java.util._function.DoubleUnaryOperator;
                        
                    }
                }
                interface DoublePredicate extends _javatypes.java.lang.Interface {
                    
                    test(arg0: number): boolean;
                    and(arg0: _javatypes.java.util._function.DoublePredicate): _javatypes.java.util._function.DoublePredicate;
                    negate(): _javatypes.java.util._function.DoublePredicate;
                    or(arg0: _javatypes.java.util._function.DoublePredicate): _javatypes.java.util._function.DoublePredicate;
                    
                }
                namespace DoublePredicate {
                    interface static {
                        
                        
                        
                    }
                }
            }
        
            namespace stream {
            
                interface Stream<T> extends _javatypes.java.lang.Interface, _javatypes.java.util.stream.BaseStream<T, _javatypes.java.util.stream.Stream<T>> {
                    
                    filter(arg0: _javatypes.java.util._function.Predicate<any>): _javatypes.java.util.stream.Stream<T>;
                    map<R>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.stream.Stream<R>;
                    mapToInt(arg0: _javatypes.java.util._function.ToIntFunction<any>): _javatypes.java.util.stream.IntStream;
                    mapToLong(arg0: _javatypes.java.util._function.ToLongFunction<any>): _javatypes.java.util.stream.LongStream;
                    mapToDouble(arg0: _javatypes.java.util._function.ToDoubleFunction<any>): _javatypes.java.util.stream.DoubleStream;
                    flatMap<R>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.stream.Stream<R>;
                    flatMapToInt(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.stream.IntStream;
                    flatMapToLong(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.stream.LongStream;
                    flatMapToDouble(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.stream.DoubleStream;
                    mapMulti<R>(arg0: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util.stream.Stream<R>;
                    mapMultiToInt(arg0: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util.stream.IntStream;
                    mapMultiToLong(arg0: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util.stream.LongStream;
                    mapMultiToDouble(arg0: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util.stream.DoubleStream;
                    distinct(): _javatypes.java.util.stream.Stream<T>;
                    sorted(): _javatypes.java.util.stream.Stream<T>;
                    sorted(arg0: _javatypes.java.util.Comparator<any>): _javatypes.java.util.stream.Stream<T>;
                    peek(arg0: _javatypes.java.util._function.Consumer<any>): _javatypes.java.util.stream.Stream<T>;
                    limit(arg0: number): _javatypes.java.util.stream.Stream<T>;
                    skip(arg0: number): _javatypes.java.util.stream.Stream<T>;
                    takeWhile(arg0: _javatypes.java.util._function.Predicate<any>): _javatypes.java.util.stream.Stream<T>;
                    dropWhile(arg0: _javatypes.java.util._function.Predicate<any>): _javatypes.java.util.stream.Stream<T>;
                    forEach(arg0: _javatypes.java.util._function.Consumer<any>): void;
                    forEachOrdered(arg0: _javatypes.java.util._function.Consumer<any>): void;
                    toArray(): _javatypes.java.lang.Object[];
                    toArray<A>(arg0: _javatypes.java.util._function.IntFunction<A[]>): A[];
                    reduce(arg0: T, arg1: _javatypes.java.util._function.BinaryOperator<T>): T;
                    reduce(arg0: _javatypes.java.util._function.BinaryOperator<T>): _javatypes.java.util.Optional<T>;
                    reduce<U>(arg0: U, arg1: _javatypes.java.util._function.BiFunction<U, any, U>, arg2: _javatypes.java.util._function.BinaryOperator<U>): U;
                    collect<R>(arg0: _javatypes.java.util._function.Supplier<R>, arg1: _javatypes.java.util._function.BiConsumer<R, any>, arg2: _javatypes.java.util._function.BiConsumer<R, R>): R;
                    collect<R, A>(arg0: _javatypes.java.util.stream.Collector<any, A, R>): R;
                    toList(): _javatypes.java.util.List<T>;
                    min(arg0: _javatypes.java.util.Comparator<any>): _javatypes.java.util.Optional<T>;
                    max(arg0: _javatypes.java.util.Comparator<any>): _javatypes.java.util.Optional<T>;
                    count(): number;
                    anyMatch(arg0: _javatypes.java.util._function.Predicate<any>): boolean;
                    allMatch(arg0: _javatypes.java.util._function.Predicate<any>): boolean;
                    noneMatch(arg0: _javatypes.java.util._function.Predicate<any>): boolean;
                    findFirst(): _javatypes.java.util.Optional<T>;
                    findAny(): _javatypes.java.util.Optional<T>;
                    
                }
                namespace Stream {
                    interface static {
                        
                        
                        builder<T>(): _javatypes.java.util.stream.Stream$Builder<T>;
                        empty<T>(): _javatypes.java.util.stream.Stream<T>;
                        of<T>(arg0: T): _javatypes.java.util.stream.Stream<T>;
                        ofNullable<T>(arg0: T): _javatypes.java.util.stream.Stream<T>;
                        of<T>(arg0: T[]): _javatypes.java.util.stream.Stream<T>;
                        iterate<T>(arg0: T, arg1: _javatypes.java.util._function.UnaryOperator<T>): _javatypes.java.util.stream.Stream<T>;
                        iterate<T>(arg0: T, arg1: _javatypes.java.util._function.Predicate<any>, arg2: _javatypes.java.util._function.UnaryOperator<T>): _javatypes.java.util.stream.Stream<T>;
                        generate<T>(arg0: _javatypes.java.util._function.Supplier<any>): _javatypes.java.util.stream.Stream<T>;
                        concat<T>(arg0: _javatypes.java.util.stream.Stream<any>, arg1: _javatypes.java.util.stream.Stream<any>): _javatypes.java.util.stream.Stream<T>;
                        
                    }
                }
                interface LongStream extends _javatypes.java.lang.Interface, _javatypes.java.util.stream.BaseStream<number, _javatypes.java.util.stream.LongStream> {
                    
                    filter(arg0: _javatypes.java.util._function.LongPredicate): _javatypes.java.util.stream.LongStream;
                    map(arg0: _javatypes.java.util._function.LongUnaryOperator): _javatypes.java.util.stream.LongStream;
                    mapToObj<U>(arg0: _javatypes.java.util._function.LongFunction<any>): _javatypes.java.util.stream.Stream<U>;
                    mapToInt(arg0: _javatypes.java.util._function.LongToIntFunction): _javatypes.java.util.stream.IntStream;
                    mapToDouble(arg0: _javatypes.java.util._function.LongToDoubleFunction): _javatypes.java.util.stream.DoubleStream;
                    flatMap(arg0: _javatypes.java.util._function.LongFunction<any>): _javatypes.java.util.stream.LongStream;
                    mapMulti(arg0: _javatypes.java.util.stream.LongStream$LongMapMultiConsumer): _javatypes.java.util.stream.LongStream;
                    distinct(): _javatypes.java.util.stream.LongStream;
                    sorted(): _javatypes.java.util.stream.LongStream;
                    peek(arg0: _javatypes.java.util._function.LongConsumer): _javatypes.java.util.stream.LongStream;
                    limit(arg0: number): _javatypes.java.util.stream.LongStream;
                    skip(arg0: number): _javatypes.java.util.stream.LongStream;
                    takeWhile(arg0: _javatypes.java.util._function.LongPredicate): _javatypes.java.util.stream.LongStream;
                    dropWhile(arg0: _javatypes.java.util._function.LongPredicate): _javatypes.java.util.stream.LongStream;
                    forEach(arg0: _javatypes.java.util._function.LongConsumer): void;
                    forEachOrdered(arg0: _javatypes.java.util._function.LongConsumer): void;
                    toArray(): number[];
                    reduce(arg0: number, arg1: _javatypes.java.util._function.LongBinaryOperator): number;
                    reduce(arg0: _javatypes.java.util._function.LongBinaryOperator): _javatypes.java.util.OptionalLong;
                    collect<R>(arg0: _javatypes.java.util._function.Supplier<R>, arg1: _javatypes.java.util._function.ObjLongConsumer<R>, arg2: _javatypes.java.util._function.BiConsumer<R, R>): R;
                    sum(): number;
                    min(): _javatypes.java.util.OptionalLong;
                    max(): _javatypes.java.util.OptionalLong;
                    count(): number;
                    average(): _javatypes.java.util.OptionalDouble;
                    summaryStatistics(): _javatypes.java.util.LongSummaryStatistics;
                    anyMatch(arg0: _javatypes.java.util._function.LongPredicate): boolean;
                    allMatch(arg0: _javatypes.java.util._function.LongPredicate): boolean;
                    noneMatch(arg0: _javatypes.java.util._function.LongPredicate): boolean;
                    findFirst(): _javatypes.java.util.OptionalLong;
                    findAny(): _javatypes.java.util.OptionalLong;
                    asDoubleStream(): _javatypes.java.util.stream.DoubleStream;
                    boxed(): _javatypes.java.util.stream.Stream<number>;
                    sequential(): _javatypes.java.util.stream.LongStream;
                    parallel(): _javatypes.java.util.stream.LongStream;
                    iterator(): _javatypes.java.util.PrimitiveIterator$OfLong;
                    spliterator(): _javatypes.java.util.Spliterator$OfLong;
                    
                }
                namespace LongStream {
                    interface static {
                        
                        
                        builder(): _javatypes.java.util.stream.LongStream$Builder;
                        empty(): _javatypes.java.util.stream.LongStream;
                        of(arg0: number): _javatypes.java.util.stream.LongStream;
                        of(arg0: number[]): _javatypes.java.util.stream.LongStream;
                        iterate(arg0: number, arg1: _javatypes.java.util._function.LongUnaryOperator): _javatypes.java.util.stream.LongStream;
                        iterate(arg0: number, arg1: _javatypes.java.util._function.LongPredicate, arg2: _javatypes.java.util._function.LongUnaryOperator): _javatypes.java.util.stream.LongStream;
                        generate(arg0: _javatypes.java.util._function.LongSupplier): _javatypes.java.util.stream.LongStream;
                        range(arg0: number, arg1: number): _javatypes.java.util.stream.LongStream;
                        rangeClosed(arg0: number, arg1: number): _javatypes.java.util.stream.LongStream;
                        concat(arg0: _javatypes.java.util.stream.LongStream, arg1: _javatypes.java.util.stream.LongStream): _javatypes.java.util.stream.LongStream;
                        
                    }
                }
                interface IntStream extends _javatypes.java.lang.Interface, _javatypes.java.util.stream.BaseStream<number, _javatypes.java.util.stream.IntStream> {
                    
                    filter(arg0: _javatypes.java.util._function.IntPredicate): _javatypes.java.util.stream.IntStream;
                    map(arg0: _javatypes.java.util._function.IntUnaryOperator): _javatypes.java.util.stream.IntStream;
                    mapToObj<U>(arg0: _javatypes.java.util._function.IntFunction<any>): _javatypes.java.util.stream.Stream<U>;
                    mapToLong(arg0: _javatypes.java.util._function.IntToLongFunction): _javatypes.java.util.stream.LongStream;
                    mapToDouble(arg0: _javatypes.java.util._function.IntToDoubleFunction): _javatypes.java.util.stream.DoubleStream;
                    flatMap(arg0: _javatypes.java.util._function.IntFunction<any>): _javatypes.java.util.stream.IntStream;
                    mapMulti(arg0: _javatypes.java.util.stream.IntStream$IntMapMultiConsumer): _javatypes.java.util.stream.IntStream;
                    distinct(): _javatypes.java.util.stream.IntStream;
                    sorted(): _javatypes.java.util.stream.IntStream;
                    peek(arg0: _javatypes.java.util._function.IntConsumer): _javatypes.java.util.stream.IntStream;
                    limit(arg0: number): _javatypes.java.util.stream.IntStream;
                    skip(arg0: number): _javatypes.java.util.stream.IntStream;
                    takeWhile(arg0: _javatypes.java.util._function.IntPredicate): _javatypes.java.util.stream.IntStream;
                    dropWhile(arg0: _javatypes.java.util._function.IntPredicate): _javatypes.java.util.stream.IntStream;
                    forEach(arg0: _javatypes.java.util._function.IntConsumer): void;
                    forEachOrdered(arg0: _javatypes.java.util._function.IntConsumer): void;
                    toArray(): number[];
                    reduce(arg0: number, arg1: _javatypes.java.util._function.IntBinaryOperator): number;
                    reduce(arg0: _javatypes.java.util._function.IntBinaryOperator): _javatypes.java.util.OptionalInt;
                    collect<R>(arg0: _javatypes.java.util._function.Supplier<R>, arg1: _javatypes.java.util._function.ObjIntConsumer<R>, arg2: _javatypes.java.util._function.BiConsumer<R, R>): R;
                    sum(): number;
                    min(): _javatypes.java.util.OptionalInt;
                    max(): _javatypes.java.util.OptionalInt;
                    count(): number;
                    average(): _javatypes.java.util.OptionalDouble;
                    summaryStatistics(): _javatypes.java.util.IntSummaryStatistics;
                    anyMatch(arg0: _javatypes.java.util._function.IntPredicate): boolean;
                    allMatch(arg0: _javatypes.java.util._function.IntPredicate): boolean;
                    noneMatch(arg0: _javatypes.java.util._function.IntPredicate): boolean;
                    findFirst(): _javatypes.java.util.OptionalInt;
                    findAny(): _javatypes.java.util.OptionalInt;
                    asLongStream(): _javatypes.java.util.stream.LongStream;
                    asDoubleStream(): _javatypes.java.util.stream.DoubleStream;
                    boxed(): _javatypes.java.util.stream.Stream<number>;
                    sequential(): _javatypes.java.util.stream.IntStream;
                    parallel(): _javatypes.java.util.stream.IntStream;
                    iterator(): _javatypes.java.util.PrimitiveIterator$OfInt;
                    spliterator(): _javatypes.java.util.Spliterator$OfInt;
                    
                }
                namespace IntStream {
                    interface static {
                        
                        
                        builder(): _javatypes.java.util.stream.IntStream$Builder;
                        empty(): _javatypes.java.util.stream.IntStream;
                        of(arg0: number): _javatypes.java.util.stream.IntStream;
                        of(arg0: number[]): _javatypes.java.util.stream.IntStream;
                        iterate(arg0: number, arg1: _javatypes.java.util._function.IntUnaryOperator): _javatypes.java.util.stream.IntStream;
                        iterate(arg0: number, arg1: _javatypes.java.util._function.IntPredicate, arg2: _javatypes.java.util._function.IntUnaryOperator): _javatypes.java.util.stream.IntStream;
                        generate(arg0: _javatypes.java.util._function.IntSupplier): _javatypes.java.util.stream.IntStream;
                        range(arg0: number, arg1: number): _javatypes.java.util.stream.IntStream;
                        rangeClosed(arg0: number, arg1: number): _javatypes.java.util.stream.IntStream;
                        concat(arg0: _javatypes.java.util.stream.IntStream, arg1: _javatypes.java.util.stream.IntStream): _javatypes.java.util.stream.IntStream;
                        
                    }
                }
                interface DoubleStream extends _javatypes.java.lang.Interface, _javatypes.java.util.stream.BaseStream<number, _javatypes.java.util.stream.DoubleStream> {
                    
                    filter(arg0: _javatypes.java.util._function.DoublePredicate): _javatypes.java.util.stream.DoubleStream;
                    map(arg0: _javatypes.java.util._function.DoubleUnaryOperator): _javatypes.java.util.stream.DoubleStream;
                    mapToObj<U>(arg0: _javatypes.java.util._function.DoubleFunction<any>): _javatypes.java.util.stream.Stream<U>;
                    mapToInt(arg0: _javatypes.java.util._function.DoubleToIntFunction): _javatypes.java.util.stream.IntStream;
                    mapToLong(arg0: _javatypes.java.util._function.DoubleToLongFunction): _javatypes.java.util.stream.LongStream;
                    flatMap(arg0: _javatypes.java.util._function.DoubleFunction<any>): _javatypes.java.util.stream.DoubleStream;
                    mapMulti(arg0: _javatypes.java.util.stream.DoubleStream$DoubleMapMultiConsumer): _javatypes.java.util.stream.DoubleStream;
                    distinct(): _javatypes.java.util.stream.DoubleStream;
                    sorted(): _javatypes.java.util.stream.DoubleStream;
                    peek(arg0: _javatypes.java.util._function.DoubleConsumer): _javatypes.java.util.stream.DoubleStream;
                    limit(arg0: number): _javatypes.java.util.stream.DoubleStream;
                    skip(arg0: number): _javatypes.java.util.stream.DoubleStream;
                    takeWhile(arg0: _javatypes.java.util._function.DoublePredicate): _javatypes.java.util.stream.DoubleStream;
                    dropWhile(arg0: _javatypes.java.util._function.DoublePredicate): _javatypes.java.util.stream.DoubleStream;
                    forEach(arg0: _javatypes.java.util._function.DoubleConsumer): void;
                    forEachOrdered(arg0: _javatypes.java.util._function.DoubleConsumer): void;
                    toArray(): number[];
                    reduce(arg0: number, arg1: _javatypes.java.util._function.DoubleBinaryOperator): number;
                    reduce(arg0: _javatypes.java.util._function.DoubleBinaryOperator): _javatypes.java.util.OptionalDouble;
                    collect<R>(arg0: _javatypes.java.util._function.Supplier<R>, arg1: _javatypes.java.util._function.ObjDoubleConsumer<R>, arg2: _javatypes.java.util._function.BiConsumer<R, R>): R;
                    sum(): number;
                    min(): _javatypes.java.util.OptionalDouble;
                    max(): _javatypes.java.util.OptionalDouble;
                    count(): number;
                    average(): _javatypes.java.util.OptionalDouble;
                    summaryStatistics(): _javatypes.java.util.DoubleSummaryStatistics;
                    anyMatch(arg0: _javatypes.java.util._function.DoublePredicate): boolean;
                    allMatch(arg0: _javatypes.java.util._function.DoublePredicate): boolean;
                    noneMatch(arg0: _javatypes.java.util._function.DoublePredicate): boolean;
                    findFirst(): _javatypes.java.util.OptionalDouble;
                    findAny(): _javatypes.java.util.OptionalDouble;
                    boxed(): _javatypes.java.util.stream.Stream<number>;
                    sequential(): _javatypes.java.util.stream.DoubleStream;
                    parallel(): _javatypes.java.util.stream.DoubleStream;
                    iterator(): _javatypes.java.util.PrimitiveIterator$OfDouble;
                    spliterator(): _javatypes.java.util.Spliterator$OfDouble;
                    
                }
                namespace DoubleStream {
                    interface static {
                        
                        
                        builder(): _javatypes.java.util.stream.DoubleStream$Builder;
                        empty(): _javatypes.java.util.stream.DoubleStream;
                        of(arg0: number): _javatypes.java.util.stream.DoubleStream;
                        of(arg0: number[]): _javatypes.java.util.stream.DoubleStream;
                        iterate(arg0: number, arg1: _javatypes.java.util._function.DoubleUnaryOperator): _javatypes.java.util.stream.DoubleStream;
                        iterate(arg0: number, arg1: _javatypes.java.util._function.DoublePredicate, arg2: _javatypes.java.util._function.DoubleUnaryOperator): _javatypes.java.util.stream.DoubleStream;
                        generate(arg0: _javatypes.java.util._function.DoubleSupplier): _javatypes.java.util.stream.DoubleStream;
                        concat(arg0: _javatypes.java.util.stream.DoubleStream, arg1: _javatypes.java.util.stream.DoubleStream): _javatypes.java.util.stream.DoubleStream;
                        
                    }
                }
                interface Stream$Builder<T> extends _javatypes.java.lang.Interface, _javatypes.java.util._function.Consumer<T> {
                    
                    accept(arg0: T): void;
                    add(arg0: T): _javatypes.java.util.stream.Stream$Builder<T>;
                    build(): _javatypes.java.util.stream.Stream<T>;
                    
                }
                namespace Stream$Builder {
                    interface static {
                        
                        
                        
                    }
                }
                interface BaseStream<T, S> extends _javatypes.java.lang.Interface, _javatypes.java.lang.AutoCloseable {
                    
                    iterator(): _javatypes.java.util.Iterator<T>;
                    spliterator(): _javatypes.java.util.Spliterator<T>;
                    isParallel(): boolean;
                    sequential(): S;
                    parallel(): S;
                    unordered(): S;
                    onClose(arg0: _javatypes.java.lang.Runnable): S;
                    close(): void;
                    
                }
                namespace BaseStream {
                    interface static {
                        
                        
                        
                    }
                }
                interface Collector<T, A, R> extends _javatypes.java.lang.Interface {
                    
                    supplier(): _javatypes.java.util._function.Supplier<A>;
                    accumulator(): _javatypes.java.util._function.BiConsumer<A, T>;
                    combiner(): _javatypes.java.util._function.BinaryOperator<A>;
                    finisher(): _javatypes.java.util._function.Function<A, R>;
                    characteristics(): _javatypes.java.util.Set<_javatypes.java.util.stream.Collector$Characteristics>;
                    
                }
                namespace Collector {
                    interface static {
                        
                        
                        of<T, R>(arg0: _javatypes.java.util._function.Supplier<R>, arg1: _javatypes.java.util._function.BiConsumer<R, T>, arg2: _javatypes.java.util._function.BinaryOperator<R>, arg3: _javatypes.java.util.stream.Collector$Characteristics[]): _javatypes.java.util.stream.Collector<T, R, R>;
                        of<T, A, R>(arg0: _javatypes.java.util._function.Supplier<A>, arg1: _javatypes.java.util._function.BiConsumer<A, T>, arg2: _javatypes.java.util._function.BinaryOperator<A>, arg3: _javatypes.java.util._function.Function<A, R>, arg4: _javatypes.java.util.stream.Collector$Characteristics[]): _javatypes.java.util.stream.Collector<T, A, R>;
                        
                    }
                }
                interface Collector$Characteristics extends _javatypes.java.lang.Enum<_javatypes.java.util.stream.Collector$Characteristics> {
                    
                    
                }
                namespace Collector$Characteristics {
                    interface static {
                        
                        readonly CONCURRENT: _javatypes.java.util.stream.Collector$Characteristics;
                        readonly UNORDERED: _javatypes.java.util.stream.Collector$Characteristics;
                        readonly IDENTITY_FINISH: _javatypes.java.util.stream.Collector$Characteristics;
                        
                        values(): _javatypes.java.util.stream.Collector$Characteristics[];
                        valueOf(arg0: string): _javatypes.java.util.stream.Collector$Characteristics;
                        
                    }
                }
                interface DoubleStream$Builder extends _javatypes.java.lang.Interface, _javatypes.java.util._function.DoubleConsumer {
                    
                    accept(arg0: number): void;
                    add(arg0: number): _javatypes.java.util.stream.DoubleStream$Builder;
                    build(): _javatypes.java.util.stream.DoubleStream;
                    
                }
                namespace DoubleStream$Builder {
                    interface static {
                        
                        
                        
                    }
                }
                interface LongStream$Builder extends _javatypes.java.lang.Interface, _javatypes.java.util._function.LongConsumer {
                    
                    accept(arg0: number): void;
                    add(arg0: number): _javatypes.java.util.stream.LongStream$Builder;
                    build(): _javatypes.java.util.stream.LongStream;
                    
                }
                namespace LongStream$Builder {
                    interface static {
                        
                        
                        
                    }
                }
                interface LongStream$LongMapMultiConsumer extends _javatypes.java.lang.Interface {
                    
                    accept(arg0: number, arg1: _javatypes.java.util._function.LongConsumer): void;
                    
                }
                namespace LongStream$LongMapMultiConsumer {
                    interface static {
                        
                        
                        
                    }
                }
                interface DoubleStream$DoubleMapMultiConsumer extends _javatypes.java.lang.Interface {
                    
                    accept(arg0: number, arg1: _javatypes.java.util._function.DoubleConsumer): void;
                    
                }
                namespace DoubleStream$DoubleMapMultiConsumer {
                    interface static {
                        
                        
                        
                    }
                }
                interface IntStream$Builder extends _javatypes.java.lang.Interface, _javatypes.java.util._function.IntConsumer {
                    
                    accept(arg0: number): void;
                    add(arg0: number): _javatypes.java.util.stream.IntStream$Builder;
                    build(): _javatypes.java.util.stream.IntStream;
                    
                }
                namespace IntStream$Builder {
                    interface static {
                        
                        
                        
                    }
                }
                interface IntStream$IntMapMultiConsumer extends _javatypes.java.lang.Interface {
                    
                    accept(arg0: number, arg1: _javatypes.java.util._function.IntConsumer): void;
                    
                }
                namespace IntStream$IntMapMultiConsumer {
                    interface static {
                        
                        
                        
                    }
                }
            }
        
            namespace concurrent {
            
                interface TimeUnit extends _javatypes.java.lang.Enum<_javatypes.java.util.concurrent.TimeUnit> {
                    
                    convert(arg0: number, arg1: _javatypes.java.util.concurrent.TimeUnit): number;
                    convert(arg0: _javatypes.java.time.Duration): number;
                    toNanos(arg0: number): number;
                    toMicros(arg0: number): number;
                    toMillis(arg0: number): number;
                    toSeconds(arg0: number): number;
                    toMinutes(arg0: number): number;
                    toHours(arg0: number): number;
                    toDays(arg0: number): number;
                    timedWait(arg0: _javatypes.java.lang.Object, arg1: number): void;
                    timedJoin(arg0: _javatypes.java.lang.Thread, arg1: number): void;
                    sleep(arg0: number): void;
                    toChronoUnit(): _javatypes.java.time.temporal.ChronoUnit;
                    
                }
                namespace TimeUnit {
                    interface static {
                        
                        readonly NANOSECONDS: _javatypes.java.util.concurrent.TimeUnit;
                        readonly MICROSECONDS: _javatypes.java.util.concurrent.TimeUnit;
                        readonly MILLISECONDS: _javatypes.java.util.concurrent.TimeUnit;
                        readonly SECONDS: _javatypes.java.util.concurrent.TimeUnit;
                        readonly MINUTES: _javatypes.java.util.concurrent.TimeUnit;
                        readonly HOURS: _javatypes.java.util.concurrent.TimeUnit;
                        readonly DAYS: _javatypes.java.util.concurrent.TimeUnit;
                        
                        values(): _javatypes.java.util.concurrent.TimeUnit[];
                        valueOf(arg0: string): _javatypes.java.util.concurrent.TimeUnit;
                        of(arg0: _javatypes.java.time.temporal.ChronoUnit): _javatypes.java.util.concurrent.TimeUnit;
                        
                    }
                }
                interface Future<V> extends _javatypes.java.lang.Interface {
                    
                    cancel(arg0: boolean): boolean;
                    isCancelled(): boolean;
                    isDone(): boolean;
                    get(): V;
                    get(arg0: number, arg1: _javatypes.java.util.concurrent.TimeUnit): V;
                    
                }
                namespace Future {
                    interface static {
                        
                        
                        
                    }
                }
                interface ExecutorService extends _javatypes.java.lang.Interface, _javatypes.java.util.concurrent.Executor {
                    
                    shutdown(): void;
                    shutdownNow(): _javatypes.java.util.List<_javatypes.java.lang.Runnable>;
                    isShutdown(): boolean;
                    isTerminated(): boolean;
                    awaitTermination(arg0: number, arg1: _javatypes.java.util.concurrent.TimeUnit): boolean;
                    submit<T>(arg0: _javatypes.java.util.concurrent.Callable<T>): _javatypes.java.util.concurrent.Future<T>;
                    submit<T>(arg0: _javatypes.java.lang.Runnable, arg1: T): _javatypes.java.util.concurrent.Future<T>;
                    submit(arg0: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.Future<any>;
                    invokeAll<T>(arg0: _javatypes.java.util.Collection<any>): _javatypes.java.util.List<_javatypes.java.util.concurrent.Future<T>>;
                    invokeAll<T>(arg0: _javatypes.java.util.Collection<any>, arg1: number, arg2: _javatypes.java.util.concurrent.TimeUnit): _javatypes.java.util.List<_javatypes.java.util.concurrent.Future<T>>;
                    invokeAny<T>(arg0: _javatypes.java.util.Collection<any>): T;
                    invokeAny<T>(arg0: _javatypes.java.util.Collection<any>, arg1: number, arg2: _javatypes.java.util.concurrent.TimeUnit): T;
                    
                }
                namespace ExecutorService {
                    interface static {
                        
                        
                        
                    }
                }
                interface Executor extends _javatypes.java.lang.Interface {
                    
                    execute(arg0: _javatypes.java.lang.Runnable): void;
                    
                }
                namespace Executor {
                    interface static {
                        
                        
                        
                    }
                }
                interface Callable<V> extends _javatypes.java.lang.Interface {
                    
                    call(): V;
                    
                }
                namespace Callable {
                    interface static {
                        
                        
                        
                    }
                }
                interface CompletableFuture<T> extends _javatypes.java.lang.Object, _javatypes.java.util.concurrent.Future<T>, _javatypes.java.util.concurrent.CompletionStage<T> {
                    
                    isDone(): boolean;
                    get(): T;
                    get(arg0: number, arg1: _javatypes.java.util.concurrent.TimeUnit): T;
                    join(): T;
                    getNow(arg0: T): T;
                    complete(arg0: T): boolean;
                    completeExceptionally(arg0: _javatypes.java.lang.Throwable): boolean;
                    thenApply<U>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    thenApplyAsync<U>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    thenApplyAsync<U>(arg0: _javatypes.java.util._function.Function<any, any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    thenAccept(arg0: _javatypes.java.util._function.Consumer<any>): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    thenAcceptAsync(arg0: _javatypes.java.util._function.Consumer<any>): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    thenAcceptAsync(arg0: _javatypes.java.util._function.Consumer<any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    thenRun(arg0: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    thenRunAsync(arg0: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    thenRunAsync(arg0: _javatypes.java.lang.Runnable, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    thenCombine<U, V>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.BiFunction<any, any, any>): _javatypes.java.util.concurrent.CompletableFuture<V>;
                    thenCombineAsync<U, V>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.BiFunction<any, any, any>): _javatypes.java.util.concurrent.CompletableFuture<V>;
                    thenCombineAsync<U, V>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.BiFunction<any, any, any>, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<V>;
                    thenAcceptBoth<U>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    thenAcceptBothAsync<U>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    thenAcceptBothAsync<U>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.BiConsumer<any, any>, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    runAfterBoth(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    runAfterBothAsync(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    runAfterBothAsync(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.lang.Runnable, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    applyToEither<U>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.Function<any, U>): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    applyToEitherAsync<U>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.Function<any, U>): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    applyToEitherAsync<U>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.Function<any, U>, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    acceptEither(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.Consumer<any>): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    acceptEitherAsync(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.Consumer<any>): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    acceptEitherAsync(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.Consumer<any>, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    runAfterEither(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    runAfterEitherAsync(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    runAfterEitherAsync(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.lang.Runnable, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                    thenCompose<U>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    thenComposeAsync<U>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    thenComposeAsync<U>(arg0: _javatypes.java.util._function.Function<any, any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    whenComplete(arg0: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    whenCompleteAsync(arg0: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    whenCompleteAsync(arg0: _javatypes.java.util._function.BiConsumer<any, any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    handle<U>(arg0: _javatypes.java.util._function.BiFunction<any, _javatypes.java.lang.Throwable, any>): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    handleAsync<U>(arg0: _javatypes.java.util._function.BiFunction<any, _javatypes.java.lang.Throwable, any>): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    handleAsync<U>(arg0: _javatypes.java.util._function.BiFunction<any, _javatypes.java.lang.Throwable, any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    toCompletableFuture(): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    exceptionally(arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Throwable, any>): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    exceptionallyAsync(arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Throwable, any>): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    exceptionallyAsync(arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Throwable, any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    exceptionallyCompose(arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Throwable, any>): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    exceptionallyComposeAsync(arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Throwable, any>): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    exceptionallyComposeAsync(arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Throwable, any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    cancel(arg0: boolean): boolean;
                    isCancelled(): boolean;
                    isCompletedExceptionally(): boolean;
                    obtrudeValue(arg0: T): void;
                    obtrudeException(arg0: _javatypes.java.lang.Throwable): void;
                    getNumberOfDependents(): number;
                    toString(): string;
                    newIncompleteFuture<U>(): _javatypes.java.util.concurrent.CompletableFuture<U>;
                    defaultExecutor(): _javatypes.java.util.concurrent.Executor;
                    copy(): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    minimalCompletionStage(): _javatypes.java.util.concurrent.CompletionStage<T>;
                    completeAsync(arg0: _javatypes.java.util._function.Supplier<any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    completeAsync(arg0: _javatypes.java.util._function.Supplier<any>): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    orTimeout(arg0: number, arg1: _javatypes.java.util.concurrent.TimeUnit): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    completeOnTimeout(arg0: T, arg1: number, arg2: _javatypes.java.util.concurrent.TimeUnit): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    
                }
                namespace CompletableFuture {
                    interface static {
                        new <T>(): _javatypes.java.util.concurrent.CompletableFuture<T>;
                        
                        
                        supplyAsync<U>(arg0: _javatypes.java.util._function.Supplier<U>): _javatypes.java.util.concurrent.CompletableFuture<U>;
                        supplyAsync<U>(arg0: _javatypes.java.util._function.Supplier<U>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<U>;
                        runAsync(arg0: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                        runAsync(arg0: _javatypes.java.lang.Runnable, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                        completedFuture<U>(arg0: U): _javatypes.java.util.concurrent.CompletableFuture<U>;
                        allOf(arg0: _javatypes.java.util.concurrent.CompletableFuture<any>[]): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Void>;
                        anyOf(arg0: _javatypes.java.util.concurrent.CompletableFuture<any>[]): _javatypes.java.util.concurrent.CompletableFuture<_javatypes.java.lang.Object>;
                        delayedExecutor(arg0: number, arg1: _javatypes.java.util.concurrent.TimeUnit, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.Executor;
                        delayedExecutor(arg0: number, arg1: _javatypes.java.util.concurrent.TimeUnit): _javatypes.java.util.concurrent.Executor;
                        completedStage<U>(arg0: U): _javatypes.java.util.concurrent.CompletionStage<U>;
                        failedFuture<U>(arg0: _javatypes.java.lang.Throwable): _javatypes.java.util.concurrent.CompletableFuture<U>;
                        failedStage<U>(arg0: _javatypes.java.lang.Throwable): _javatypes.java.util.concurrent.CompletionStage<U>;
                        
                    }
                }
                interface CompletionStage<T> extends _javatypes.java.lang.Interface {
                    
                    thenApply<U>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.concurrent.CompletionStage<U>;
                    thenApplyAsync<U>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.concurrent.CompletionStage<U>;
                    thenApplyAsync<U>(arg0: _javatypes.java.util._function.Function<any, any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<U>;
                    thenAccept(arg0: _javatypes.java.util._function.Consumer<any>): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    thenAcceptAsync(arg0: _javatypes.java.util._function.Consumer<any>): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    thenAcceptAsync(arg0: _javatypes.java.util._function.Consumer<any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    thenRun(arg0: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    thenRunAsync(arg0: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    thenRunAsync(arg0: _javatypes.java.lang.Runnable, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    thenCombine<U, V>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.BiFunction<any, any, any>): _javatypes.java.util.concurrent.CompletionStage<V>;
                    thenCombineAsync<U, V>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.BiFunction<any, any, any>): _javatypes.java.util.concurrent.CompletionStage<V>;
                    thenCombineAsync<U, V>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.BiFunction<any, any, any>, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<V>;
                    thenAcceptBoth<U>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    thenAcceptBothAsync<U>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    thenAcceptBothAsync<U>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.BiConsumer<any, any>, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    runAfterBoth(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    runAfterBothAsync(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    runAfterBothAsync(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.lang.Runnable, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    applyToEither<U>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.Function<any, U>): _javatypes.java.util.concurrent.CompletionStage<U>;
                    applyToEitherAsync<U>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.Function<any, U>): _javatypes.java.util.concurrent.CompletionStage<U>;
                    applyToEitherAsync<U>(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.Function<any, U>, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<U>;
                    acceptEither(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.Consumer<any>): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    acceptEitherAsync(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.Consumer<any>): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    acceptEitherAsync(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.util._function.Consumer<any>, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    runAfterEither(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    runAfterEitherAsync(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.lang.Runnable): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    runAfterEitherAsync(arg0: _javatypes.java.util.concurrent.CompletionStage<any>, arg1: _javatypes.java.lang.Runnable, arg2: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<_javatypes.java.lang.Void>;
                    thenCompose<U>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.concurrent.CompletionStage<U>;
                    thenComposeAsync<U>(arg0: _javatypes.java.util._function.Function<any, any>): _javatypes.java.util.concurrent.CompletionStage<U>;
                    thenComposeAsync<U>(arg0: _javatypes.java.util._function.Function<any, any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<U>;
                    handle<U>(arg0: _javatypes.java.util._function.BiFunction<any, _javatypes.java.lang.Throwable, any>): _javatypes.java.util.concurrent.CompletionStage<U>;
                    handleAsync<U>(arg0: _javatypes.java.util._function.BiFunction<any, _javatypes.java.lang.Throwable, any>): _javatypes.java.util.concurrent.CompletionStage<U>;
                    handleAsync<U>(arg0: _javatypes.java.util._function.BiFunction<any, _javatypes.java.lang.Throwable, any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<U>;
                    whenComplete(arg0: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util.concurrent.CompletionStage<T>;
                    whenCompleteAsync(arg0: _javatypes.java.util._function.BiConsumer<any, any>): _javatypes.java.util.concurrent.CompletionStage<T>;
                    whenCompleteAsync(arg0: _javatypes.java.util._function.BiConsumer<any, any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<T>;
                    exceptionally(arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Throwable, any>): _javatypes.java.util.concurrent.CompletionStage<T>;
                    exceptionallyAsync(arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Throwable, any>): _javatypes.java.util.concurrent.CompletionStage<T>;
                    exceptionallyAsync(arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Throwable, any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<T>;
                    exceptionallyCompose(arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Throwable, any>): _javatypes.java.util.concurrent.CompletionStage<T>;
                    exceptionallyComposeAsync(arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Throwable, any>): _javatypes.java.util.concurrent.CompletionStage<T>;
                    exceptionallyComposeAsync(arg0: _javatypes.java.util._function.Function<_javatypes.java.lang.Throwable, any>, arg1: _javatypes.java.util.concurrent.Executor): _javatypes.java.util.concurrent.CompletionStage<T>;
                    toCompletableFuture(): _javatypes.java.util.concurrent.CompletableFuture<T>;
                    
                }
                namespace CompletionStage {
                    interface static {
                        
                        
                        
                    }
                }
            }
        
            namespace random {
            
                interface RandomGenerator extends _javatypes.java.lang.Interface {
                    
                    isDeprecated(): boolean;
                    doubles(): _javatypes.java.util.stream.DoubleStream;
                    doubles(arg0: number, arg1: number): _javatypes.java.util.stream.DoubleStream;
                    doubles(arg0: number): _javatypes.java.util.stream.DoubleStream;
                    doubles(arg0: number, arg1: number, arg2: number): _javatypes.java.util.stream.DoubleStream;
                    ints(): _javatypes.java.util.stream.IntStream;
                    ints(arg0: number, arg1: number): _javatypes.java.util.stream.IntStream;
                    ints(arg0: number): _javatypes.java.util.stream.IntStream;
                    ints(arg0: number, arg1: number, arg2: number): _javatypes.java.util.stream.IntStream;
                    longs(): _javatypes.java.util.stream.LongStream;
                    longs(arg0: number, arg1: number): _javatypes.java.util.stream.LongStream;
                    longs(arg0: number): _javatypes.java.util.stream.LongStream;
                    longs(arg0: number, arg1: number, arg2: number): _javatypes.java.util.stream.LongStream;
                    nextBoolean(): boolean;
                    nextBytes(arg0: number[]): void;
                    nextFloat(): number;
                    nextFloat(arg0: number): number;
                    nextFloat(arg0: number, arg1: number): number;
                    nextDouble(): number;
                    nextDouble(arg0: number): number;
                    nextDouble(arg0: number, arg1: number): number;
                    nextInt(): number;
                    nextInt(arg0: number): number;
                    nextInt(arg0: number, arg1: number): number;
                    nextLong(): number;
                    nextLong(arg0: number): number;
                    nextLong(arg0: number, arg1: number): number;
                    nextGaussian(): number;
                    nextGaussian(arg0: number, arg1: number): number;
                    nextExponential(): number;
                    
                }
                namespace RandomGenerator {
                    interface static {
                        
                        
                        of(arg0: string): _javatypes.java.util.random.RandomGenerator;
                        getDefault(): _javatypes.java.util.random.RandomGenerator;
                        
                    }
                }
            }
        }
    
        namespace nio {
        
            interface ByteBuffer extends _javatypes.java.nio.Buffer, _javatypes.java.lang.Comparable<_javatypes.java.nio.ByteBuffer> {
                
                slice(): _javatypes.java.nio.ByteBuffer;
                slice(arg0: number, arg1: number): _javatypes.java.nio.ByteBuffer;
                duplicate(): _javatypes.java.nio.ByteBuffer;
                asReadOnlyBuffer(): _javatypes.java.nio.ByteBuffer;
                get(): number;
                put(arg0: number): _javatypes.java.nio.ByteBuffer;
                get(arg0: number): number;
                put(arg0: number, arg1: number): _javatypes.java.nio.ByteBuffer;
                get(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.ByteBuffer;
                get(arg0: number[]): _javatypes.java.nio.ByteBuffer;
                get(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.ByteBuffer;
                get(arg0: number, arg1: number[]): _javatypes.java.nio.ByteBuffer;
                put(arg0: _javatypes.java.nio.ByteBuffer): _javatypes.java.nio.ByteBuffer;
                put(arg0: number, arg1: _javatypes.java.nio.ByteBuffer, arg2: number, arg3: number): _javatypes.java.nio.ByteBuffer;
                put(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.ByteBuffer;
                put(arg0: number[]): _javatypes.java.nio.ByteBuffer;
                put(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.ByteBuffer;
                put(arg0: number, arg1: number[]): _javatypes.java.nio.ByteBuffer;
                hasArray(): boolean;
                array(): number[];
                arrayOffset(): number;
                position(arg0: number): _javatypes.java.nio.ByteBuffer;
                limit(arg0: number): _javatypes.java.nio.ByteBuffer;
                mark(): _javatypes.java.nio.ByteBuffer;
                reset(): _javatypes.java.nio.ByteBuffer;
                clear(): _javatypes.java.nio.ByteBuffer;
                flip(): _javatypes.java.nio.ByteBuffer;
                rewind(): _javatypes.java.nio.ByteBuffer;
                compact(): _javatypes.java.nio.ByteBuffer;
                isDirect(): boolean;
                toString(): string;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                compareTo(arg0: _javatypes.java.nio.ByteBuffer): number;
                mismatch(arg0: _javatypes.java.nio.ByteBuffer): number;
                order(): _javatypes.java.nio.ByteOrder;
                order(arg0: _javatypes.java.nio.ByteOrder): _javatypes.java.nio.ByteBuffer;
                alignmentOffset(arg0: number, arg1: number): number;
                alignedSlice(arg0: number): _javatypes.java.nio.ByteBuffer;
                getChar(): number;
                putChar(arg0: number): _javatypes.java.nio.ByteBuffer;
                getChar(arg0: number): number;
                putChar(arg0: number, arg1: number): _javatypes.java.nio.ByteBuffer;
                asCharBuffer(): _javatypes.java.nio.CharBuffer;
                getShort(): number;
                putShort(arg0: number): _javatypes.java.nio.ByteBuffer;
                getShort(arg0: number): number;
                putShort(arg0: number, arg1: number): _javatypes.java.nio.ByteBuffer;
                asShortBuffer(): _javatypes.java.nio.ShortBuffer;
                getInt(): number;
                putInt(arg0: number): _javatypes.java.nio.ByteBuffer;
                getInt(arg0: number): number;
                putInt(arg0: number, arg1: number): _javatypes.java.nio.ByteBuffer;
                asIntBuffer(): _javatypes.java.nio.IntBuffer;
                getLong(): number;
                putLong(arg0: number): _javatypes.java.nio.ByteBuffer;
                getLong(arg0: number): number;
                putLong(arg0: number, arg1: number): _javatypes.java.nio.ByteBuffer;
                asLongBuffer(): _javatypes.java.nio.LongBuffer;
                getFloat(): number;
                putFloat(arg0: number): _javatypes.java.nio.ByteBuffer;
                getFloat(arg0: number): number;
                putFloat(arg0: number, arg1: number): _javatypes.java.nio.ByteBuffer;
                asFloatBuffer(): _javatypes.java.nio.FloatBuffer;
                getDouble(): number;
                putDouble(arg0: number): _javatypes.java.nio.ByteBuffer;
                getDouble(arg0: number): number;
                putDouble(arg0: number, arg1: number): _javatypes.java.nio.ByteBuffer;
                asDoubleBuffer(): _javatypes.java.nio.DoubleBuffer;
                
            }
            namespace ByteBuffer {
                interface static {
                    
                    
                    allocateDirect(arg0: number): _javatypes.java.nio.ByteBuffer;
                    allocate(arg0: number): _javatypes.java.nio.ByteBuffer;
                    wrap(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.ByteBuffer;
                    wrap(arg0: number[]): _javatypes.java.nio.ByteBuffer;
                    
                }
            }
            interface ByteOrder extends _javatypes.java.lang.Object {
                
                toString(): string;
                
            }
            namespace ByteOrder {
                interface static {
                    
                    readonly BIG_ENDIAN: _javatypes.java.nio.ByteOrder;
                    readonly LITTLE_ENDIAN: _javatypes.java.nio.ByteOrder;
                    
                    nativeOrder(): _javatypes.java.nio.ByteOrder;
                    
                }
            }
            interface CharBuffer extends _javatypes.java.nio.Buffer, _javatypes.java.lang.Comparable<_javatypes.java.nio.CharBuffer>, _javatypes.java.lang.Appendable, _javatypes.java.lang.CharSequence, _javatypes.java.lang.Readable {
                
                read(arg0: _javatypes.java.nio.CharBuffer): number;
                slice(): _javatypes.java.nio.CharBuffer;
                slice(arg0: number, arg1: number): _javatypes.java.nio.CharBuffer;
                duplicate(): _javatypes.java.nio.CharBuffer;
                asReadOnlyBuffer(): _javatypes.java.nio.CharBuffer;
                get(): number;
                put(arg0: number): _javatypes.java.nio.CharBuffer;
                get(arg0: number): number;
                put(arg0: number, arg1: number): _javatypes.java.nio.CharBuffer;
                get(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.CharBuffer;
                get(arg0: number[]): _javatypes.java.nio.CharBuffer;
                get(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.CharBuffer;
                get(arg0: number, arg1: number[]): _javatypes.java.nio.CharBuffer;
                put(arg0: _javatypes.java.nio.CharBuffer): _javatypes.java.nio.CharBuffer;
                put(arg0: number, arg1: _javatypes.java.nio.CharBuffer, arg2: number, arg3: number): _javatypes.java.nio.CharBuffer;
                put(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.CharBuffer;
                put(arg0: number[]): _javatypes.java.nio.CharBuffer;
                put(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.CharBuffer;
                put(arg0: number, arg1: number[]): _javatypes.java.nio.CharBuffer;
                put(arg0: string, arg1: number, arg2: number): _javatypes.java.nio.CharBuffer;
                put(arg0: string): _javatypes.java.nio.CharBuffer;
                hasArray(): boolean;
                array(): number[];
                arrayOffset(): number;
                position(arg0: number): _javatypes.java.nio.CharBuffer;
                limit(arg0: number): _javatypes.java.nio.CharBuffer;
                mark(): _javatypes.java.nio.CharBuffer;
                reset(): _javatypes.java.nio.CharBuffer;
                clear(): _javatypes.java.nio.CharBuffer;
                flip(): _javatypes.java.nio.CharBuffer;
                rewind(): _javatypes.java.nio.CharBuffer;
                compact(): _javatypes.java.nio.CharBuffer;
                isDirect(): boolean;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                compareTo(arg0: _javatypes.java.nio.CharBuffer): number;
                mismatch(arg0: _javatypes.java.nio.CharBuffer): number;
                toString(): string;
                length(): number;
                isEmpty(): boolean;
                charAt(arg0: number): number;
                subSequence(arg0: number, arg1: number): _javatypes.java.nio.CharBuffer;
                append(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.nio.CharBuffer;
                append(arg0: _javatypes.java.lang.CharSequence, arg1: number, arg2: number): _javatypes.java.nio.CharBuffer;
                append(arg0: number): _javatypes.java.nio.CharBuffer;
                order(): _javatypes.java.nio.ByteOrder;
                chars(): _javatypes.java.util.stream.IntStream;
                
            }
            namespace CharBuffer {
                interface static {
                    
                    
                    allocate(arg0: number): _javatypes.java.nio.CharBuffer;
                    wrap(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.CharBuffer;
                    wrap(arg0: number[]): _javatypes.java.nio.CharBuffer;
                    wrap(arg0: _javatypes.java.lang.CharSequence, arg1: number, arg2: number): _javatypes.java.nio.CharBuffer;
                    wrap(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.nio.CharBuffer;
                    
                }
            }
            interface DoubleBuffer extends _javatypes.java.nio.Buffer, _javatypes.java.lang.Comparable<_javatypes.java.nio.DoubleBuffer> {
                
                slice(): _javatypes.java.nio.DoubleBuffer;
                slice(arg0: number, arg1: number): _javatypes.java.nio.DoubleBuffer;
                duplicate(): _javatypes.java.nio.DoubleBuffer;
                asReadOnlyBuffer(): _javatypes.java.nio.DoubleBuffer;
                get(): number;
                put(arg0: number): _javatypes.java.nio.DoubleBuffer;
                get(arg0: number): number;
                put(arg0: number, arg1: number): _javatypes.java.nio.DoubleBuffer;
                get(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.DoubleBuffer;
                get(arg0: number[]): _javatypes.java.nio.DoubleBuffer;
                get(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.DoubleBuffer;
                get(arg0: number, arg1: number[]): _javatypes.java.nio.DoubleBuffer;
                put(arg0: _javatypes.java.nio.DoubleBuffer): _javatypes.java.nio.DoubleBuffer;
                put(arg0: number, arg1: _javatypes.java.nio.DoubleBuffer, arg2: number, arg3: number): _javatypes.java.nio.DoubleBuffer;
                put(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.DoubleBuffer;
                put(arg0: number[]): _javatypes.java.nio.DoubleBuffer;
                put(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.DoubleBuffer;
                put(arg0: number, arg1: number[]): _javatypes.java.nio.DoubleBuffer;
                hasArray(): boolean;
                array(): number[];
                arrayOffset(): number;
                position(arg0: number): _javatypes.java.nio.DoubleBuffer;
                limit(arg0: number): _javatypes.java.nio.DoubleBuffer;
                mark(): _javatypes.java.nio.DoubleBuffer;
                reset(): _javatypes.java.nio.DoubleBuffer;
                clear(): _javatypes.java.nio.DoubleBuffer;
                flip(): _javatypes.java.nio.DoubleBuffer;
                rewind(): _javatypes.java.nio.DoubleBuffer;
                compact(): _javatypes.java.nio.DoubleBuffer;
                isDirect(): boolean;
                toString(): string;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                compareTo(arg0: _javatypes.java.nio.DoubleBuffer): number;
                mismatch(arg0: _javatypes.java.nio.DoubleBuffer): number;
                order(): _javatypes.java.nio.ByteOrder;
                
            }
            namespace DoubleBuffer {
                interface static {
                    
                    
                    allocate(arg0: number): _javatypes.java.nio.DoubleBuffer;
                    wrap(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.DoubleBuffer;
                    wrap(arg0: number[]): _javatypes.java.nio.DoubleBuffer;
                    
                }
            }
            interface LongBuffer extends _javatypes.java.nio.Buffer, _javatypes.java.lang.Comparable<_javatypes.java.nio.LongBuffer> {
                
                slice(): _javatypes.java.nio.LongBuffer;
                slice(arg0: number, arg1: number): _javatypes.java.nio.LongBuffer;
                duplicate(): _javatypes.java.nio.LongBuffer;
                asReadOnlyBuffer(): _javatypes.java.nio.LongBuffer;
                get(): number;
                put(arg0: number): _javatypes.java.nio.LongBuffer;
                get(arg0: number): number;
                put(arg0: number, arg1: number): _javatypes.java.nio.LongBuffer;
                get(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.LongBuffer;
                get(arg0: number[]): _javatypes.java.nio.LongBuffer;
                get(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.LongBuffer;
                get(arg0: number, arg1: number[]): _javatypes.java.nio.LongBuffer;
                put(arg0: _javatypes.java.nio.LongBuffer): _javatypes.java.nio.LongBuffer;
                put(arg0: number, arg1: _javatypes.java.nio.LongBuffer, arg2: number, arg3: number): _javatypes.java.nio.LongBuffer;
                put(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.LongBuffer;
                put(arg0: number[]): _javatypes.java.nio.LongBuffer;
                put(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.LongBuffer;
                put(arg0: number, arg1: number[]): _javatypes.java.nio.LongBuffer;
                hasArray(): boolean;
                array(): number[];
                arrayOffset(): number;
                position(arg0: number): _javatypes.java.nio.LongBuffer;
                limit(arg0: number): _javatypes.java.nio.LongBuffer;
                mark(): _javatypes.java.nio.LongBuffer;
                reset(): _javatypes.java.nio.LongBuffer;
                clear(): _javatypes.java.nio.LongBuffer;
                flip(): _javatypes.java.nio.LongBuffer;
                rewind(): _javatypes.java.nio.LongBuffer;
                compact(): _javatypes.java.nio.LongBuffer;
                isDirect(): boolean;
                toString(): string;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                compareTo(arg0: _javatypes.java.nio.LongBuffer): number;
                mismatch(arg0: _javatypes.java.nio.LongBuffer): number;
                order(): _javatypes.java.nio.ByteOrder;
                
            }
            namespace LongBuffer {
                interface static {
                    
                    
                    allocate(arg0: number): _javatypes.java.nio.LongBuffer;
                    wrap(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.LongBuffer;
                    wrap(arg0: number[]): _javatypes.java.nio.LongBuffer;
                    
                }
            }
            interface FloatBuffer extends _javatypes.java.nio.Buffer, _javatypes.java.lang.Comparable<_javatypes.java.nio.FloatBuffer> {
                
                slice(): _javatypes.java.nio.FloatBuffer;
                slice(arg0: number, arg1: number): _javatypes.java.nio.FloatBuffer;
                duplicate(): _javatypes.java.nio.FloatBuffer;
                asReadOnlyBuffer(): _javatypes.java.nio.FloatBuffer;
                get(): number;
                put(arg0: number): _javatypes.java.nio.FloatBuffer;
                get(arg0: number): number;
                put(arg0: number, arg1: number): _javatypes.java.nio.FloatBuffer;
                get(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.FloatBuffer;
                get(arg0: number[]): _javatypes.java.nio.FloatBuffer;
                get(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.FloatBuffer;
                get(arg0: number, arg1: number[]): _javatypes.java.nio.FloatBuffer;
                put(arg0: _javatypes.java.nio.FloatBuffer): _javatypes.java.nio.FloatBuffer;
                put(arg0: number, arg1: _javatypes.java.nio.FloatBuffer, arg2: number, arg3: number): _javatypes.java.nio.FloatBuffer;
                put(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.FloatBuffer;
                put(arg0: number[]): _javatypes.java.nio.FloatBuffer;
                put(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.FloatBuffer;
                put(arg0: number, arg1: number[]): _javatypes.java.nio.FloatBuffer;
                hasArray(): boolean;
                array(): number[];
                arrayOffset(): number;
                position(arg0: number): _javatypes.java.nio.FloatBuffer;
                limit(arg0: number): _javatypes.java.nio.FloatBuffer;
                mark(): _javatypes.java.nio.FloatBuffer;
                reset(): _javatypes.java.nio.FloatBuffer;
                clear(): _javatypes.java.nio.FloatBuffer;
                flip(): _javatypes.java.nio.FloatBuffer;
                rewind(): _javatypes.java.nio.FloatBuffer;
                compact(): _javatypes.java.nio.FloatBuffer;
                isDirect(): boolean;
                toString(): string;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                compareTo(arg0: _javatypes.java.nio.FloatBuffer): number;
                mismatch(arg0: _javatypes.java.nio.FloatBuffer): number;
                order(): _javatypes.java.nio.ByteOrder;
                
            }
            namespace FloatBuffer {
                interface static {
                    
                    
                    allocate(arg0: number): _javatypes.java.nio.FloatBuffer;
                    wrap(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.FloatBuffer;
                    wrap(arg0: number[]): _javatypes.java.nio.FloatBuffer;
                    
                }
            }
            interface IntBuffer extends _javatypes.java.nio.Buffer, _javatypes.java.lang.Comparable<_javatypes.java.nio.IntBuffer> {
                
                slice(): _javatypes.java.nio.IntBuffer;
                slice(arg0: number, arg1: number): _javatypes.java.nio.IntBuffer;
                duplicate(): _javatypes.java.nio.IntBuffer;
                asReadOnlyBuffer(): _javatypes.java.nio.IntBuffer;
                get(): number;
                put(arg0: number): _javatypes.java.nio.IntBuffer;
                get(arg0: number): number;
                put(arg0: number, arg1: number): _javatypes.java.nio.IntBuffer;
                get(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.IntBuffer;
                get(arg0: number[]): _javatypes.java.nio.IntBuffer;
                get(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.IntBuffer;
                get(arg0: number, arg1: number[]): _javatypes.java.nio.IntBuffer;
                put(arg0: _javatypes.java.nio.IntBuffer): _javatypes.java.nio.IntBuffer;
                put(arg0: number, arg1: _javatypes.java.nio.IntBuffer, arg2: number, arg3: number): _javatypes.java.nio.IntBuffer;
                put(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.IntBuffer;
                put(arg0: number[]): _javatypes.java.nio.IntBuffer;
                put(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.IntBuffer;
                put(arg0: number, arg1: number[]): _javatypes.java.nio.IntBuffer;
                hasArray(): boolean;
                array(): number[];
                arrayOffset(): number;
                position(arg0: number): _javatypes.java.nio.IntBuffer;
                limit(arg0: number): _javatypes.java.nio.IntBuffer;
                mark(): _javatypes.java.nio.IntBuffer;
                reset(): _javatypes.java.nio.IntBuffer;
                clear(): _javatypes.java.nio.IntBuffer;
                flip(): _javatypes.java.nio.IntBuffer;
                rewind(): _javatypes.java.nio.IntBuffer;
                compact(): _javatypes.java.nio.IntBuffer;
                isDirect(): boolean;
                toString(): string;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                compareTo(arg0: _javatypes.java.nio.IntBuffer): number;
                mismatch(arg0: _javatypes.java.nio.IntBuffer): number;
                order(): _javatypes.java.nio.ByteOrder;
                
            }
            namespace IntBuffer {
                interface static {
                    
                    
                    allocate(arg0: number): _javatypes.java.nio.IntBuffer;
                    wrap(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.IntBuffer;
                    wrap(arg0: number[]): _javatypes.java.nio.IntBuffer;
                    
                }
            }
            interface Buffer extends _javatypes.java.lang.Object {
                
                capacity(): number;
                position(): number;
                position(arg0: number): _javatypes.java.nio.Buffer;
                limit(): number;
                limit(arg0: number): _javatypes.java.nio.Buffer;
                mark(): _javatypes.java.nio.Buffer;
                reset(): _javatypes.java.nio.Buffer;
                clear(): _javatypes.java.nio.Buffer;
                flip(): _javatypes.java.nio.Buffer;
                rewind(): _javatypes.java.nio.Buffer;
                remaining(): number;
                hasRemaining(): boolean;
                isReadOnly(): boolean;
                hasArray(): boolean;
                array(): _javatypes.java.lang.Object;
                arrayOffset(): number;
                isDirect(): boolean;
                slice(): _javatypes.java.nio.Buffer;
                slice(arg0: number, arg1: number): _javatypes.java.nio.Buffer;
                duplicate(): _javatypes.java.nio.Buffer;
                
            }
            namespace Buffer {
                interface static {
                    
                    
                    
                }
            }
            interface ShortBuffer extends _javatypes.java.nio.Buffer, _javatypes.java.lang.Comparable<_javatypes.java.nio.ShortBuffer> {
                
                slice(): _javatypes.java.nio.ShortBuffer;
                slice(arg0: number, arg1: number): _javatypes.java.nio.ShortBuffer;
                duplicate(): _javatypes.java.nio.ShortBuffer;
                asReadOnlyBuffer(): _javatypes.java.nio.ShortBuffer;
                get(): number;
                put(arg0: number): _javatypes.java.nio.ShortBuffer;
                get(arg0: number): number;
                put(arg0: number, arg1: number): _javatypes.java.nio.ShortBuffer;
                get(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.ShortBuffer;
                get(arg0: number[]): _javatypes.java.nio.ShortBuffer;
                get(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.ShortBuffer;
                get(arg0: number, arg1: number[]): _javatypes.java.nio.ShortBuffer;
                put(arg0: _javatypes.java.nio.ShortBuffer): _javatypes.java.nio.ShortBuffer;
                put(arg0: number, arg1: _javatypes.java.nio.ShortBuffer, arg2: number, arg3: number): _javatypes.java.nio.ShortBuffer;
                put(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.ShortBuffer;
                put(arg0: number[]): _javatypes.java.nio.ShortBuffer;
                put(arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.nio.ShortBuffer;
                put(arg0: number, arg1: number[]): _javatypes.java.nio.ShortBuffer;
                hasArray(): boolean;
                array(): number[];
                arrayOffset(): number;
                position(arg0: number): _javatypes.java.nio.ShortBuffer;
                limit(arg0: number): _javatypes.java.nio.ShortBuffer;
                mark(): _javatypes.java.nio.ShortBuffer;
                reset(): _javatypes.java.nio.ShortBuffer;
                clear(): _javatypes.java.nio.ShortBuffer;
                flip(): _javatypes.java.nio.ShortBuffer;
                rewind(): _javatypes.java.nio.ShortBuffer;
                compact(): _javatypes.java.nio.ShortBuffer;
                isDirect(): boolean;
                toString(): string;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                compareTo(arg0: _javatypes.java.nio.ShortBuffer): number;
                mismatch(arg0: _javatypes.java.nio.ShortBuffer): number;
                order(): _javatypes.java.nio.ByteOrder;
                
            }
            namespace ShortBuffer {
                interface static {
                    
                    
                    allocate(arg0: number): _javatypes.java.nio.ShortBuffer;
                    wrap(arg0: number[], arg1: number, arg2: number): _javatypes.java.nio.ShortBuffer;
                    wrap(arg0: number[]): _javatypes.java.nio.ShortBuffer;
                    
                }
            }
            interface MappedByteBuffer extends _javatypes.java.nio.ByteBuffer {
                
                isLoaded(): boolean;
                load(): _javatypes.java.nio.MappedByteBuffer;
                force(): _javatypes.java.nio.MappedByteBuffer;
                force(arg0: number, arg1: number): _javatypes.java.nio.MappedByteBuffer;
                position(arg0: number): _javatypes.java.nio.MappedByteBuffer;
                limit(arg0: number): _javatypes.java.nio.MappedByteBuffer;
                mark(): _javatypes.java.nio.MappedByteBuffer;
                reset(): _javatypes.java.nio.MappedByteBuffer;
                clear(): _javatypes.java.nio.MappedByteBuffer;
                flip(): _javatypes.java.nio.MappedByteBuffer;
                rewind(): _javatypes.java.nio.MappedByteBuffer;
                slice(): _javatypes.java.nio.MappedByteBuffer;
                slice(arg0: number, arg1: number): _javatypes.java.nio.MappedByteBuffer;
                duplicate(): _javatypes.java.nio.MappedByteBuffer;
                compact(): _javatypes.java.nio.MappedByteBuffer;
                
            }
            namespace MappedByteBuffer {
                interface static {
                    
                    
                    
                }
            }
        
            namespace file {
            
                interface Path extends _javatypes.java.lang.Interface, _javatypes.java.lang.Comparable<_javatypes.java.nio.file.Path>, _javatypes.java.lang.Iterable<_javatypes.java.nio.file.Path>, _javatypes.java.nio.file.Watchable {
                    
                    getFileSystem(): _javatypes.java.nio.file.FileSystem;
                    isAbsolute(): boolean;
                    getRoot(): _javatypes.java.nio.file.Path;
                    getFileName(): _javatypes.java.nio.file.Path;
                    getParent(): _javatypes.java.nio.file.Path;
                    getNameCount(): number;
                    getName(arg0: number): _javatypes.java.nio.file.Path;
                    subpath(arg0: number, arg1: number): _javatypes.java.nio.file.Path;
                    startsWith(arg0: _javatypes.java.nio.file.Path): boolean;
                    startsWith(arg0: string): boolean;
                    endsWith(arg0: _javatypes.java.nio.file.Path): boolean;
                    endsWith(arg0: string): boolean;
                    normalize(): _javatypes.java.nio.file.Path;
                    resolve(arg0: _javatypes.java.nio.file.Path): _javatypes.java.nio.file.Path;
                    resolve(arg0: string): _javatypes.java.nio.file.Path;
                    resolveSibling(arg0: _javatypes.java.nio.file.Path): _javatypes.java.nio.file.Path;
                    resolveSibling(arg0: string): _javatypes.java.nio.file.Path;
                    relativize(arg0: _javatypes.java.nio.file.Path): _javatypes.java.nio.file.Path;
                    toUri(): _javatypes.java.net.URI;
                    toAbsolutePath(): _javatypes.java.nio.file.Path;
                    toRealPath(arg0: _javatypes.java.nio.file.LinkOption[]): _javatypes.java.nio.file.Path;
                    toFile(): _javatypes.java.io.File;
                    register(arg0: _javatypes.java.nio.file.WatchService, arg1: _javatypes.java.nio.file.WatchEvent$Kind<any>[], arg2: _javatypes.java.nio.file.WatchEvent$Modifier[]): _javatypes.java.nio.file.WatchKey;
                    register(arg0: _javatypes.java.nio.file.WatchService, arg1: _javatypes.java.nio.file.WatchEvent$Kind<any>[]): _javatypes.java.nio.file.WatchKey;
                    iterator(): _javatypes.java.util.Iterator<_javatypes.java.nio.file.Path>;
                    compareTo(arg0: _javatypes.java.nio.file.Path): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace Path {
                    interface static {
                        
                        
                        of(arg0: string, arg1: string[]): _javatypes.java.nio.file.Path;
                        of(arg0: _javatypes.java.net.URI): _javatypes.java.nio.file.Path;
                        
                    }
                }
                interface WatchService extends _javatypes.java.lang.Interface, _javatypes.java.io.Closeable {
                    
                    close(): void;
                    poll(): _javatypes.java.nio.file.WatchKey;
                    poll(arg0: number, arg1: _javatypes.java.util.concurrent.TimeUnit): _javatypes.java.nio.file.WatchKey;
                    take(): _javatypes.java.nio.file.WatchKey;
                    
                }
                namespace WatchService {
                    interface static {
                        
                        
                        
                    }
                }
                interface Watchable extends _javatypes.java.lang.Interface {
                    
                    register(arg0: _javatypes.java.nio.file.WatchService, arg1: _javatypes.java.nio.file.WatchEvent$Kind<any>[], arg2: _javatypes.java.nio.file.WatchEvent$Modifier[]): _javatypes.java.nio.file.WatchKey;
                    register(arg0: _javatypes.java.nio.file.WatchService, arg1: _javatypes.java.nio.file.WatchEvent$Kind<any>[]): _javatypes.java.nio.file.WatchKey;
                    
                }
                namespace Watchable {
                    interface static {
                        
                        
                        
                    }
                }
                interface LinkOption extends _javatypes.java.lang.Enum<_javatypes.java.nio.file.LinkOption>, _javatypes.java.nio.file.OpenOption, _javatypes.java.nio.file.CopyOption {
                    
                    
                }
                namespace LinkOption {
                    interface static {
                        
                        readonly NOFOLLOW_LINKS: _javatypes.java.nio.file.LinkOption;
                        
                        values(): _javatypes.java.nio.file.LinkOption[];
                        valueOf(arg0: string): _javatypes.java.nio.file.LinkOption;
                        
                    }
                }
                interface WatchEvent$Kind<T> extends _javatypes.java.lang.Interface {
                    
                    name(): string;
                    type(): _javatypes.java.lang.Class<T>;
                    
                }
                namespace WatchEvent$Kind {
                    interface static {
                        
                        
                        
                    }
                }
                interface WatchKey extends _javatypes.java.lang.Interface {
                    
                    isValid(): boolean;
                    pollEvents(): _javatypes.java.util.List<_javatypes.java.nio.file.WatchEvent<any>>;
                    reset(): boolean;
                    cancel(): void;
                    watchable(): _javatypes.java.nio.file.Watchable;
                    
                }
                namespace WatchKey {
                    interface static {
                        
                        
                        
                    }
                }
                interface WatchEvent$Modifier extends _javatypes.java.lang.Interface {
                    
                    name(): string;
                    
                }
                namespace WatchEvent$Modifier {
                    interface static {
                        
                        
                        
                    }
                }
                interface FileSystem extends _javatypes.java.lang.Object, _javatypes.java.io.Closeable {
                    
                    provider(): _javatypes.java.nio.file.spi.FileSystemProvider;
                    close(): void;
                    isOpen(): boolean;
                    isReadOnly(): boolean;
                    getSeparator(): string;
                    getRootDirectories(): _javatypes.java.lang.Iterable<_javatypes.java.nio.file.Path>;
                    getFileStores(): _javatypes.java.lang.Iterable<_javatypes.java.nio.file.FileStore>;
                    supportedFileAttributeViews(): _javatypes.java.util.Set<string>;
                    getPath(arg0: string, arg1: string[]): _javatypes.java.nio.file.Path;
                    getPathMatcher(arg0: string): _javatypes.java.nio.file.PathMatcher;
                    getUserPrincipalLookupService(): _javatypes.java.nio.file.attribute.UserPrincipalLookupService;
                    newWatchService(): _javatypes.java.nio.file.WatchService;
                    
                }
                namespace FileSystem {
                    interface static {
                        
                        
                        
                    }
                }
                interface FileStore extends _javatypes.java.lang.Object {
                    
                    name(): string;
                    type(): string;
                    isReadOnly(): boolean;
                    getTotalSpace(): number;
                    getUsableSpace(): number;
                    getUnallocatedSpace(): number;
                    getBlockSize(): number;
                    supportsFileAttributeView(arg0: _javatypes.java.lang.Class<any>): boolean;
                    supportsFileAttributeView(arg0: string): boolean;
                    getFileStoreAttributeView<V>(arg0: _javatypes.java.lang.Class<V>): V;
                    getAttribute(arg0: string): _javatypes.java.lang.Object;
                    
                }
                namespace FileStore {
                    interface static {
                        
                        
                        
                    }
                }
                interface DirectoryStream<T> extends _javatypes.java.lang.Interface, _javatypes.java.io.Closeable, _javatypes.java.lang.Iterable<T> {
                    
                    iterator(): _javatypes.java.util.Iterator<T>;
                    
                }
                namespace DirectoryStream {
                    interface static {
                        
                        
                        
                    }
                }
                interface WatchEvent<T> extends _javatypes.java.lang.Interface {
                    
                    kind(): _javatypes.java.nio.file.WatchEvent$Kind<T>;
                    count(): number;
                    context(): T;
                    
                }
                namespace WatchEvent {
                    interface static {
                        
                        
                        
                    }
                }
                interface OpenOption extends _javatypes.java.lang.Interface {
                    
                    
                }
                namespace OpenOption {
                    interface static {
                        
                        
                        
                    }
                }
                interface AccessMode extends _javatypes.java.lang.Enum<_javatypes.java.nio.file.AccessMode> {
                    
                    
                }
                namespace AccessMode {
                    interface static {
                        
                        readonly READ: _javatypes.java.nio.file.AccessMode;
                        readonly WRITE: _javatypes.java.nio.file.AccessMode;
                        readonly EXECUTE: _javatypes.java.nio.file.AccessMode;
                        
                        values(): _javatypes.java.nio.file.AccessMode[];
                        valueOf(arg0: string): _javatypes.java.nio.file.AccessMode;
                        
                    }
                }
                interface CopyOption extends _javatypes.java.lang.Interface {
                    
                    
                }
                namespace CopyOption {
                    interface static {
                        
                        
                        
                    }
                }
                interface DirectoryStream$Filter<T> extends _javatypes.java.lang.Interface {
                    
                    accept(arg0: T): boolean;
                    
                }
                namespace DirectoryStream$Filter {
                    interface static {
                        
                        
                        
                    }
                }
                interface PathMatcher extends _javatypes.java.lang.Interface {
                    
                    matches(arg0: _javatypes.java.nio.file.Path): boolean;
                    
                }
                namespace PathMatcher {
                    interface static {
                        
                        
                        
                    }
                }
            
                namespace spi {
                
                    interface FileSystemProvider extends _javatypes.java.lang.Object {
                        
                        getScheme(): string;
                        newFileSystem(arg0: _javatypes.java.net.URI, arg1: _javatypes.java.util.Map<string, any>): _javatypes.java.nio.file.FileSystem;
                        getFileSystem(arg0: _javatypes.java.net.URI): _javatypes.java.nio.file.FileSystem;
                        getPath(arg0: _javatypes.java.net.URI): _javatypes.java.nio.file.Path;
                        newFileSystem(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.util.Map<string, any>): _javatypes.java.nio.file.FileSystem;
                        newInputStream(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.nio.file.OpenOption[]): _javatypes.java.io.InputStream;
                        newOutputStream(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.nio.file.OpenOption[]): _javatypes.java.io.OutputStream;
                        newFileChannel(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.util.Set<any>, arg2: _javatypes.java.nio.file.attribute.FileAttribute<any>[]): _javatypes.java.nio.channels.FileChannel;
                        newAsynchronousFileChannel(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.util.Set<any>, arg2: _javatypes.java.util.concurrent.ExecutorService, arg3: _javatypes.java.nio.file.attribute.FileAttribute<any>[]): _javatypes.java.nio.channels.AsynchronousFileChannel;
                        newByteChannel(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.util.Set<any>, arg2: _javatypes.java.nio.file.attribute.FileAttribute<any>[]): _javatypes.java.nio.channels.SeekableByteChannel;
                        newDirectoryStream(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.nio.file.DirectoryStream$Filter<any>): _javatypes.java.nio.file.DirectoryStream<_javatypes.java.nio.file.Path>;
                        createDirectory(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.nio.file.attribute.FileAttribute<any>[]): void;
                        createSymbolicLink(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.nio.file.Path, arg2: _javatypes.java.nio.file.attribute.FileAttribute<any>[]): void;
                        createLink(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.nio.file.Path): void;
                        delete(arg0: _javatypes.java.nio.file.Path): void;
                        deleteIfExists(arg0: _javatypes.java.nio.file.Path): boolean;
                        readSymbolicLink(arg0: _javatypes.java.nio.file.Path): _javatypes.java.nio.file.Path;
                        copy(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.nio.file.Path, arg2: _javatypes.java.nio.file.CopyOption[]): void;
                        move(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.nio.file.Path, arg2: _javatypes.java.nio.file.CopyOption[]): void;
                        isSameFile(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.nio.file.Path): boolean;
                        isHidden(arg0: _javatypes.java.nio.file.Path): boolean;
                        getFileStore(arg0: _javatypes.java.nio.file.Path): _javatypes.java.nio.file.FileStore;
                        checkAccess(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.nio.file.AccessMode[]): void;
                        getFileAttributeView<V>(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.lang.Class<V>, arg2: _javatypes.java.nio.file.LinkOption[]): V;
                        readAttributes<A>(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.lang.Class<A>, arg2: _javatypes.java.nio.file.LinkOption[]): A;
                        readAttributes(arg0: _javatypes.java.nio.file.Path, arg1: string, arg2: _javatypes.java.nio.file.LinkOption[]): _javatypes.java.util.Map<string, _javatypes.java.lang.Object>;
                        setAttribute(arg0: _javatypes.java.nio.file.Path, arg1: string, arg2: _javatypes.java.lang.Object, arg3: _javatypes.java.nio.file.LinkOption[]): void;
                        
                    }
                    namespace FileSystemProvider {
                        interface static {
                            
                            
                            installedProviders(): _javatypes.java.util.List<_javatypes.java.nio.file.spi.FileSystemProvider>;
                            
                        }
                    }
                }
            
                namespace attribute {
                
                    interface UserPrincipalLookupService extends _javatypes.java.lang.Object {
                        
                        lookupPrincipalByName(arg0: string): _javatypes.java.nio.file.attribute.UserPrincipal;
                        lookupPrincipalByGroupName(arg0: string): _javatypes.java.nio.file.attribute.GroupPrincipal;
                        
                    }
                    namespace UserPrincipalLookupService {
                        interface static {
                            
                            
                            
                        }
                    }
                    interface GroupPrincipal extends _javatypes.java.lang.Interface, _javatypes.java.nio.file.attribute.UserPrincipal {
                        
                        
                    }
                    namespace GroupPrincipal {
                        interface static {
                            
                            
                            
                        }
                    }
                    interface UserPrincipal extends _javatypes.java.lang.Interface, _javatypes.java.security.Principal {
                        
                        
                    }
                    namespace UserPrincipal {
                        interface static {
                            
                            
                            
                        }
                    }
                    interface FileAttribute<T> extends _javatypes.java.lang.Interface {
                        
                        name(): string;
                        value(): T;
                        
                    }
                    namespace FileAttribute {
                        interface static {
                            
                            
                            
                        }
                    }
                }
            }
        
            namespace channels {
            
                interface FileChannel extends _javatypes.java.nio.channels.spi.AbstractInterruptibleChannel, _javatypes.java.nio.channels.SeekableByteChannel, _javatypes.java.nio.channels.GatheringByteChannel, _javatypes.java.nio.channels.ScatteringByteChannel {
                    
                    read(arg0: _javatypes.java.nio.ByteBuffer): number;
                    read(arg0: _javatypes.java.nio.ByteBuffer[], arg1: number, arg2: number): number;
                    read(arg0: _javatypes.java.nio.ByteBuffer[]): number;
                    write(arg0: _javatypes.java.nio.ByteBuffer): number;
                    write(arg0: _javatypes.java.nio.ByteBuffer[], arg1: number, arg2: number): number;
                    write(arg0: _javatypes.java.nio.ByteBuffer[]): number;
                    position(): number;
                    position(arg0: number): _javatypes.java.nio.channels.FileChannel;
                    size(): number;
                    truncate(arg0: number): _javatypes.java.nio.channels.FileChannel;
                    force(arg0: boolean): void;
                    transferTo(arg0: number, arg1: number, arg2: _javatypes.java.nio.channels.WritableByteChannel): number;
                    transferFrom(arg0: _javatypes.java.nio.channels.ReadableByteChannel, arg1: number, arg2: number): number;
                    read(arg0: _javatypes.java.nio.ByteBuffer, arg1: number): number;
                    write(arg0: _javatypes.java.nio.ByteBuffer, arg1: number): number;
                    map(arg0: _javatypes.java.nio.channels.FileChannel$MapMode, arg1: number, arg2: number): _javatypes.java.nio.MappedByteBuffer;
                    lock(arg0: number, arg1: number, arg2: boolean): _javatypes.java.nio.channels.FileLock;
                    lock(): _javatypes.java.nio.channels.FileLock;
                    tryLock(arg0: number, arg1: number, arg2: boolean): _javatypes.java.nio.channels.FileLock;
                    tryLock(): _javatypes.java.nio.channels.FileLock;
                    
                }
                namespace FileChannel {
                    interface static {
                        
                        
                        open(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.util.Set<any>, arg2: _javatypes.java.nio.file.attribute.FileAttribute<any>[]): _javatypes.java.nio.channels.FileChannel;
                        open(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.nio.file.OpenOption[]): _javatypes.java.nio.channels.FileChannel;
                        
                    }
                }
                interface AsynchronousFileChannel extends _javatypes.java.lang.Object, _javatypes.java.nio.channels.AsynchronousChannel {
                    
                    size(): number;
                    truncate(arg0: number): _javatypes.java.nio.channels.AsynchronousFileChannel;
                    force(arg0: boolean): void;
                    lock<A>(arg0: number, arg1: number, arg2: boolean, arg3: A, arg4: _javatypes.java.nio.channels.CompletionHandler<_javatypes.java.nio.channels.FileLock, any>): void;
                    lock<A>(arg0: A, arg1: _javatypes.java.nio.channels.CompletionHandler<_javatypes.java.nio.channels.FileLock, any>): void;
                    lock(arg0: number, arg1: number, arg2: boolean): _javatypes.java.util.concurrent.Future<_javatypes.java.nio.channels.FileLock>;
                    lock(): _javatypes.java.util.concurrent.Future<_javatypes.java.nio.channels.FileLock>;
                    tryLock(arg0: number, arg1: number, arg2: boolean): _javatypes.java.nio.channels.FileLock;
                    tryLock(): _javatypes.java.nio.channels.FileLock;
                    read<A>(arg0: _javatypes.java.nio.ByteBuffer, arg1: number, arg2: A, arg3: _javatypes.java.nio.channels.CompletionHandler<number, any>): void;
                    read(arg0: _javatypes.java.nio.ByteBuffer, arg1: number): _javatypes.java.util.concurrent.Future<number>;
                    write<A>(arg0: _javatypes.java.nio.ByteBuffer, arg1: number, arg2: A, arg3: _javatypes.java.nio.channels.CompletionHandler<number, any>): void;
                    write(arg0: _javatypes.java.nio.ByteBuffer, arg1: number): _javatypes.java.util.concurrent.Future<number>;
                    
                }
                namespace AsynchronousFileChannel {
                    interface static {
                        
                        
                        open(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.util.Set<any>, arg2: _javatypes.java.util.concurrent.ExecutorService, arg3: _javatypes.java.nio.file.attribute.FileAttribute<any>[]): _javatypes.java.nio.channels.AsynchronousFileChannel;
                        open(arg0: _javatypes.java.nio.file.Path, arg1: _javatypes.java.nio.file.OpenOption[]): _javatypes.java.nio.channels.AsynchronousFileChannel;
                        
                    }
                }
                interface SeekableByteChannel extends _javatypes.java.lang.Interface, _javatypes.java.nio.channels.ByteChannel {
                    
                    read(arg0: _javatypes.java.nio.ByteBuffer): number;
                    write(arg0: _javatypes.java.nio.ByteBuffer): number;
                    position(): number;
                    position(arg0: number): _javatypes.java.nio.channels.SeekableByteChannel;
                    size(): number;
                    truncate(arg0: number): _javatypes.java.nio.channels.SeekableByteChannel;
                    
                }
                namespace SeekableByteChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface ReadableByteChannel extends _javatypes.java.lang.Interface, _javatypes.java.nio.channels.Channel {
                    
                    read(arg0: _javatypes.java.nio.ByteBuffer): number;
                    
                }
                namespace ReadableByteChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface FileChannel$MapMode extends _javatypes.java.lang.Object {
                    
                    toString(): string;
                    
                }
                namespace FileChannel$MapMode {
                    interface static {
                        
                        readonly READ_ONLY: _javatypes.java.nio.channels.FileChannel$MapMode;
                        readonly READ_WRITE: _javatypes.java.nio.channels.FileChannel$MapMode;
                        readonly PRIVATE: _javatypes.java.nio.channels.FileChannel$MapMode;
                        
                        
                    }
                }
                interface AsynchronousChannel extends _javatypes.java.lang.Interface, _javatypes.java.nio.channels.Channel {
                    
                    close(): void;
                    
                }
                namespace AsynchronousChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface InterruptibleChannel extends _javatypes.java.lang.Interface, _javatypes.java.nio.channels.Channel {
                    
                    close(): void;
                    
                }
                namespace InterruptibleChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface ByteChannel extends _javatypes.java.lang.Interface, _javatypes.java.nio.channels.ReadableByteChannel, _javatypes.java.nio.channels.WritableByteChannel {
                    
                    
                }
                namespace ByteChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface ScatteringByteChannel extends _javatypes.java.lang.Interface, _javatypes.java.nio.channels.ReadableByteChannel {
                    
                    read(arg0: _javatypes.java.nio.ByteBuffer[], arg1: number, arg2: number): number;
                    read(arg0: _javatypes.java.nio.ByteBuffer[]): number;
                    
                }
                namespace ScatteringByteChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface Channel extends _javatypes.java.lang.Interface, _javatypes.java.io.Closeable {
                    
                    isOpen(): boolean;
                    close(): void;
                    
                }
                namespace Channel {
                    interface static {
                        
                        
                        
                    }
                }
                interface CompletionHandler<V, A> extends _javatypes.java.lang.Interface {
                    
                    completed(arg0: V, arg1: A): void;
                    failed(arg0: _javatypes.java.lang.Throwable, arg1: A): void;
                    
                }
                namespace CompletionHandler {
                    interface static {
                        
                        
                        
                    }
                }
                interface WritableByteChannel extends _javatypes.java.lang.Interface, _javatypes.java.nio.channels.Channel {
                    
                    write(arg0: _javatypes.java.nio.ByteBuffer): number;
                    
                }
                namespace WritableByteChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface GatheringByteChannel extends _javatypes.java.lang.Interface, _javatypes.java.nio.channels.WritableByteChannel {
                    
                    write(arg0: _javatypes.java.nio.ByteBuffer[], arg1: number, arg2: number): number;
                    write(arg0: _javatypes.java.nio.ByteBuffer[]): number;
                    
                }
                namespace GatheringByteChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface FileLock extends _javatypes.java.lang.Object, _javatypes.java.lang.AutoCloseable {
                    
                    channel(): _javatypes.java.nio.channels.FileChannel;
                    acquiredBy(): _javatypes.java.nio.channels.Channel;
                    position(): number;
                    size(): number;
                    isShared(): boolean;
                    overlaps(arg0: number, arg1: number): boolean;
                    isValid(): boolean;
                    release(): void;
                    close(): void;
                    toString(): string;
                    
                }
                namespace FileLock {
                    interface static {
                        
                        
                        
                    }
                }
                interface SocketChannel extends _javatypes.java.nio.channels.spi.AbstractSelectableChannel, _javatypes.java.nio.channels.ByteChannel, _javatypes.java.nio.channels.ScatteringByteChannel, _javatypes.java.nio.channels.GatheringByteChannel, _javatypes.java.nio.channels.NetworkChannel {
                    
                    validOps(): number;
                    bind(arg0: _javatypes.java.net.SocketAddress): _javatypes.java.nio.channels.SocketChannel;
                    setOption<T>(arg0: _javatypes.java.net.SocketOption<T>, arg1: T): _javatypes.java.nio.channels.SocketChannel;
                    shutdownInput(): _javatypes.java.nio.channels.SocketChannel;
                    shutdownOutput(): _javatypes.java.nio.channels.SocketChannel;
                    socket(): _javatypes.java.net.Socket;
                    isConnected(): boolean;
                    isConnectionPending(): boolean;
                    connect(arg0: _javatypes.java.net.SocketAddress): boolean;
                    finishConnect(): boolean;
                    getRemoteAddress(): _javatypes.java.net.SocketAddress;
                    read(arg0: _javatypes.java.nio.ByteBuffer): number;
                    read(arg0: _javatypes.java.nio.ByteBuffer[], arg1: number, arg2: number): number;
                    read(arg0: _javatypes.java.nio.ByteBuffer[]): number;
                    write(arg0: _javatypes.java.nio.ByteBuffer): number;
                    write(arg0: _javatypes.java.nio.ByteBuffer[], arg1: number, arg2: number): number;
                    write(arg0: _javatypes.java.nio.ByteBuffer[]): number;
                    getLocalAddress(): _javatypes.java.net.SocketAddress;
                    
                }
                namespace SocketChannel {
                    interface static {
                        
                        
                        open(): _javatypes.java.nio.channels.SocketChannel;
                        open(arg0: _javatypes.java.net.ProtocolFamily): _javatypes.java.nio.channels.SocketChannel;
                        open(arg0: _javatypes.java.net.SocketAddress): _javatypes.java.nio.channels.SocketChannel;
                        
                    }
                }
                interface DatagramChannel extends _javatypes.java.nio.channels.spi.AbstractSelectableChannel, _javatypes.java.nio.channels.ByteChannel, _javatypes.java.nio.channels.ScatteringByteChannel, _javatypes.java.nio.channels.GatheringByteChannel, _javatypes.java.nio.channels.MulticastChannel {
                    
                    validOps(): number;
                    bind(arg0: _javatypes.java.net.SocketAddress): _javatypes.java.nio.channels.DatagramChannel;
                    setOption<T>(arg0: _javatypes.java.net.SocketOption<T>, arg1: T): _javatypes.java.nio.channels.DatagramChannel;
                    socket(): _javatypes.java.net.DatagramSocket;
                    isConnected(): boolean;
                    connect(arg0: _javatypes.java.net.SocketAddress): _javatypes.java.nio.channels.DatagramChannel;
                    disconnect(): _javatypes.java.nio.channels.DatagramChannel;
                    getRemoteAddress(): _javatypes.java.net.SocketAddress;
                    receive(arg0: _javatypes.java.nio.ByteBuffer): _javatypes.java.net.SocketAddress;
                    send(arg0: _javatypes.java.nio.ByteBuffer, arg1: _javatypes.java.net.SocketAddress): number;
                    read(arg0: _javatypes.java.nio.ByteBuffer): number;
                    read(arg0: _javatypes.java.nio.ByteBuffer[], arg1: number, arg2: number): number;
                    read(arg0: _javatypes.java.nio.ByteBuffer[]): number;
                    write(arg0: _javatypes.java.nio.ByteBuffer): number;
                    write(arg0: _javatypes.java.nio.ByteBuffer[], arg1: number, arg2: number): number;
                    write(arg0: _javatypes.java.nio.ByteBuffer[]): number;
                    getLocalAddress(): _javatypes.java.net.SocketAddress;
                    
                }
                namespace DatagramChannel {
                    interface static {
                        
                        
                        open(): _javatypes.java.nio.channels.DatagramChannel;
                        open(arg0: _javatypes.java.net.ProtocolFamily): _javatypes.java.nio.channels.DatagramChannel;
                        
                    }
                }
                interface ServerSocketChannel extends _javatypes.java.nio.channels.spi.AbstractSelectableChannel, _javatypes.java.nio.channels.NetworkChannel {
                    
                    validOps(): number;
                    bind(arg0: _javatypes.java.net.SocketAddress): _javatypes.java.nio.channels.ServerSocketChannel;
                    bind(arg0: _javatypes.java.net.SocketAddress, arg1: number): _javatypes.java.nio.channels.ServerSocketChannel;
                    setOption<T>(arg0: _javatypes.java.net.SocketOption<T>, arg1: T): _javatypes.java.nio.channels.ServerSocketChannel;
                    socket(): _javatypes.java.net.ServerSocket;
                    accept(): _javatypes.java.nio.channels.SocketChannel;
                    getLocalAddress(): _javatypes.java.net.SocketAddress;
                    
                }
                namespace ServerSocketChannel {
                    interface static {
                        
                        
                        open(): _javatypes.java.nio.channels.ServerSocketChannel;
                        open(arg0: _javatypes.java.net.ProtocolFamily): _javatypes.java.nio.channels.ServerSocketChannel;
                        
                    }
                }
                interface NetworkChannel extends _javatypes.java.lang.Interface, _javatypes.java.nio.channels.Channel {
                    
                    bind(arg0: _javatypes.java.net.SocketAddress): _javatypes.java.nio.channels.NetworkChannel;
                    getLocalAddress(): _javatypes.java.net.SocketAddress;
                    setOption<T>(arg0: _javatypes.java.net.SocketOption<T>, arg1: T): _javatypes.java.nio.channels.NetworkChannel;
                    getOption<T>(arg0: _javatypes.java.net.SocketOption<T>): T;
                    supportedOptions(): _javatypes.java.util.Set<_javatypes.java.net.SocketOption<any>>;
                    
                }
                namespace NetworkChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface Selector extends _javatypes.java.lang.Object, _javatypes.java.io.Closeable {
                    
                    isOpen(): boolean;
                    provider(): _javatypes.java.nio.channels.spi.SelectorProvider;
                    keys(): _javatypes.java.util.Set<_javatypes.java.nio.channels.SelectionKey>;
                    selectedKeys(): _javatypes.java.util.Set<_javatypes.java.nio.channels.SelectionKey>;
                    selectNow(): number;
                    select(arg0: number): number;
                    select(): number;
                    select(arg0: _javatypes.java.util._function.Consumer<_javatypes.java.nio.channels.SelectionKey>, arg1: number): number;
                    select(arg0: _javatypes.java.util._function.Consumer<_javatypes.java.nio.channels.SelectionKey>): number;
                    selectNow(arg0: _javatypes.java.util._function.Consumer<_javatypes.java.nio.channels.SelectionKey>): number;
                    wakeup(): _javatypes.java.nio.channels.Selector;
                    close(): void;
                    
                }
                namespace Selector {
                    interface static {
                        
                        
                        open(): _javatypes.java.nio.channels.Selector;
                        
                    }
                }
                interface Pipe extends _javatypes.java.lang.Object {
                    
                    source(): _javatypes.java.nio.channels.Pipe$SourceChannel;
                    sink(): _javatypes.java.nio.channels.Pipe$SinkChannel;
                    
                }
                namespace Pipe {
                    interface static {
                        
                        
                        open(): _javatypes.java.nio.channels.Pipe;
                        
                    }
                }
                interface SelectionKey extends _javatypes.java.lang.Object {
                    
                    channel(): _javatypes.java.nio.channels.SelectableChannel;
                    selector(): _javatypes.java.nio.channels.Selector;
                    isValid(): boolean;
                    cancel(): void;
                    interestOps(): number;
                    interestOps(arg0: number): _javatypes.java.nio.channels.SelectionKey;
                    interestOpsOr(arg0: number): number;
                    interestOpsAnd(arg0: number): number;
                    readyOps(): number;
                    isReadable(): boolean;
                    isWritable(): boolean;
                    isConnectable(): boolean;
                    isAcceptable(): boolean;
                    attach(arg0: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                    attachment(): _javatypes.java.lang.Object;
                    
                }
                namespace SelectionKey {
                    interface static {
                        
                        readonly OP_READ: number;
                        readonly OP_WRITE: number;
                        readonly OP_CONNECT: number;
                        readonly OP_ACCEPT: number;
                        
                        
                    }
                }
                interface SelectableChannel extends _javatypes.java.nio.channels.spi.AbstractInterruptibleChannel, _javatypes.java.nio.channels.Channel {
                    
                    provider(): _javatypes.java.nio.channels.spi.SelectorProvider;
                    validOps(): number;
                    isRegistered(): boolean;
                    keyFor(arg0: _javatypes.java.nio.channels.Selector): _javatypes.java.nio.channels.SelectionKey;
                    register(arg0: _javatypes.java.nio.channels.Selector, arg1: number, arg2: _javatypes.java.lang.Object): _javatypes.java.nio.channels.SelectionKey;
                    register(arg0: _javatypes.java.nio.channels.Selector, arg1: number): _javatypes.java.nio.channels.SelectionKey;
                    configureBlocking(arg0: boolean): _javatypes.java.nio.channels.SelectableChannel;
                    isBlocking(): boolean;
                    blockingLock(): _javatypes.java.lang.Object;
                    
                }
                namespace SelectableChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface Pipe$SourceChannel extends _javatypes.java.nio.channels.spi.AbstractSelectableChannel, _javatypes.java.nio.channels.ReadableByteChannel, _javatypes.java.nio.channels.ScatteringByteChannel {
                    
                    validOps(): number;
                    
                }
                namespace Pipe$SourceChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface Pipe$SinkChannel extends _javatypes.java.nio.channels.spi.AbstractSelectableChannel, _javatypes.java.nio.channels.WritableByteChannel, _javatypes.java.nio.channels.GatheringByteChannel {
                    
                    validOps(): number;
                    
                }
                namespace Pipe$SinkChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface MulticastChannel extends _javatypes.java.lang.Interface, _javatypes.java.nio.channels.NetworkChannel {
                    
                    close(): void;
                    join(arg0: _javatypes.java.net.InetAddress, arg1: _javatypes.java.net.NetworkInterface): _javatypes.java.nio.channels.MembershipKey;
                    join(arg0: _javatypes.java.net.InetAddress, arg1: _javatypes.java.net.NetworkInterface, arg2: _javatypes.java.net.InetAddress): _javatypes.java.nio.channels.MembershipKey;
                    
                }
                namespace MulticastChannel {
                    interface static {
                        
                        
                        
                    }
                }
                interface MembershipKey extends _javatypes.java.lang.Object {
                    
                    isValid(): boolean;
                    drop(): void;
                    block(arg0: _javatypes.java.net.InetAddress): _javatypes.java.nio.channels.MembershipKey;
                    unblock(arg0: _javatypes.java.net.InetAddress): _javatypes.java.nio.channels.MembershipKey;
                    channel(): _javatypes.java.nio.channels.MulticastChannel;
                    group(): _javatypes.java.net.InetAddress;
                    networkInterface(): _javatypes.java.net.NetworkInterface;
                    sourceAddress(): _javatypes.java.net.InetAddress;
                    
                }
                namespace MembershipKey {
                    interface static {
                        
                        
                        
                    }
                }
            
                namespace spi {
                
                    interface AbstractInterruptibleChannel extends _javatypes.java.lang.Object, _javatypes.java.nio.channels.Channel, _javatypes.java.nio.channels.InterruptibleChannel {
                        
                        close(): void;
                        isOpen(): boolean;
                        
                    }
                    namespace AbstractInterruptibleChannel {
                        interface static {
                            
                            
                            
                        }
                    }
                    interface AbstractSelectableChannel extends _javatypes.java.nio.channels.SelectableChannel {
                        
                        provider(): _javatypes.java.nio.channels.spi.SelectorProvider;
                        isRegistered(): boolean;
                        keyFor(arg0: _javatypes.java.nio.channels.Selector): _javatypes.java.nio.channels.SelectionKey;
                        register(arg0: _javatypes.java.nio.channels.Selector, arg1: number, arg2: _javatypes.java.lang.Object): _javatypes.java.nio.channels.SelectionKey;
                        isBlocking(): boolean;
                        blockingLock(): _javatypes.java.lang.Object;
                        configureBlocking(arg0: boolean): _javatypes.java.nio.channels.SelectableChannel;
                        
                    }
                    namespace AbstractSelectableChannel {
                        interface static {
                            
                            
                            
                        }
                    }
                    interface SelectorProvider extends _javatypes.java.lang.Object {
                        
                        openDatagramChannel(): _javatypes.java.nio.channels.DatagramChannel;
                        openDatagramChannel(arg0: _javatypes.java.net.ProtocolFamily): _javatypes.java.nio.channels.DatagramChannel;
                        openPipe(): _javatypes.java.nio.channels.Pipe;
                        openSelector(): _javatypes.java.nio.channels.spi.AbstractSelector;
                        openServerSocketChannel(): _javatypes.java.nio.channels.ServerSocketChannel;
                        openSocketChannel(): _javatypes.java.nio.channels.SocketChannel;
                        inheritedChannel(): _javatypes.java.nio.channels.Channel;
                        openSocketChannel(arg0: _javatypes.java.net.ProtocolFamily): _javatypes.java.nio.channels.SocketChannel;
                        openServerSocketChannel(arg0: _javatypes.java.net.ProtocolFamily): _javatypes.java.nio.channels.ServerSocketChannel;
                        
                    }
                    namespace SelectorProvider {
                        interface static {
                            
                            
                            provider(): _javatypes.java.nio.channels.spi.SelectorProvider;
                            
                        }
                    }
                    interface AbstractSelector extends _javatypes.java.nio.channels.Selector {
                        
                        close(): void;
                        isOpen(): boolean;
                        provider(): _javatypes.java.nio.channels.spi.SelectorProvider;
                        
                    }
                    namespace AbstractSelector {
                        interface static {
                            
                            
                            
                        }
                    }
                }
            }
        
            namespace charset {
            
                interface Charset extends _javatypes.java.lang.Object, _javatypes.java.lang.Comparable<_javatypes.java.nio.charset.Charset> {
                    
                    name(): string;
                    aliases(): _javatypes.java.util.Set<string>;
                    displayName(): string;
                    isRegistered(): boolean;
                    displayName(arg0: _javatypes.java.util.Locale): string;
                    contains(arg0: _javatypes.java.nio.charset.Charset): boolean;
                    newDecoder(): _javatypes.java.nio.charset.CharsetDecoder;
                    newEncoder(): _javatypes.java.nio.charset.CharsetEncoder;
                    canEncode(): boolean;
                    decode(arg0: _javatypes.java.nio.ByteBuffer): _javatypes.java.nio.CharBuffer;
                    encode(arg0: _javatypes.java.nio.CharBuffer): _javatypes.java.nio.ByteBuffer;
                    encode(arg0: string): _javatypes.java.nio.ByteBuffer;
                    compareTo(arg0: _javatypes.java.nio.charset.Charset): number;
                    hashCode(): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    toString(): string;
                    
                }
                namespace Charset {
                    interface static {
                        
                        
                        isSupported(arg0: string): boolean;
                        forName(arg0: string): _javatypes.java.nio.charset.Charset;
                        availableCharsets(): _javatypes.java.util.SortedMap<string, _javatypes.java.nio.charset.Charset>;
                        defaultCharset(): _javatypes.java.nio.charset.Charset;
                        
                    }
                }
                interface CharsetDecoder extends _javatypes.java.lang.Object {
                    
                    charset(): _javatypes.java.nio.charset.Charset;
                    replacement(): string;
                    replaceWith(arg0: string): _javatypes.java.nio.charset.CharsetDecoder;
                    malformedInputAction(): _javatypes.java.nio.charset.CodingErrorAction;
                    onMalformedInput(arg0: _javatypes.java.nio.charset.CodingErrorAction): _javatypes.java.nio.charset.CharsetDecoder;
                    unmappableCharacterAction(): _javatypes.java.nio.charset.CodingErrorAction;
                    onUnmappableCharacter(arg0: _javatypes.java.nio.charset.CodingErrorAction): _javatypes.java.nio.charset.CharsetDecoder;
                    averageCharsPerByte(): number;
                    maxCharsPerByte(): number;
                    decode(arg0: _javatypes.java.nio.ByteBuffer, arg1: _javatypes.java.nio.CharBuffer, arg2: boolean): _javatypes.java.nio.charset.CoderResult;
                    flush(arg0: _javatypes.java.nio.CharBuffer): _javatypes.java.nio.charset.CoderResult;
                    reset(): _javatypes.java.nio.charset.CharsetDecoder;
                    decode(arg0: _javatypes.java.nio.ByteBuffer): _javatypes.java.nio.CharBuffer;
                    isAutoDetecting(): boolean;
                    isCharsetDetected(): boolean;
                    detectedCharset(): _javatypes.java.nio.charset.Charset;
                    
                }
                namespace CharsetDecoder {
                    interface static {
                        
                        
                        
                    }
                }
                interface CharsetEncoder extends _javatypes.java.lang.Object {
                    
                    charset(): _javatypes.java.nio.charset.Charset;
                    replacement(): number[];
                    replaceWith(arg0: number[]): _javatypes.java.nio.charset.CharsetEncoder;
                    isLegalReplacement(arg0: number[]): boolean;
                    malformedInputAction(): _javatypes.java.nio.charset.CodingErrorAction;
                    onMalformedInput(arg0: _javatypes.java.nio.charset.CodingErrorAction): _javatypes.java.nio.charset.CharsetEncoder;
                    unmappableCharacterAction(): _javatypes.java.nio.charset.CodingErrorAction;
                    onUnmappableCharacter(arg0: _javatypes.java.nio.charset.CodingErrorAction): _javatypes.java.nio.charset.CharsetEncoder;
                    averageBytesPerChar(): number;
                    maxBytesPerChar(): number;
                    encode(arg0: _javatypes.java.nio.CharBuffer, arg1: _javatypes.java.nio.ByteBuffer, arg2: boolean): _javatypes.java.nio.charset.CoderResult;
                    flush(arg0: _javatypes.java.nio.ByteBuffer): _javatypes.java.nio.charset.CoderResult;
                    reset(): _javatypes.java.nio.charset.CharsetEncoder;
                    encode(arg0: _javatypes.java.nio.CharBuffer): _javatypes.java.nio.ByteBuffer;
                    canEncode(arg0: number): boolean;
                    canEncode(arg0: _javatypes.java.lang.CharSequence): boolean;
                    
                }
                namespace CharsetEncoder {
                    interface static {
                        
                        
                        
                    }
                }
                interface CoderResult extends _javatypes.java.lang.Object {
                    
                    toString(): string;
                    isUnderflow(): boolean;
                    isOverflow(): boolean;
                    isError(): boolean;
                    isMalformed(): boolean;
                    isUnmappable(): boolean;
                    length(): number;
                    throwException(): void;
                    
                }
                namespace CoderResult {
                    interface static {
                        
                        readonly UNDERFLOW: _javatypes.java.nio.charset.CoderResult;
                        readonly OVERFLOW: _javatypes.java.nio.charset.CoderResult;
                        
                        malformedForLength(arg0: number): _javatypes.java.nio.charset.CoderResult;
                        unmappableForLength(arg0: number): _javatypes.java.nio.charset.CoderResult;
                        
                    }
                }
                interface CodingErrorAction extends _javatypes.java.lang.Object {
                    
                    toString(): string;
                    
                }
                namespace CodingErrorAction {
                    interface static {
                        
                        readonly IGNORE: _javatypes.java.nio.charset.CodingErrorAction;
                        readonly REPLACE: _javatypes.java.nio.charset.CodingErrorAction;
                        readonly REPORT: _javatypes.java.nio.charset.CodingErrorAction;
                        
                        
                    }
                }
            }
        }
    
        namespace security {
        
            interface Principal extends _javatypes.java.lang.Interface {
                
                equals(arg0: _javatypes.java.lang.Object): boolean;
                toString(): string;
                hashCode(): number;
                getName(): string;
                implies(arg0: _javatypes.javax.security.auth.Subject): boolean;
                
            }
            namespace Principal {
                interface static {
                    
                    
                    
                }
            }
            interface PrivilegedExceptionAction<T> extends _javatypes.java.lang.Interface {
                
                run(): T;
                
            }
            namespace PrivilegedExceptionAction {
                interface static {
                    
                    
                    
                }
            }
            interface ProtectionDomain extends _javatypes.java.lang.Object {
                
                getCodeSource(): _javatypes.java.security.CodeSource;
                getClassLoader(): _javatypes.java.lang.ClassLoader;
                getPrincipals(): _javatypes.java.security.Principal[];
                getPermissions(): _javatypes.java.security.PermissionCollection;
                staticPermissionsOnly(): boolean;
                implies(arg0: _javatypes.java.security.Permission): boolean;
                toString(): string;
                
            }
            namespace ProtectionDomain {
                interface static {
                    new (arg0: _javatypes.java.security.CodeSource, arg1: _javatypes.java.security.PermissionCollection): _javatypes.java.security.ProtectionDomain;
                    new (arg0: _javatypes.java.security.CodeSource, arg1: _javatypes.java.security.PermissionCollection, arg2: _javatypes.java.lang.ClassLoader, arg3: _javatypes.java.security.Principal[]): _javatypes.java.security.ProtectionDomain;
                    
                    
                    
                }
            }
            interface PrivilegedAction<T> extends _javatypes.java.lang.Interface {
                
                run(): T;
                
            }
            namespace PrivilegedAction {
                interface static {
                    
                    
                    
                }
            }
            interface AccessControlContext extends _javatypes.java.lang.Object {
                
                getDomainCombiner(): _javatypes.java.security.DomainCombiner;
                checkPermission(arg0: _javatypes.java.security.Permission): void;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                
            }
            namespace AccessControlContext {
                interface static {
                    new (arg0: _javatypes.java.security.ProtectionDomain[]): _javatypes.java.security.AccessControlContext;
                    new (arg0: _javatypes.java.security.AccessControlContext, arg1: _javatypes.java.security.DomainCombiner): _javatypes.java.security.AccessControlContext;
                    
                    
                    
                }
            }
            interface CodeSource extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                getLocation(): _javatypes.java.net.URL;
                getCertificates(): _javatypes.java.security.cert.Certificate[];
                getCodeSigners(): _javatypes.java.security.CodeSigner[];
                implies(arg0: _javatypes.java.security.CodeSource): boolean;
                toString(): string;
                
            }
            namespace CodeSource {
                interface static {
                    new (arg0: _javatypes.java.net.URL, arg1: _javatypes.java.security.cert.Certificate[]): _javatypes.java.security.CodeSource;
                    new (arg0: _javatypes.java.net.URL, arg1: _javatypes.java.security.CodeSigner[]): _javatypes.java.security.CodeSource;
                    
                    
                    
                }
            }
            interface PermissionCollection extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                
                add(arg0: _javatypes.java.security.Permission): void;
                implies(arg0: _javatypes.java.security.Permission): boolean;
                elements(): _javatypes.java.util.Enumeration<_javatypes.java.security.Permission>;
                elementsAsStream(): _javatypes.java.util.stream.Stream<_javatypes.java.security.Permission>;
                setReadOnly(): void;
                isReadOnly(): boolean;
                toString(): string;
                
            }
            namespace PermissionCollection {
                interface static {
                    new (): _javatypes.java.security.PermissionCollection;
                    
                    
                    
                }
            }
            interface Permission extends _javatypes.java.lang.Object, _javatypes.java.security.Guard, _javatypes.java.io.Serializable {
                
                checkGuard(arg0: _javatypes.java.lang.Object): void;
                implies(arg0: _javatypes.java.security.Permission): boolean;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                getName(): string;
                getActions(): string;
                newPermissionCollection(): _javatypes.java.security.PermissionCollection;
                toString(): string;
                
            }
            namespace Permission {
                interface static {
                    new (arg0: string): _javatypes.java.security.Permission;
                    
                    
                    
                }
            }
            interface DomainCombiner extends _javatypes.java.lang.Interface {
                
                combine(arg0: _javatypes.java.security.ProtectionDomain[], arg1: _javatypes.java.security.ProtectionDomain[]): _javatypes.java.security.ProtectionDomain[];
                
            }
            namespace DomainCombiner {
                interface static {
                    
                    
                    
                }
            }
            interface CodeSigner extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                
                getSignerCertPath(): _javatypes.java.security.cert.CertPath;
                getTimestamp(): _javatypes.java.security.Timestamp;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                toString(): string;
                
            }
            namespace CodeSigner {
                interface static {
                    new (arg0: _javatypes.java.security.cert.CertPath, arg1: _javatypes.java.security.Timestamp): _javatypes.java.security.CodeSigner;
                    
                    
                    
                }
            }
            interface PublicKey extends _javatypes.java.lang.Interface, _javatypes.java.security.Key {
                
                
            }
            namespace PublicKey {
                interface static {
                    
                    readonly serialVersionUID: number;
                    
                    
                }
            }
            interface Provider extends _javatypes.java.util.Properties {
                
                configure(arg0: string): _javatypes.java.security.Provider;
                isConfigured(): boolean;
                getName(): string;
                getVersion(): number;
                getVersionStr(): string;
                getInfo(): string;
                toString(): string;
                clear(): void;
                load(arg0: _javatypes.java.io.InputStream): void;
                putAll(arg0: _javatypes.java.util.Map<any, any>): void;
                entrySet(): _javatypes.java.util.Set<_javatypes.java.util.Map$Entry<_javatypes.java.lang.Object, _javatypes.java.lang.Object>>;
                keySet(): _javatypes.java.util.Set<_javatypes.java.lang.Object>;
                values(): _javatypes.java.util.Collection<_javatypes.java.lang.Object>;
                put(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                putIfAbsent(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                remove(arg0: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                remove(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): boolean;
                replace(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object, arg2: _javatypes.java.lang.Object): boolean;
                replace(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                replaceAll(arg0: _javatypes.java.util._function.BiFunction<any, any, any>): void;
                compute(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.util._function.BiFunction<any, any, any>): _javatypes.java.lang.Object;
                computeIfAbsent(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.util._function.Function<any, any>): _javatypes.java.lang.Object;
                computeIfPresent(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.util._function.BiFunction<any, any, any>): _javatypes.java.lang.Object;
                merge(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object, arg2: _javatypes.java.util._function.BiFunction<any, any, any>): _javatypes.java.lang.Object;
                get(arg0: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                getOrDefault(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                forEach(arg0: _javatypes.java.util._function.BiConsumer<any, any>): void;
                keys(): _javatypes.java.util.Enumeration<_javatypes.java.lang.Object>;
                elements(): _javatypes.java.util.Enumeration<_javatypes.java.lang.Object>;
                getProperty(arg0: string): string;
                getService(arg0: string, arg1: string): _javatypes.java.security.Provider$Service;
                getServices(): _javatypes.java.util.Set<_javatypes.java.security.Provider$Service>;
                
            }
            namespace Provider {
                interface static {
                    
                    
                    
                }
            }
            interface Guard extends _javatypes.java.lang.Interface {
                
                checkGuard(arg0: _javatypes.java.lang.Object): void;
                
            }
            namespace Guard {
                interface static {
                    
                    
                    
                }
            }
            interface Provider$Service extends _javatypes.java.lang.Object {
                
                getType(): string;
                getAlgorithm(): string;
                getProvider(): _javatypes.java.security.Provider;
                getClassName(): string;
                getAttribute(arg0: string): string;
                newInstance(arg0: _javatypes.java.lang.Object): _javatypes.java.lang.Object;
                supportsParameter(arg0: _javatypes.java.lang.Object): boolean;
                toString(): string;
                
            }
            namespace Provider$Service {
                interface static {
                    new (arg0: _javatypes.java.security.Provider, arg1: string, arg2: string, arg3: string, arg4: _javatypes.java.util.List<string>, arg5: _javatypes.java.util.Map<string, string>): _javatypes.java.security.Provider$Service;
                    
                    
                    
                }
            }
            interface Timestamp extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                
                getTimestamp(): _javatypes.java.util.Date;
                getSignerCertPath(): _javatypes.java.security.cert.CertPath;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                toString(): string;
                
            }
            namespace Timestamp {
                interface static {
                    new (arg0: _javatypes.java.util.Date, arg1: _javatypes.java.security.cert.CertPath): _javatypes.java.security.Timestamp;
                    
                    
                    
                }
            }
            interface Key extends _javatypes.java.lang.Interface, _javatypes.java.io.Serializable {
                
                getAlgorithm(): string;
                getFormat(): string;
                getEncoded(): number[];
                
            }
            namespace Key {
                interface static {
                    
                    readonly serialVersionUID: number;
                    
                    
                }
            }
        
            namespace cert {
            
                interface Certificate extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                    
                    getType(): string;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    getEncoded(): number[];
                    verify(arg0: _javatypes.java.security.PublicKey): void;
                    verify(arg0: _javatypes.java.security.PublicKey, arg1: string): void;
                    verify(arg0: _javatypes.java.security.PublicKey, arg1: _javatypes.java.security.Provider): void;
                    toString(): string;
                    getPublicKey(): _javatypes.java.security.PublicKey;
                    
                }
                namespace Certificate {
                    interface static {
                        
                        
                        
                    }
                }
                interface CertPath extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                    
                    getType(): string;
                    getEncodings(): _javatypes.java.util.Iterator<string>;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    getEncoded(): number[];
                    getEncoded(arg0: string): number[];
                    getCertificates(): _javatypes.java.util.List<any>;
                    
                }
                namespace CertPath {
                    interface static {
                        
                        
                        
                    }
                }
            }
        }
    
        namespace time {
        
            interface Duration extends _javatypes.java.lang.Object, _javatypes.java.time.temporal.TemporalAmount, _javatypes.java.lang.Comparable<_javatypes.java.time.Duration>, _javatypes.java.io.Serializable {
                
                get(arg0: _javatypes.java.time.temporal.TemporalUnit): number;
                getUnits(): _javatypes.java.util.List<_javatypes.java.time.temporal.TemporalUnit>;
                isZero(): boolean;
                isNegative(): boolean;
                getSeconds(): number;
                getNano(): number;
                withSeconds(arg0: number): _javatypes.java.time.Duration;
                withNanos(arg0: number): _javatypes.java.time.Duration;
                plus(arg0: _javatypes.java.time.Duration): _javatypes.java.time.Duration;
                plus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.Duration;
                plusDays(arg0: number): _javatypes.java.time.Duration;
                plusHours(arg0: number): _javatypes.java.time.Duration;
                plusMinutes(arg0: number): _javatypes.java.time.Duration;
                plusSeconds(arg0: number): _javatypes.java.time.Duration;
                plusMillis(arg0: number): _javatypes.java.time.Duration;
                plusNanos(arg0: number): _javatypes.java.time.Duration;
                minus(arg0: _javatypes.java.time.Duration): _javatypes.java.time.Duration;
                minus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.Duration;
                minusDays(arg0: number): _javatypes.java.time.Duration;
                minusHours(arg0: number): _javatypes.java.time.Duration;
                minusMinutes(arg0: number): _javatypes.java.time.Duration;
                minusSeconds(arg0: number): _javatypes.java.time.Duration;
                minusMillis(arg0: number): _javatypes.java.time.Duration;
                minusNanos(arg0: number): _javatypes.java.time.Duration;
                multipliedBy(arg0: number): _javatypes.java.time.Duration;
                dividedBy(arg0: number): _javatypes.java.time.Duration;
                dividedBy(arg0: _javatypes.java.time.Duration): number;
                negated(): _javatypes.java.time.Duration;
                abs(): _javatypes.java.time.Duration;
                addTo(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                subtractFrom(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                toDays(): number;
                toHours(): number;
                toMinutes(): number;
                toSeconds(): number;
                toMillis(): number;
                toNanos(): number;
                toDaysPart(): number;
                toHoursPart(): number;
                toMinutesPart(): number;
                toSecondsPart(): number;
                toMillisPart(): number;
                toNanosPart(): number;
                truncatedTo(arg0: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.Duration;
                compareTo(arg0: _javatypes.java.time.Duration): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace Duration {
                interface static {
                    
                    readonly ZERO: _javatypes.java.time.Duration;
                    
                    ofDays(arg0: number): _javatypes.java.time.Duration;
                    ofHours(arg0: number): _javatypes.java.time.Duration;
                    ofMinutes(arg0: number): _javatypes.java.time.Duration;
                    ofSeconds(arg0: number): _javatypes.java.time.Duration;
                    ofSeconds(arg0: number, arg1: number): _javatypes.java.time.Duration;
                    ofMillis(arg0: number): _javatypes.java.time.Duration;
                    ofNanos(arg0: number): _javatypes.java.time.Duration;
                    of(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.Duration;
                    from(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.Duration;
                    parse(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.time.Duration;
                    between(arg0: _javatypes.java.time.temporal.Temporal, arg1: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.Duration;
                    
                }
            }
            interface Instant extends _javatypes.java.lang.Object, _javatypes.java.time.temporal.Temporal, _javatypes.java.time.temporal.TemporalAdjuster, _javatypes.java.lang.Comparable<_javatypes.java.time.Instant>, _javatypes.java.io.Serializable {
                
                isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                isSupported(arg0: _javatypes.java.time.temporal.TemporalUnit): boolean;
                range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getEpochSecond(): number;
                getNano(): number;
                with(arg0: _javatypes.java.time.temporal.TemporalAdjuster): _javatypes.java.time.Instant;
                with(arg0: _javatypes.java.time.temporal.TemporalField, arg1: number): _javatypes.java.time.Instant;
                truncatedTo(arg0: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.Instant;
                plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.Instant;
                plus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.Instant;
                plusSeconds(arg0: number): _javatypes.java.time.Instant;
                plusMillis(arg0: number): _javatypes.java.time.Instant;
                plusNanos(arg0: number): _javatypes.java.time.Instant;
                minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.Instant;
                minus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.Instant;
                minusSeconds(arg0: number): _javatypes.java.time.Instant;
                minusMillis(arg0: number): _javatypes.java.time.Instant;
                minusNanos(arg0: number): _javatypes.java.time.Instant;
                query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                until(arg0: _javatypes.java.time.temporal.Temporal, arg1: _javatypes.java.time.temporal.TemporalUnit): number;
                atOffset(arg0: _javatypes.java.time.ZoneOffset): _javatypes.java.time.OffsetDateTime;
                atZone(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                toEpochMilli(): number;
                compareTo(arg0: _javatypes.java.time.Instant): number;
                isAfter(arg0: _javatypes.java.time.Instant): boolean;
                isBefore(arg0: _javatypes.java.time.Instant): boolean;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace Instant {
                interface static {
                    
                    readonly EPOCH: _javatypes.java.time.Instant;
                    readonly MIN: _javatypes.java.time.Instant;
                    readonly MAX: _javatypes.java.time.Instant;
                    
                    now(): _javatypes.java.time.Instant;
                    now(arg0: _javatypes.java.time.Clock): _javatypes.java.time.Instant;
                    ofEpochSecond(arg0: number): _javatypes.java.time.Instant;
                    ofEpochSecond(arg0: number, arg1: number): _javatypes.java.time.Instant;
                    ofEpochMilli(arg0: number): _javatypes.java.time.Instant;
                    from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.Instant;
                    parse(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.time.Instant;
                    
                }
            }
            interface ZoneId extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                
                getId(): string;
                getDisplayName(arg0: _javatypes.java.time.format.TextStyle, arg1: _javatypes.java.util.Locale): string;
                getRules(): _javatypes.java.time.zone.ZoneRules;
                normalized(): _javatypes.java.time.ZoneId;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace ZoneId {
                interface static {
                    
                    readonly SHORT_IDS: _javatypes.java.util.Map<string, string>;
                    
                    systemDefault(): _javatypes.java.time.ZoneId;
                    getAvailableZoneIds(): _javatypes.java.util.Set<string>;
                    of(arg0: string, arg1: _javatypes.java.util.Map<string, string>): _javatypes.java.time.ZoneId;
                    of(arg0: string): _javatypes.java.time.ZoneId;
                    ofOffset(arg0: string, arg1: _javatypes.java.time.ZoneOffset): _javatypes.java.time.ZoneId;
                    from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.ZoneId;
                    
                }
            }
            interface ZoneOffset extends _javatypes.java.time.ZoneId, _javatypes.java.time.temporal.TemporalAccessor, _javatypes.java.time.temporal.TemporalAdjuster, _javatypes.java.lang.Comparable<_javatypes.java.time.ZoneOffset>, _javatypes.java.io.Serializable {
                
                getTotalSeconds(): number;
                getId(): string;
                getRules(): _javatypes.java.time.zone.ZoneRules;
                isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                compareTo(arg0: _javatypes.java.time.ZoneOffset): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace ZoneOffset {
                interface static {
                    
                    readonly UTC: _javatypes.java.time.ZoneOffset;
                    readonly MIN: _javatypes.java.time.ZoneOffset;
                    readonly MAX: _javatypes.java.time.ZoneOffset;
                    
                    of(arg0: string): _javatypes.java.time.ZoneOffset;
                    ofHours(arg0: number): _javatypes.java.time.ZoneOffset;
                    ofHoursMinutes(arg0: number, arg1: number): _javatypes.java.time.ZoneOffset;
                    ofHoursMinutesSeconds(arg0: number, arg1: number, arg2: number): _javatypes.java.time.ZoneOffset;
                    from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.ZoneOffset;
                    ofTotalSeconds(arg0: number): _javatypes.java.time.ZoneOffset;
                    
                }
            }
            interface ZonedDateTime extends _javatypes.java.lang.Object, _javatypes.java.time.temporal.Temporal, _javatypes.java.time.chrono.ChronoZonedDateTime<_javatypes.java.time.LocalDate>, _javatypes.java.io.Serializable {
                
                isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                isSupported(arg0: _javatypes.java.time.temporal.TemporalUnit): boolean;
                range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getOffset(): _javatypes.java.time.ZoneOffset;
                withEarlierOffsetAtOverlap(): _javatypes.java.time.ZonedDateTime;
                withLaterOffsetAtOverlap(): _javatypes.java.time.ZonedDateTime;
                getZone(): _javatypes.java.time.ZoneId;
                withZoneSameLocal(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                withZoneSameInstant(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                withFixedOffsetZone(): _javatypes.java.time.ZonedDateTime;
                toLocalDateTime(): _javatypes.java.time.LocalDateTime;
                toLocalDate(): _javatypes.java.time.LocalDate;
                getYear(): number;
                getMonthValue(): number;
                getMonth(): _javatypes.java.time.Month;
                getDayOfMonth(): number;
                getDayOfYear(): number;
                getDayOfWeek(): _javatypes.java.time.DayOfWeek;
                toLocalTime(): _javatypes.java.time.LocalTime;
                getHour(): number;
                getMinute(): number;
                getSecond(): number;
                getNano(): number;
                with(arg0: _javatypes.java.time.temporal.TemporalAdjuster): _javatypes.java.time.ZonedDateTime;
                with(arg0: _javatypes.java.time.temporal.TemporalField, arg1: number): _javatypes.java.time.ZonedDateTime;
                withYear(arg0: number): _javatypes.java.time.ZonedDateTime;
                withMonth(arg0: number): _javatypes.java.time.ZonedDateTime;
                withDayOfMonth(arg0: number): _javatypes.java.time.ZonedDateTime;
                withDayOfYear(arg0: number): _javatypes.java.time.ZonedDateTime;
                withHour(arg0: number): _javatypes.java.time.ZonedDateTime;
                withMinute(arg0: number): _javatypes.java.time.ZonedDateTime;
                withSecond(arg0: number): _javatypes.java.time.ZonedDateTime;
                withNano(arg0: number): _javatypes.java.time.ZonedDateTime;
                truncatedTo(arg0: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.ZonedDateTime;
                plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.ZonedDateTime;
                plus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.ZonedDateTime;
                plusYears(arg0: number): _javatypes.java.time.ZonedDateTime;
                plusMonths(arg0: number): _javatypes.java.time.ZonedDateTime;
                plusWeeks(arg0: number): _javatypes.java.time.ZonedDateTime;
                plusDays(arg0: number): _javatypes.java.time.ZonedDateTime;
                plusHours(arg0: number): _javatypes.java.time.ZonedDateTime;
                plusMinutes(arg0: number): _javatypes.java.time.ZonedDateTime;
                plusSeconds(arg0: number): _javatypes.java.time.ZonedDateTime;
                plusNanos(arg0: number): _javatypes.java.time.ZonedDateTime;
                minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.ZonedDateTime;
                minus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.ZonedDateTime;
                minusYears(arg0: number): _javatypes.java.time.ZonedDateTime;
                minusMonths(arg0: number): _javatypes.java.time.ZonedDateTime;
                minusWeeks(arg0: number): _javatypes.java.time.ZonedDateTime;
                minusDays(arg0: number): _javatypes.java.time.ZonedDateTime;
                minusHours(arg0: number): _javatypes.java.time.ZonedDateTime;
                minusMinutes(arg0: number): _javatypes.java.time.ZonedDateTime;
                minusSeconds(arg0: number): _javatypes.java.time.ZonedDateTime;
                minusNanos(arg0: number): _javatypes.java.time.ZonedDateTime;
                query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                until(arg0: _javatypes.java.time.temporal.Temporal, arg1: _javatypes.java.time.temporal.TemporalUnit): number;
                format(arg0: _javatypes.java.time.format.DateTimeFormatter): string;
                toOffsetDateTime(): _javatypes.java.time.OffsetDateTime;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace ZonedDateTime {
                interface static {
                    
                    
                    now(): _javatypes.java.time.ZonedDateTime;
                    now(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                    now(arg0: _javatypes.java.time.Clock): _javatypes.java.time.ZonedDateTime;
                    of(arg0: _javatypes.java.time.LocalDate, arg1: _javatypes.java.time.LocalTime, arg2: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                    of(arg0: _javatypes.java.time.LocalDateTime, arg1: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                    of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                    ofLocal(arg0: _javatypes.java.time.LocalDateTime, arg1: _javatypes.java.time.ZoneId, arg2: _javatypes.java.time.ZoneOffset): _javatypes.java.time.ZonedDateTime;
                    ofInstant(arg0: _javatypes.java.time.Instant, arg1: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                    ofInstant(arg0: _javatypes.java.time.LocalDateTime, arg1: _javatypes.java.time.ZoneOffset, arg2: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                    ofStrict(arg0: _javatypes.java.time.LocalDateTime, arg1: _javatypes.java.time.ZoneOffset, arg2: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                    from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.ZonedDateTime;
                    parse(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.time.ZonedDateTime;
                    parse(arg0: _javatypes.java.lang.CharSequence, arg1: _javatypes.java.time.format.DateTimeFormatter): _javatypes.java.time.ZonedDateTime;
                    
                }
            }
            interface OffsetDateTime extends _javatypes.java.lang.Object, _javatypes.java.time.temporal.Temporal, _javatypes.java.time.temporal.TemporalAdjuster, _javatypes.java.lang.Comparable<_javatypes.java.time.OffsetDateTime>, _javatypes.java.io.Serializable {
                
                isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                isSupported(arg0: _javatypes.java.time.temporal.TemporalUnit): boolean;
                range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getOffset(): _javatypes.java.time.ZoneOffset;
                withOffsetSameLocal(arg0: _javatypes.java.time.ZoneOffset): _javatypes.java.time.OffsetDateTime;
                withOffsetSameInstant(arg0: _javatypes.java.time.ZoneOffset): _javatypes.java.time.OffsetDateTime;
                toLocalDateTime(): _javatypes.java.time.LocalDateTime;
                toLocalDate(): _javatypes.java.time.LocalDate;
                getYear(): number;
                getMonthValue(): number;
                getMonth(): _javatypes.java.time.Month;
                getDayOfMonth(): number;
                getDayOfYear(): number;
                getDayOfWeek(): _javatypes.java.time.DayOfWeek;
                toLocalTime(): _javatypes.java.time.LocalTime;
                getHour(): number;
                getMinute(): number;
                getSecond(): number;
                getNano(): number;
                with(arg0: _javatypes.java.time.temporal.TemporalAdjuster): _javatypes.java.time.OffsetDateTime;
                with(arg0: _javatypes.java.time.temporal.TemporalField, arg1: number): _javatypes.java.time.OffsetDateTime;
                withYear(arg0: number): _javatypes.java.time.OffsetDateTime;
                withMonth(arg0: number): _javatypes.java.time.OffsetDateTime;
                withDayOfMonth(arg0: number): _javatypes.java.time.OffsetDateTime;
                withDayOfYear(arg0: number): _javatypes.java.time.OffsetDateTime;
                withHour(arg0: number): _javatypes.java.time.OffsetDateTime;
                withMinute(arg0: number): _javatypes.java.time.OffsetDateTime;
                withSecond(arg0: number): _javatypes.java.time.OffsetDateTime;
                withNano(arg0: number): _javatypes.java.time.OffsetDateTime;
                truncatedTo(arg0: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.OffsetDateTime;
                plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.OffsetDateTime;
                plus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.OffsetDateTime;
                plusYears(arg0: number): _javatypes.java.time.OffsetDateTime;
                plusMonths(arg0: number): _javatypes.java.time.OffsetDateTime;
                plusWeeks(arg0: number): _javatypes.java.time.OffsetDateTime;
                plusDays(arg0: number): _javatypes.java.time.OffsetDateTime;
                plusHours(arg0: number): _javatypes.java.time.OffsetDateTime;
                plusMinutes(arg0: number): _javatypes.java.time.OffsetDateTime;
                plusSeconds(arg0: number): _javatypes.java.time.OffsetDateTime;
                plusNanos(arg0: number): _javatypes.java.time.OffsetDateTime;
                minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.OffsetDateTime;
                minus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.OffsetDateTime;
                minusYears(arg0: number): _javatypes.java.time.OffsetDateTime;
                minusMonths(arg0: number): _javatypes.java.time.OffsetDateTime;
                minusWeeks(arg0: number): _javatypes.java.time.OffsetDateTime;
                minusDays(arg0: number): _javatypes.java.time.OffsetDateTime;
                minusHours(arg0: number): _javatypes.java.time.OffsetDateTime;
                minusMinutes(arg0: number): _javatypes.java.time.OffsetDateTime;
                minusSeconds(arg0: number): _javatypes.java.time.OffsetDateTime;
                minusNanos(arg0: number): _javatypes.java.time.OffsetDateTime;
                query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                until(arg0: _javatypes.java.time.temporal.Temporal, arg1: _javatypes.java.time.temporal.TemporalUnit): number;
                format(arg0: _javatypes.java.time.format.DateTimeFormatter): string;
                atZoneSameInstant(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                atZoneSimilarLocal(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                toOffsetTime(): _javatypes.java.time.OffsetTime;
                toZonedDateTime(): _javatypes.java.time.ZonedDateTime;
                toInstant(): _javatypes.java.time.Instant;
                toEpochSecond(): number;
                compareTo(arg0: _javatypes.java.time.OffsetDateTime): number;
                isAfter(arg0: _javatypes.java.time.OffsetDateTime): boolean;
                isBefore(arg0: _javatypes.java.time.OffsetDateTime): boolean;
                isEqual(arg0: _javatypes.java.time.OffsetDateTime): boolean;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace OffsetDateTime {
                interface static {
                    
                    readonly MIN: _javatypes.java.time.OffsetDateTime;
                    readonly MAX: _javatypes.java.time.OffsetDateTime;
                    
                    timeLineOrder(): _javatypes.java.util.Comparator<_javatypes.java.time.OffsetDateTime>;
                    now(): _javatypes.java.time.OffsetDateTime;
                    now(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.OffsetDateTime;
                    now(arg0: _javatypes.java.time.Clock): _javatypes.java.time.OffsetDateTime;
                    of(arg0: _javatypes.java.time.LocalDate, arg1: _javatypes.java.time.LocalTime, arg2: _javatypes.java.time.ZoneOffset): _javatypes.java.time.OffsetDateTime;
                    of(arg0: _javatypes.java.time.LocalDateTime, arg1: _javatypes.java.time.ZoneOffset): _javatypes.java.time.OffsetDateTime;
                    of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: _javatypes.java.time.ZoneOffset): _javatypes.java.time.OffsetDateTime;
                    ofInstant(arg0: _javatypes.java.time.Instant, arg1: _javatypes.java.time.ZoneId): _javatypes.java.time.OffsetDateTime;
                    from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.OffsetDateTime;
                    parse(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.time.OffsetDateTime;
                    parse(arg0: _javatypes.java.lang.CharSequence, arg1: _javatypes.java.time.format.DateTimeFormatter): _javatypes.java.time.OffsetDateTime;
                    
                }
            }
            interface Clock extends _javatypes.java.lang.Object, _javatypes.java.time.InstantSource {
                
                getZone(): _javatypes.java.time.ZoneId;
                withZone(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.Clock;
                millis(): number;
                instant(): _javatypes.java.time.Instant;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                
            }
            namespace Clock {
                interface static {
                    
                    
                    systemUTC(): _javatypes.java.time.Clock;
                    systemDefaultZone(): _javatypes.java.time.Clock;
                    system(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.Clock;
                    tickMillis(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.Clock;
                    tickSeconds(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.Clock;
                    tickMinutes(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.Clock;
                    tick(arg0: _javatypes.java.time.Clock, arg1: _javatypes.java.time.Duration): _javatypes.java.time.Clock;
                    fixed(arg0: _javatypes.java.time.Instant, arg1: _javatypes.java.time.ZoneId): _javatypes.java.time.Clock;
                    offset(arg0: _javatypes.java.time.Clock, arg1: _javatypes.java.time.Duration): _javatypes.java.time.Clock;
                    
                }
            }
            interface Month extends _javatypes.java.lang.Enum<_javatypes.java.time.Month>, _javatypes.java.time.temporal.TemporalAccessor, _javatypes.java.time.temporal.TemporalAdjuster {
                
                getValue(): number;
                getDisplayName(arg0: _javatypes.java.time.format.TextStyle, arg1: _javatypes.java.util.Locale): string;
                isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                plus(arg0: number): _javatypes.java.time.Month;
                minus(arg0: number): _javatypes.java.time.Month;
                length(arg0: boolean): number;
                minLength(): number;
                maxLength(): number;
                firstDayOfYear(arg0: boolean): number;
                firstMonthOfQuarter(): _javatypes.java.time.Month;
                query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                
            }
            namespace Month {
                interface static {
                    
                    readonly JANUARY: _javatypes.java.time.Month;
                    readonly FEBRUARY: _javatypes.java.time.Month;
                    readonly MARCH: _javatypes.java.time.Month;
                    readonly APRIL: _javatypes.java.time.Month;
                    readonly MAY: _javatypes.java.time.Month;
                    readonly JUNE: _javatypes.java.time.Month;
                    readonly JULY: _javatypes.java.time.Month;
                    readonly AUGUST: _javatypes.java.time.Month;
                    readonly SEPTEMBER: _javatypes.java.time.Month;
                    readonly OCTOBER: _javatypes.java.time.Month;
                    readonly NOVEMBER: _javatypes.java.time.Month;
                    readonly DECEMBER: _javatypes.java.time.Month;
                    
                    values(): _javatypes.java.time.Month[];
                    valueOf(arg0: string): _javatypes.java.time.Month;
                    of(arg0: number): _javatypes.java.time.Month;
                    from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.Month;
                    
                }
            }
            interface InstantSource extends _javatypes.java.lang.Interface {
                
                instant(): _javatypes.java.time.Instant;
                millis(): number;
                withZone(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.Clock;
                
            }
            namespace InstantSource {
                interface static {
                    
                    
                    system(): _javatypes.java.time.InstantSource;
                    tick(arg0: _javatypes.java.time.InstantSource, arg1: _javatypes.java.time.Duration): _javatypes.java.time.InstantSource;
                    fixed(arg0: _javatypes.java.time.Instant): _javatypes.java.time.InstantSource;
                    offset(arg0: _javatypes.java.time.InstantSource, arg1: _javatypes.java.time.Duration): _javatypes.java.time.InstantSource;
                    
                }
            }
            interface OffsetTime extends _javatypes.java.lang.Object, _javatypes.java.time.temporal.Temporal, _javatypes.java.time.temporal.TemporalAdjuster, _javatypes.java.lang.Comparable<_javatypes.java.time.OffsetTime>, _javatypes.java.io.Serializable {
                
                isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                isSupported(arg0: _javatypes.java.time.temporal.TemporalUnit): boolean;
                range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getOffset(): _javatypes.java.time.ZoneOffset;
                withOffsetSameLocal(arg0: _javatypes.java.time.ZoneOffset): _javatypes.java.time.OffsetTime;
                withOffsetSameInstant(arg0: _javatypes.java.time.ZoneOffset): _javatypes.java.time.OffsetTime;
                toLocalTime(): _javatypes.java.time.LocalTime;
                getHour(): number;
                getMinute(): number;
                getSecond(): number;
                getNano(): number;
                with(arg0: _javatypes.java.time.temporal.TemporalAdjuster): _javatypes.java.time.OffsetTime;
                with(arg0: _javatypes.java.time.temporal.TemporalField, arg1: number): _javatypes.java.time.OffsetTime;
                withHour(arg0: number): _javatypes.java.time.OffsetTime;
                withMinute(arg0: number): _javatypes.java.time.OffsetTime;
                withSecond(arg0: number): _javatypes.java.time.OffsetTime;
                withNano(arg0: number): _javatypes.java.time.OffsetTime;
                truncatedTo(arg0: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.OffsetTime;
                plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.OffsetTime;
                plus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.OffsetTime;
                plusHours(arg0: number): _javatypes.java.time.OffsetTime;
                plusMinutes(arg0: number): _javatypes.java.time.OffsetTime;
                plusSeconds(arg0: number): _javatypes.java.time.OffsetTime;
                plusNanos(arg0: number): _javatypes.java.time.OffsetTime;
                minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.OffsetTime;
                minus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.OffsetTime;
                minusHours(arg0: number): _javatypes.java.time.OffsetTime;
                minusMinutes(arg0: number): _javatypes.java.time.OffsetTime;
                minusSeconds(arg0: number): _javatypes.java.time.OffsetTime;
                minusNanos(arg0: number): _javatypes.java.time.OffsetTime;
                query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                until(arg0: _javatypes.java.time.temporal.Temporal, arg1: _javatypes.java.time.temporal.TemporalUnit): number;
                format(arg0: _javatypes.java.time.format.DateTimeFormatter): string;
                atDate(arg0: _javatypes.java.time.LocalDate): _javatypes.java.time.OffsetDateTime;
                toEpochSecond(arg0: _javatypes.java.time.LocalDate): number;
                compareTo(arg0: _javatypes.java.time.OffsetTime): number;
                isAfter(arg0: _javatypes.java.time.OffsetTime): boolean;
                isBefore(arg0: _javatypes.java.time.OffsetTime): boolean;
                isEqual(arg0: _javatypes.java.time.OffsetTime): boolean;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace OffsetTime {
                interface static {
                    
                    readonly MIN: _javatypes.java.time.OffsetTime;
                    readonly MAX: _javatypes.java.time.OffsetTime;
                    
                    now(): _javatypes.java.time.OffsetTime;
                    now(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.OffsetTime;
                    now(arg0: _javatypes.java.time.Clock): _javatypes.java.time.OffsetTime;
                    of(arg0: _javatypes.java.time.LocalTime, arg1: _javatypes.java.time.ZoneOffset): _javatypes.java.time.OffsetTime;
                    of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: _javatypes.java.time.ZoneOffset): _javatypes.java.time.OffsetTime;
                    ofInstant(arg0: _javatypes.java.time.Instant, arg1: _javatypes.java.time.ZoneId): _javatypes.java.time.OffsetTime;
                    from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.OffsetTime;
                    parse(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.time.OffsetTime;
                    parse(arg0: _javatypes.java.lang.CharSequence, arg1: _javatypes.java.time.format.DateTimeFormatter): _javatypes.java.time.OffsetTime;
                    
                }
            }
            interface Period extends _javatypes.java.lang.Object, _javatypes.java.time.chrono.ChronoPeriod, _javatypes.java.io.Serializable {
                
                get(arg0: _javatypes.java.time.temporal.TemporalUnit): number;
                getUnits(): _javatypes.java.util.List<_javatypes.java.time.temporal.TemporalUnit>;
                getChronology(): _javatypes.java.time.chrono.IsoChronology;
                isZero(): boolean;
                isNegative(): boolean;
                getYears(): number;
                getMonths(): number;
                getDays(): number;
                withYears(arg0: number): _javatypes.java.time.Period;
                withMonths(arg0: number): _javatypes.java.time.Period;
                withDays(arg0: number): _javatypes.java.time.Period;
                plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.Period;
                plusYears(arg0: number): _javatypes.java.time.Period;
                plusMonths(arg0: number): _javatypes.java.time.Period;
                plusDays(arg0: number): _javatypes.java.time.Period;
                minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.Period;
                minusYears(arg0: number): _javatypes.java.time.Period;
                minusMonths(arg0: number): _javatypes.java.time.Period;
                minusDays(arg0: number): _javatypes.java.time.Period;
                multipliedBy(arg0: number): _javatypes.java.time.Period;
                negated(): _javatypes.java.time.Period;
                normalized(): _javatypes.java.time.Period;
                toTotalMonths(): number;
                addTo(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                subtractFrom(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace Period {
                interface static {
                    
                    readonly ZERO: _javatypes.java.time.Period;
                    
                    ofYears(arg0: number): _javatypes.java.time.Period;
                    ofMonths(arg0: number): _javatypes.java.time.Period;
                    ofWeeks(arg0: number): _javatypes.java.time.Period;
                    ofDays(arg0: number): _javatypes.java.time.Period;
                    of(arg0: number, arg1: number, arg2: number): _javatypes.java.time.Period;
                    from(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.Period;
                    parse(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.time.Period;
                    between(arg0: _javatypes.java.time.LocalDate, arg1: _javatypes.java.time.LocalDate): _javatypes.java.time.Period;
                    
                }
            }
            interface LocalDate extends _javatypes.java.lang.Object, _javatypes.java.time.temporal.Temporal, _javatypes.java.time.temporal.TemporalAdjuster, _javatypes.java.time.chrono.ChronoLocalDate, _javatypes.java.io.Serializable {
                
                isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                isSupported(arg0: _javatypes.java.time.temporal.TemporalUnit): boolean;
                range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getChronology(): _javatypes.java.time.chrono.IsoChronology;
                getEra(): _javatypes.java.time.chrono.IsoEra;
                getYear(): number;
                getMonthValue(): number;
                getMonth(): _javatypes.java.time.Month;
                getDayOfMonth(): number;
                getDayOfYear(): number;
                getDayOfWeek(): _javatypes.java.time.DayOfWeek;
                isLeapYear(): boolean;
                lengthOfMonth(): number;
                lengthOfYear(): number;
                with(arg0: _javatypes.java.time.temporal.TemporalAdjuster): _javatypes.java.time.LocalDate;
                with(arg0: _javatypes.java.time.temporal.TemporalField, arg1: number): _javatypes.java.time.LocalDate;
                withYear(arg0: number): _javatypes.java.time.LocalDate;
                withMonth(arg0: number): _javatypes.java.time.LocalDate;
                withDayOfMonth(arg0: number): _javatypes.java.time.LocalDate;
                withDayOfYear(arg0: number): _javatypes.java.time.LocalDate;
                plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.LocalDate;
                plus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.LocalDate;
                plusYears(arg0: number): _javatypes.java.time.LocalDate;
                plusMonths(arg0: number): _javatypes.java.time.LocalDate;
                plusWeeks(arg0: number): _javatypes.java.time.LocalDate;
                plusDays(arg0: number): _javatypes.java.time.LocalDate;
                minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.LocalDate;
                minus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.LocalDate;
                minusYears(arg0: number): _javatypes.java.time.LocalDate;
                minusMonths(arg0: number): _javatypes.java.time.LocalDate;
                minusWeeks(arg0: number): _javatypes.java.time.LocalDate;
                minusDays(arg0: number): _javatypes.java.time.LocalDate;
                query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                until(arg0: _javatypes.java.time.temporal.Temporal, arg1: _javatypes.java.time.temporal.TemporalUnit): number;
                until(arg0: _javatypes.java.time.chrono.ChronoLocalDate): _javatypes.java.time.Period;
                datesUntil(arg0: _javatypes.java.time.LocalDate): _javatypes.java.util.stream.Stream<_javatypes.java.time.LocalDate>;
                datesUntil(arg0: _javatypes.java.time.LocalDate, arg1: _javatypes.java.time.Period): _javatypes.java.util.stream.Stream<_javatypes.java.time.LocalDate>;
                format(arg0: _javatypes.java.time.format.DateTimeFormatter): string;
                atTime(arg0: _javatypes.java.time.LocalTime): _javatypes.java.time.LocalDateTime;
                atTime(arg0: number, arg1: number): _javatypes.java.time.LocalDateTime;
                atTime(arg0: number, arg1: number, arg2: number): _javatypes.java.time.LocalDateTime;
                atTime(arg0: number, arg1: number, arg2: number, arg3: number): _javatypes.java.time.LocalDateTime;
                atTime(arg0: _javatypes.java.time.OffsetTime): _javatypes.java.time.OffsetDateTime;
                atStartOfDay(): _javatypes.java.time.LocalDateTime;
                atStartOfDay(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                toEpochDay(): number;
                toEpochSecond(arg0: _javatypes.java.time.LocalTime, arg1: _javatypes.java.time.ZoneOffset): number;
                compareTo(arg0: _javatypes.java.time.chrono.ChronoLocalDate): number;
                isAfter(arg0: _javatypes.java.time.chrono.ChronoLocalDate): boolean;
                isBefore(arg0: _javatypes.java.time.chrono.ChronoLocalDate): boolean;
                isEqual(arg0: _javatypes.java.time.chrono.ChronoLocalDate): boolean;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace LocalDate {
                interface static {
                    
                    readonly MIN: _javatypes.java.time.LocalDate;
                    readonly MAX: _javatypes.java.time.LocalDate;
                    readonly EPOCH: _javatypes.java.time.LocalDate;
                    
                    now(): _javatypes.java.time.LocalDate;
                    now(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.LocalDate;
                    now(arg0: _javatypes.java.time.Clock): _javatypes.java.time.LocalDate;
                    of(arg0: number, arg1: _javatypes.java.time.Month, arg2: number): _javatypes.java.time.LocalDate;
                    of(arg0: number, arg1: number, arg2: number): _javatypes.java.time.LocalDate;
                    ofYearDay(arg0: number, arg1: number): _javatypes.java.time.LocalDate;
                    ofInstant(arg0: _javatypes.java.time.Instant, arg1: _javatypes.java.time.ZoneId): _javatypes.java.time.LocalDate;
                    ofEpochDay(arg0: number): _javatypes.java.time.LocalDate;
                    from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.LocalDate;
                    parse(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.time.LocalDate;
                    parse(arg0: _javatypes.java.lang.CharSequence, arg1: _javatypes.java.time.format.DateTimeFormatter): _javatypes.java.time.LocalDate;
                    
                }
            }
            interface LocalDateTime extends _javatypes.java.lang.Object, _javatypes.java.time.temporal.Temporal, _javatypes.java.time.temporal.TemporalAdjuster, _javatypes.java.time.chrono.ChronoLocalDateTime<_javatypes.java.time.LocalDate>, _javatypes.java.io.Serializable {
                
                isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                isSupported(arg0: _javatypes.java.time.temporal.TemporalUnit): boolean;
                range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                toLocalDate(): _javatypes.java.time.LocalDate;
                getYear(): number;
                getMonthValue(): number;
                getMonth(): _javatypes.java.time.Month;
                getDayOfMonth(): number;
                getDayOfYear(): number;
                getDayOfWeek(): _javatypes.java.time.DayOfWeek;
                toLocalTime(): _javatypes.java.time.LocalTime;
                getHour(): number;
                getMinute(): number;
                getSecond(): number;
                getNano(): number;
                with(arg0: _javatypes.java.time.temporal.TemporalAdjuster): _javatypes.java.time.LocalDateTime;
                with(arg0: _javatypes.java.time.temporal.TemporalField, arg1: number): _javatypes.java.time.LocalDateTime;
                withYear(arg0: number): _javatypes.java.time.LocalDateTime;
                withMonth(arg0: number): _javatypes.java.time.LocalDateTime;
                withDayOfMonth(arg0: number): _javatypes.java.time.LocalDateTime;
                withDayOfYear(arg0: number): _javatypes.java.time.LocalDateTime;
                withHour(arg0: number): _javatypes.java.time.LocalDateTime;
                withMinute(arg0: number): _javatypes.java.time.LocalDateTime;
                withSecond(arg0: number): _javatypes.java.time.LocalDateTime;
                withNano(arg0: number): _javatypes.java.time.LocalDateTime;
                truncatedTo(arg0: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.LocalDateTime;
                plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.LocalDateTime;
                plus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.LocalDateTime;
                plusYears(arg0: number): _javatypes.java.time.LocalDateTime;
                plusMonths(arg0: number): _javatypes.java.time.LocalDateTime;
                plusWeeks(arg0: number): _javatypes.java.time.LocalDateTime;
                plusDays(arg0: number): _javatypes.java.time.LocalDateTime;
                plusHours(arg0: number): _javatypes.java.time.LocalDateTime;
                plusMinutes(arg0: number): _javatypes.java.time.LocalDateTime;
                plusSeconds(arg0: number): _javatypes.java.time.LocalDateTime;
                plusNanos(arg0: number): _javatypes.java.time.LocalDateTime;
                minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.LocalDateTime;
                minus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.LocalDateTime;
                minusYears(arg0: number): _javatypes.java.time.LocalDateTime;
                minusMonths(arg0: number): _javatypes.java.time.LocalDateTime;
                minusWeeks(arg0: number): _javatypes.java.time.LocalDateTime;
                minusDays(arg0: number): _javatypes.java.time.LocalDateTime;
                minusHours(arg0: number): _javatypes.java.time.LocalDateTime;
                minusMinutes(arg0: number): _javatypes.java.time.LocalDateTime;
                minusSeconds(arg0: number): _javatypes.java.time.LocalDateTime;
                minusNanos(arg0: number): _javatypes.java.time.LocalDateTime;
                query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                until(arg0: _javatypes.java.time.temporal.Temporal, arg1: _javatypes.java.time.temporal.TemporalUnit): number;
                format(arg0: _javatypes.java.time.format.DateTimeFormatter): string;
                atOffset(arg0: _javatypes.java.time.ZoneOffset): _javatypes.java.time.OffsetDateTime;
                atZone(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                compareTo(arg0: _javatypes.java.time.chrono.ChronoLocalDateTime<any>): number;
                isAfter(arg0: _javatypes.java.time.chrono.ChronoLocalDateTime<any>): boolean;
                isBefore(arg0: _javatypes.java.time.chrono.ChronoLocalDateTime<any>): boolean;
                isEqual(arg0: _javatypes.java.time.chrono.ChronoLocalDateTime<any>): boolean;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace LocalDateTime {
                interface static {
                    
                    readonly MIN: _javatypes.java.time.LocalDateTime;
                    readonly MAX: _javatypes.java.time.LocalDateTime;
                    
                    now(): _javatypes.java.time.LocalDateTime;
                    now(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.LocalDateTime;
                    now(arg0: _javatypes.java.time.Clock): _javatypes.java.time.LocalDateTime;
                    of(arg0: number, arg1: _javatypes.java.time.Month, arg2: number, arg3: number, arg4: number): _javatypes.java.time.LocalDateTime;
                    of(arg0: number, arg1: _javatypes.java.time.Month, arg2: number, arg3: number, arg4: number, arg5: number): _javatypes.java.time.LocalDateTime;
                    of(arg0: number, arg1: _javatypes.java.time.Month, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): _javatypes.java.time.LocalDateTime;
                    of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): _javatypes.java.time.LocalDateTime;
                    of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): _javatypes.java.time.LocalDateTime;
                    of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): _javatypes.java.time.LocalDateTime;
                    of(arg0: _javatypes.java.time.LocalDate, arg1: _javatypes.java.time.LocalTime): _javatypes.java.time.LocalDateTime;
                    ofInstant(arg0: _javatypes.java.time.Instant, arg1: _javatypes.java.time.ZoneId): _javatypes.java.time.LocalDateTime;
                    ofEpochSecond(arg0: number, arg1: number, arg2: _javatypes.java.time.ZoneOffset): _javatypes.java.time.LocalDateTime;
                    from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.LocalDateTime;
                    parse(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.time.LocalDateTime;
                    parse(arg0: _javatypes.java.lang.CharSequence, arg1: _javatypes.java.time.format.DateTimeFormatter): _javatypes.java.time.LocalDateTime;
                    
                }
            }
            interface DayOfWeek extends _javatypes.java.lang.Enum<_javatypes.java.time.DayOfWeek>, _javatypes.java.time.temporal.TemporalAccessor, _javatypes.java.time.temporal.TemporalAdjuster {
                
                getValue(): number;
                getDisplayName(arg0: _javatypes.java.time.format.TextStyle, arg1: _javatypes.java.util.Locale): string;
                isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                plus(arg0: number): _javatypes.java.time.DayOfWeek;
                minus(arg0: number): _javatypes.java.time.DayOfWeek;
                query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                
            }
            namespace DayOfWeek {
                interface static {
                    
                    readonly MONDAY: _javatypes.java.time.DayOfWeek;
                    readonly TUESDAY: _javatypes.java.time.DayOfWeek;
                    readonly WEDNESDAY: _javatypes.java.time.DayOfWeek;
                    readonly THURSDAY: _javatypes.java.time.DayOfWeek;
                    readonly FRIDAY: _javatypes.java.time.DayOfWeek;
                    readonly SATURDAY: _javatypes.java.time.DayOfWeek;
                    readonly SUNDAY: _javatypes.java.time.DayOfWeek;
                    
                    values(): _javatypes.java.time.DayOfWeek[];
                    valueOf(arg0: string): _javatypes.java.time.DayOfWeek;
                    of(arg0: number): _javatypes.java.time.DayOfWeek;
                    from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.DayOfWeek;
                    
                }
            }
            interface LocalTime extends _javatypes.java.lang.Object, _javatypes.java.time.temporal.Temporal, _javatypes.java.time.temporal.TemporalAdjuster, _javatypes.java.lang.Comparable<_javatypes.java.time.LocalTime>, _javatypes.java.io.Serializable {
                
                isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                isSupported(arg0: _javatypes.java.time.temporal.TemporalUnit): boolean;
                range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                getHour(): number;
                getMinute(): number;
                getSecond(): number;
                getNano(): number;
                with(arg0: _javatypes.java.time.temporal.TemporalAdjuster): _javatypes.java.time.LocalTime;
                with(arg0: _javatypes.java.time.temporal.TemporalField, arg1: number): _javatypes.java.time.LocalTime;
                withHour(arg0: number): _javatypes.java.time.LocalTime;
                withMinute(arg0: number): _javatypes.java.time.LocalTime;
                withSecond(arg0: number): _javatypes.java.time.LocalTime;
                withNano(arg0: number): _javatypes.java.time.LocalTime;
                truncatedTo(arg0: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.LocalTime;
                plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.LocalTime;
                plus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.LocalTime;
                plusHours(arg0: number): _javatypes.java.time.LocalTime;
                plusMinutes(arg0: number): _javatypes.java.time.LocalTime;
                plusSeconds(arg0: number): _javatypes.java.time.LocalTime;
                plusNanos(arg0: number): _javatypes.java.time.LocalTime;
                minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.LocalTime;
                minus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.LocalTime;
                minusHours(arg0: number): _javatypes.java.time.LocalTime;
                minusMinutes(arg0: number): _javatypes.java.time.LocalTime;
                minusSeconds(arg0: number): _javatypes.java.time.LocalTime;
                minusNanos(arg0: number): _javatypes.java.time.LocalTime;
                query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                until(arg0: _javatypes.java.time.temporal.Temporal, arg1: _javatypes.java.time.temporal.TemporalUnit): number;
                format(arg0: _javatypes.java.time.format.DateTimeFormatter): string;
                atDate(arg0: _javatypes.java.time.LocalDate): _javatypes.java.time.LocalDateTime;
                atOffset(arg0: _javatypes.java.time.ZoneOffset): _javatypes.java.time.OffsetTime;
                toSecondOfDay(): number;
                toNanoOfDay(): number;
                toEpochSecond(arg0: _javatypes.java.time.LocalDate, arg1: _javatypes.java.time.ZoneOffset): number;
                compareTo(arg0: _javatypes.java.time.LocalTime): number;
                isAfter(arg0: _javatypes.java.time.LocalTime): boolean;
                isBefore(arg0: _javatypes.java.time.LocalTime): boolean;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace LocalTime {
                interface static {
                    
                    readonly MIN: _javatypes.java.time.LocalTime;
                    readonly MAX: _javatypes.java.time.LocalTime;
                    readonly MIDNIGHT: _javatypes.java.time.LocalTime;
                    readonly NOON: _javatypes.java.time.LocalTime;
                    
                    now(): _javatypes.java.time.LocalTime;
                    now(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.LocalTime;
                    now(arg0: _javatypes.java.time.Clock): _javatypes.java.time.LocalTime;
                    of(arg0: number, arg1: number): _javatypes.java.time.LocalTime;
                    of(arg0: number, arg1: number, arg2: number): _javatypes.java.time.LocalTime;
                    of(arg0: number, arg1: number, arg2: number, arg3: number): _javatypes.java.time.LocalTime;
                    ofInstant(arg0: _javatypes.java.time.Instant, arg1: _javatypes.java.time.ZoneId): _javatypes.java.time.LocalTime;
                    ofSecondOfDay(arg0: number): _javatypes.java.time.LocalTime;
                    ofNanoOfDay(arg0: number): _javatypes.java.time.LocalTime;
                    from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.LocalTime;
                    parse(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.time.LocalTime;
                    parse(arg0: _javatypes.java.lang.CharSequence, arg1: _javatypes.java.time.format.DateTimeFormatter): _javatypes.java.time.LocalTime;
                    
                }
            }
        
            namespace temporal {
            
                interface TemporalAmount extends _javatypes.java.lang.Interface {
                    
                    get(arg0: _javatypes.java.time.temporal.TemporalUnit): number;
                    getUnits(): _javatypes.java.util.List<_javatypes.java.time.temporal.TemporalUnit>;
                    addTo(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                    subtractFrom(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                    
                }
                namespace TemporalAmount {
                    interface static {
                        
                        
                        
                    }
                }
                interface ChronoUnit extends _javatypes.java.lang.Enum<_javatypes.java.time.temporal.ChronoUnit>, _javatypes.java.time.temporal.TemporalUnit {
                    
                    getDuration(): _javatypes.java.time.Duration;
                    isDurationEstimated(): boolean;
                    isDateBased(): boolean;
                    isTimeBased(): boolean;
                    isSupportedBy(arg0: _javatypes.java.time.temporal.Temporal): boolean;
                    addTo<R>(arg0: R, arg1: number): R;
                    between(arg0: _javatypes.java.time.temporal.Temporal, arg1: _javatypes.java.time.temporal.Temporal): number;
                    toString(): string;
                    
                }
                namespace ChronoUnit {
                    interface static {
                        
                        readonly NANOS: _javatypes.java.time.temporal.ChronoUnit;
                        readonly MICROS: _javatypes.java.time.temporal.ChronoUnit;
                        readonly MILLIS: _javatypes.java.time.temporal.ChronoUnit;
                        readonly SECONDS: _javatypes.java.time.temporal.ChronoUnit;
                        readonly MINUTES: _javatypes.java.time.temporal.ChronoUnit;
                        readonly HOURS: _javatypes.java.time.temporal.ChronoUnit;
                        readonly HALF_DAYS: _javatypes.java.time.temporal.ChronoUnit;
                        readonly DAYS: _javatypes.java.time.temporal.ChronoUnit;
                        readonly WEEKS: _javatypes.java.time.temporal.ChronoUnit;
                        readonly MONTHS: _javatypes.java.time.temporal.ChronoUnit;
                        readonly YEARS: _javatypes.java.time.temporal.ChronoUnit;
                        readonly DECADES: _javatypes.java.time.temporal.ChronoUnit;
                        readonly CENTURIES: _javatypes.java.time.temporal.ChronoUnit;
                        readonly MILLENNIA: _javatypes.java.time.temporal.ChronoUnit;
                        readonly ERAS: _javatypes.java.time.temporal.ChronoUnit;
                        readonly FOREVER: _javatypes.java.time.temporal.ChronoUnit;
                        
                        values(): _javatypes.java.time.temporal.ChronoUnit[];
                        valueOf(arg0: string): _javatypes.java.time.temporal.ChronoUnit;
                        
                    }
                }
                interface Temporal extends _javatypes.java.lang.Interface, _javatypes.java.time.temporal.TemporalAccessor {
                    
                    isSupported(arg0: _javatypes.java.time.temporal.TemporalUnit): boolean;
                    with(arg0: _javatypes.java.time.temporal.TemporalAdjuster): _javatypes.java.time.temporal.Temporal;
                    with(arg0: _javatypes.java.time.temporal.TemporalField, arg1: number): _javatypes.java.time.temporal.Temporal;
                    plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.temporal.Temporal;
                    plus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.temporal.Temporal;
                    minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.temporal.Temporal;
                    minus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.temporal.Temporal;
                    until(arg0: _javatypes.java.time.temporal.Temporal, arg1: _javatypes.java.time.temporal.TemporalUnit): number;
                    
                }
                namespace Temporal {
                    interface static {
                        
                        
                        
                    }
                }
                interface TemporalUnit extends _javatypes.java.lang.Interface {
                    
                    getDuration(): _javatypes.java.time.Duration;
                    isDurationEstimated(): boolean;
                    isDateBased(): boolean;
                    isTimeBased(): boolean;
                    isSupportedBy(arg0: _javatypes.java.time.temporal.Temporal): boolean;
                    addTo<R>(arg0: R, arg1: number): R;
                    between(arg0: _javatypes.java.time.temporal.Temporal, arg1: _javatypes.java.time.temporal.Temporal): number;
                    toString(): string;
                    
                }
                namespace TemporalUnit {
                    interface static {
                        
                        
                        
                    }
                }
                interface TemporalAdjuster extends _javatypes.java.lang.Interface {
                    
                    adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                    
                }
                namespace TemporalAdjuster {
                    interface static {
                        
                        
                        
                    }
                }
                interface TemporalAccessor extends _javatypes.java.lang.Interface {
                    
                    isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                    range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                    get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                    getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                    query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                    
                }
                namespace TemporalAccessor {
                    interface static {
                        
                        
                        
                    }
                }
                interface TemporalField extends _javatypes.java.lang.Interface {
                    
                    getDisplayName(arg0: _javatypes.java.util.Locale): string;
                    getBaseUnit(): _javatypes.java.time.temporal.TemporalUnit;
                    getRangeUnit(): _javatypes.java.time.temporal.TemporalUnit;
                    range(): _javatypes.java.time.temporal.ValueRange;
                    isDateBased(): boolean;
                    isTimeBased(): boolean;
                    isSupportedBy(arg0: _javatypes.java.time.temporal.TemporalAccessor): boolean;
                    rangeRefinedBy(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.temporal.ValueRange;
                    getFrom(arg0: _javatypes.java.time.temporal.TemporalAccessor): number;
                    adjustInto<R>(arg0: R, arg1: number): R;
                    resolve(arg0: _javatypes.java.util.Map<_javatypes.java.time.temporal.TemporalField, number>, arg1: _javatypes.java.time.temporal.TemporalAccessor, arg2: _javatypes.java.time.format.ResolverStyle): _javatypes.java.time.temporal.TemporalAccessor;
                    toString(): string;
                    
                }
                namespace TemporalField {
                    interface static {
                        
                        
                        
                    }
                }
                interface ValueRange extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                    
                    isFixed(): boolean;
                    getMinimum(): number;
                    getLargestMinimum(): number;
                    getSmallestMaximum(): number;
                    getMaximum(): number;
                    isIntValue(): boolean;
                    isValidValue(arg0: number): boolean;
                    isValidIntValue(arg0: number): boolean;
                    checkValidValue(arg0: number, arg1: _javatypes.java.time.temporal.TemporalField): number;
                    checkValidIntValue(arg0: number, arg1: _javatypes.java.time.temporal.TemporalField): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace ValueRange {
                    interface static {
                        
                        
                        of(arg0: number, arg1: number): _javatypes.java.time.temporal.ValueRange;
                        of(arg0: number, arg1: number, arg2: number): _javatypes.java.time.temporal.ValueRange;
                        of(arg0: number, arg1: number, arg2: number, arg3: number): _javatypes.java.time.temporal.ValueRange;
                        
                    }
                }
                interface TemporalQuery<R> extends _javatypes.java.lang.Interface {
                    
                    queryFrom(arg0: _javatypes.java.time.temporal.TemporalAccessor): R;
                    
                }
                namespace TemporalQuery {
                    interface static {
                        
                        
                        
                    }
                }
                interface ChronoField extends _javatypes.java.lang.Enum<_javatypes.java.time.temporal.ChronoField>, _javatypes.java.time.temporal.TemporalField {
                    
                    getDisplayName(arg0: _javatypes.java.util.Locale): string;
                    getBaseUnit(): _javatypes.java.time.temporal.TemporalUnit;
                    getRangeUnit(): _javatypes.java.time.temporal.TemporalUnit;
                    range(): _javatypes.java.time.temporal.ValueRange;
                    isDateBased(): boolean;
                    isTimeBased(): boolean;
                    checkValidValue(arg0: number): number;
                    checkValidIntValue(arg0: number): number;
                    isSupportedBy(arg0: _javatypes.java.time.temporal.TemporalAccessor): boolean;
                    rangeRefinedBy(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.temporal.ValueRange;
                    getFrom(arg0: _javatypes.java.time.temporal.TemporalAccessor): number;
                    adjustInto<R>(arg0: R, arg1: number): R;
                    toString(): string;
                    
                }
                namespace ChronoField {
                    interface static {
                        
                        readonly NANO_OF_SECOND: _javatypes.java.time.temporal.ChronoField;
                        readonly NANO_OF_DAY: _javatypes.java.time.temporal.ChronoField;
                        readonly MICRO_OF_SECOND: _javatypes.java.time.temporal.ChronoField;
                        readonly MICRO_OF_DAY: _javatypes.java.time.temporal.ChronoField;
                        readonly MILLI_OF_SECOND: _javatypes.java.time.temporal.ChronoField;
                        readonly MILLI_OF_DAY: _javatypes.java.time.temporal.ChronoField;
                        readonly SECOND_OF_MINUTE: _javatypes.java.time.temporal.ChronoField;
                        readonly SECOND_OF_DAY: _javatypes.java.time.temporal.ChronoField;
                        readonly MINUTE_OF_HOUR: _javatypes.java.time.temporal.ChronoField;
                        readonly MINUTE_OF_DAY: _javatypes.java.time.temporal.ChronoField;
                        readonly HOUR_OF_AMPM: _javatypes.java.time.temporal.ChronoField;
                        readonly CLOCK_HOUR_OF_AMPM: _javatypes.java.time.temporal.ChronoField;
                        readonly HOUR_OF_DAY: _javatypes.java.time.temporal.ChronoField;
                        readonly CLOCK_HOUR_OF_DAY: _javatypes.java.time.temporal.ChronoField;
                        readonly AMPM_OF_DAY: _javatypes.java.time.temporal.ChronoField;
                        readonly DAY_OF_WEEK: _javatypes.java.time.temporal.ChronoField;
                        readonly ALIGNED_DAY_OF_WEEK_IN_MONTH: _javatypes.java.time.temporal.ChronoField;
                        readonly ALIGNED_DAY_OF_WEEK_IN_YEAR: _javatypes.java.time.temporal.ChronoField;
                        readonly DAY_OF_MONTH: _javatypes.java.time.temporal.ChronoField;
                        readonly DAY_OF_YEAR: _javatypes.java.time.temporal.ChronoField;
                        readonly EPOCH_DAY: _javatypes.java.time.temporal.ChronoField;
                        readonly ALIGNED_WEEK_OF_MONTH: _javatypes.java.time.temporal.ChronoField;
                        readonly ALIGNED_WEEK_OF_YEAR: _javatypes.java.time.temporal.ChronoField;
                        readonly MONTH_OF_YEAR: _javatypes.java.time.temporal.ChronoField;
                        readonly PROLEPTIC_MONTH: _javatypes.java.time.temporal.ChronoField;
                        readonly YEAR_OF_ERA: _javatypes.java.time.temporal.ChronoField;
                        readonly YEAR: _javatypes.java.time.temporal.ChronoField;
                        readonly ERA: _javatypes.java.time.temporal.ChronoField;
                        readonly INSTANT_SECONDS: _javatypes.java.time.temporal.ChronoField;
                        readonly OFFSET_SECONDS: _javatypes.java.time.temporal.ChronoField;
                        
                        values(): _javatypes.java.time.temporal.ChronoField[];
                        valueOf(arg0: string): _javatypes.java.time.temporal.ChronoField;
                        
                    }
                }
            }
        
            namespace format {
            
                interface ResolverStyle extends _javatypes.java.lang.Enum<_javatypes.java.time.format.ResolverStyle> {
                    
                    
                }
                namespace ResolverStyle {
                    interface static {
                        
                        readonly STRICT: _javatypes.java.time.format.ResolverStyle;
                        readonly SMART: _javatypes.java.time.format.ResolverStyle;
                        readonly LENIENT: _javatypes.java.time.format.ResolverStyle;
                        
                        values(): _javatypes.java.time.format.ResolverStyle[];
                        valueOf(arg0: string): _javatypes.java.time.format.ResolverStyle;
                        
                    }
                }
                interface DateTimeFormatter extends _javatypes.java.lang.Object {
                    
                    getLocale(): _javatypes.java.util.Locale;
                    withLocale(arg0: _javatypes.java.util.Locale): _javatypes.java.time.format.DateTimeFormatter;
                    localizedBy(arg0: _javatypes.java.util.Locale): _javatypes.java.time.format.DateTimeFormatter;
                    getDecimalStyle(): _javatypes.java.time.format.DecimalStyle;
                    withDecimalStyle(arg0: _javatypes.java.time.format.DecimalStyle): _javatypes.java.time.format.DateTimeFormatter;
                    getChronology(): _javatypes.java.time.chrono.Chronology;
                    withChronology(arg0: _javatypes.java.time.chrono.Chronology): _javatypes.java.time.format.DateTimeFormatter;
                    getZone(): _javatypes.java.time.ZoneId;
                    withZone(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.format.DateTimeFormatter;
                    getResolverStyle(): _javatypes.java.time.format.ResolverStyle;
                    withResolverStyle(arg0: _javatypes.java.time.format.ResolverStyle): _javatypes.java.time.format.DateTimeFormatter;
                    getResolverFields(): _javatypes.java.util.Set<_javatypes.java.time.temporal.TemporalField>;
                    withResolverFields(arg0: _javatypes.java.time.temporal.TemporalField[]): _javatypes.java.time.format.DateTimeFormatter;
                    withResolverFields(arg0: _javatypes.java.util.Set<_javatypes.java.time.temporal.TemporalField>): _javatypes.java.time.format.DateTimeFormatter;
                    format(arg0: _javatypes.java.time.temporal.TemporalAccessor): string;
                    formatTo(arg0: _javatypes.java.time.temporal.TemporalAccessor, arg1: _javatypes.java.lang.Appendable): void;
                    parse(arg0: _javatypes.java.lang.CharSequence): _javatypes.java.time.temporal.TemporalAccessor;
                    parse(arg0: _javatypes.java.lang.CharSequence, arg1: _javatypes.java.text.ParsePosition): _javatypes.java.time.temporal.TemporalAccessor;
                    parse<T>(arg0: _javatypes.java.lang.CharSequence, arg1: _javatypes.java.time.temporal.TemporalQuery<T>): T;
                    parseBest(arg0: _javatypes.java.lang.CharSequence, arg1: _javatypes.java.time.temporal.TemporalQuery<any>[]): _javatypes.java.time.temporal.TemporalAccessor;
                    parseUnresolved(arg0: _javatypes.java.lang.CharSequence, arg1: _javatypes.java.text.ParsePosition): _javatypes.java.time.temporal.TemporalAccessor;
                    toFormat(): _javatypes.java.text.Format;
                    toFormat(arg0: _javatypes.java.time.temporal.TemporalQuery<any>): _javatypes.java.text.Format;
                    toString(): string;
                    
                }
                namespace DateTimeFormatter {
                    interface static {
                        
                        readonly ISO_LOCAL_DATE: _javatypes.java.time.format.DateTimeFormatter;
                        readonly ISO_OFFSET_DATE: _javatypes.java.time.format.DateTimeFormatter;
                        readonly ISO_DATE: _javatypes.java.time.format.DateTimeFormatter;
                        readonly ISO_LOCAL_TIME: _javatypes.java.time.format.DateTimeFormatter;
                        readonly ISO_OFFSET_TIME: _javatypes.java.time.format.DateTimeFormatter;
                        readonly ISO_TIME: _javatypes.java.time.format.DateTimeFormatter;
                        readonly ISO_LOCAL_DATE_TIME: _javatypes.java.time.format.DateTimeFormatter;
                        readonly ISO_OFFSET_DATE_TIME: _javatypes.java.time.format.DateTimeFormatter;
                        readonly ISO_ZONED_DATE_TIME: _javatypes.java.time.format.DateTimeFormatter;
                        readonly ISO_DATE_TIME: _javatypes.java.time.format.DateTimeFormatter;
                        readonly ISO_ORDINAL_DATE: _javatypes.java.time.format.DateTimeFormatter;
                        readonly ISO_WEEK_DATE: _javatypes.java.time.format.DateTimeFormatter;
                        readonly ISO_INSTANT: _javatypes.java.time.format.DateTimeFormatter;
                        readonly BASIC_ISO_DATE: _javatypes.java.time.format.DateTimeFormatter;
                        readonly RFC_1123_DATE_TIME: _javatypes.java.time.format.DateTimeFormatter;
                        
                        ofPattern(arg0: string): _javatypes.java.time.format.DateTimeFormatter;
                        ofPattern(arg0: string, arg1: _javatypes.java.util.Locale): _javatypes.java.time.format.DateTimeFormatter;
                        ofLocalizedDate(arg0: _javatypes.java.time.format.FormatStyle): _javatypes.java.time.format.DateTimeFormatter;
                        ofLocalizedTime(arg0: _javatypes.java.time.format.FormatStyle): _javatypes.java.time.format.DateTimeFormatter;
                        ofLocalizedDateTime(arg0: _javatypes.java.time.format.FormatStyle): _javatypes.java.time.format.DateTimeFormatter;
                        ofLocalizedDateTime(arg0: _javatypes.java.time.format.FormatStyle, arg1: _javatypes.java.time.format.FormatStyle): _javatypes.java.time.format.DateTimeFormatter;
                        parsedExcessDays(): _javatypes.java.time.temporal.TemporalQuery<_javatypes.java.time.Period>;
                        parsedLeapSecond(): _javatypes.java.time.temporal.TemporalQuery<boolean>;
                        
                    }
                }
                interface TextStyle extends _javatypes.java.lang.Enum<_javatypes.java.time.format.TextStyle> {
                    
                    isStandalone(): boolean;
                    asStandalone(): _javatypes.java.time.format.TextStyle;
                    asNormal(): _javatypes.java.time.format.TextStyle;
                    
                }
                namespace TextStyle {
                    interface static {
                        
                        readonly FULL: _javatypes.java.time.format.TextStyle;
                        readonly FULL_STANDALONE: _javatypes.java.time.format.TextStyle;
                        readonly SHORT: _javatypes.java.time.format.TextStyle;
                        readonly SHORT_STANDALONE: _javatypes.java.time.format.TextStyle;
                        readonly NARROW: _javatypes.java.time.format.TextStyle;
                        readonly NARROW_STANDALONE: _javatypes.java.time.format.TextStyle;
                        
                        values(): _javatypes.java.time.format.TextStyle[];
                        valueOf(arg0: string): _javatypes.java.time.format.TextStyle;
                        
                    }
                }
                interface DecimalStyle extends _javatypes.java.lang.Object {
                    
                    getZeroDigit(): number;
                    withZeroDigit(arg0: number): _javatypes.java.time.format.DecimalStyle;
                    getPositiveSign(): number;
                    withPositiveSign(arg0: number): _javatypes.java.time.format.DecimalStyle;
                    getNegativeSign(): number;
                    withNegativeSign(arg0: number): _javatypes.java.time.format.DecimalStyle;
                    getDecimalSeparator(): number;
                    withDecimalSeparator(arg0: number): _javatypes.java.time.format.DecimalStyle;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace DecimalStyle {
                    interface static {
                        
                        readonly STANDARD: _javatypes.java.time.format.DecimalStyle;
                        
                        getAvailableLocales(): _javatypes.java.util.Set<_javatypes.java.util.Locale>;
                        ofDefaultLocale(): _javatypes.java.time.format.DecimalStyle;
                        of(arg0: _javatypes.java.util.Locale): _javatypes.java.time.format.DecimalStyle;
                        
                    }
                }
                interface FormatStyle extends _javatypes.java.lang.Enum<_javatypes.java.time.format.FormatStyle> {
                    
                    
                }
                namespace FormatStyle {
                    interface static {
                        
                        readonly FULL: _javatypes.java.time.format.FormatStyle;
                        readonly LONG: _javatypes.java.time.format.FormatStyle;
                        readonly MEDIUM: _javatypes.java.time.format.FormatStyle;
                        readonly SHORT: _javatypes.java.time.format.FormatStyle;
                        
                        values(): _javatypes.java.time.format.FormatStyle[];
                        valueOf(arg0: string): _javatypes.java.time.format.FormatStyle;
                        
                    }
                }
            }
        
            namespace zone {
            
                interface ZoneRules extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                    
                    isFixedOffset(): boolean;
                    getOffset(arg0: _javatypes.java.time.Instant): _javatypes.java.time.ZoneOffset;
                    getOffset(arg0: _javatypes.java.time.LocalDateTime): _javatypes.java.time.ZoneOffset;
                    getValidOffsets(arg0: _javatypes.java.time.LocalDateTime): _javatypes.java.util.List<_javatypes.java.time.ZoneOffset>;
                    getTransition(arg0: _javatypes.java.time.LocalDateTime): _javatypes.java.time.zone.ZoneOffsetTransition;
                    getStandardOffset(arg0: _javatypes.java.time.Instant): _javatypes.java.time.ZoneOffset;
                    getDaylightSavings(arg0: _javatypes.java.time.Instant): _javatypes.java.time.Duration;
                    isDaylightSavings(arg0: _javatypes.java.time.Instant): boolean;
                    isValidOffset(arg0: _javatypes.java.time.LocalDateTime, arg1: _javatypes.java.time.ZoneOffset): boolean;
                    nextTransition(arg0: _javatypes.java.time.Instant): _javatypes.java.time.zone.ZoneOffsetTransition;
                    previousTransition(arg0: _javatypes.java.time.Instant): _javatypes.java.time.zone.ZoneOffsetTransition;
                    getTransitions(): _javatypes.java.util.List<_javatypes.java.time.zone.ZoneOffsetTransition>;
                    getTransitionRules(): _javatypes.java.util.List<_javatypes.java.time.zone.ZoneOffsetTransitionRule>;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace ZoneRules {
                    interface static {
                        
                        
                        of(arg0: _javatypes.java.time.ZoneOffset, arg1: _javatypes.java.time.ZoneOffset, arg2: _javatypes.java.util.List<_javatypes.java.time.zone.ZoneOffsetTransition>, arg3: _javatypes.java.util.List<_javatypes.java.time.zone.ZoneOffsetTransition>, arg4: _javatypes.java.util.List<_javatypes.java.time.zone.ZoneOffsetTransitionRule>): _javatypes.java.time.zone.ZoneRules;
                        of(arg0: _javatypes.java.time.ZoneOffset): _javatypes.java.time.zone.ZoneRules;
                        
                    }
                }
                interface ZoneOffsetTransition extends _javatypes.java.lang.Object, _javatypes.java.lang.Comparable<_javatypes.java.time.zone.ZoneOffsetTransition>, _javatypes.java.io.Serializable {
                    
                    getInstant(): _javatypes.java.time.Instant;
                    toEpochSecond(): number;
                    getDateTimeBefore(): _javatypes.java.time.LocalDateTime;
                    getDateTimeAfter(): _javatypes.java.time.LocalDateTime;
                    getOffsetBefore(): _javatypes.java.time.ZoneOffset;
                    getOffsetAfter(): _javatypes.java.time.ZoneOffset;
                    getDuration(): _javatypes.java.time.Duration;
                    isGap(): boolean;
                    isOverlap(): boolean;
                    isValidOffset(arg0: _javatypes.java.time.ZoneOffset): boolean;
                    compareTo(arg0: _javatypes.java.time.zone.ZoneOffsetTransition): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace ZoneOffsetTransition {
                    interface static {
                        
                        
                        of(arg0: _javatypes.java.time.LocalDateTime, arg1: _javatypes.java.time.ZoneOffset, arg2: _javatypes.java.time.ZoneOffset): _javatypes.java.time.zone.ZoneOffsetTransition;
                        
                    }
                }
                interface ZoneOffsetTransitionRule extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                    
                    getMonth(): _javatypes.java.time.Month;
                    getDayOfMonthIndicator(): number;
                    getDayOfWeek(): _javatypes.java.time.DayOfWeek;
                    getLocalTime(): _javatypes.java.time.LocalTime;
                    isMidnightEndOfDay(): boolean;
                    getTimeDefinition(): _javatypes.java.time.zone.ZoneOffsetTransitionRule$TimeDefinition;
                    getStandardOffset(): _javatypes.java.time.ZoneOffset;
                    getOffsetBefore(): _javatypes.java.time.ZoneOffset;
                    getOffsetAfter(): _javatypes.java.time.ZoneOffset;
                    createTransition(arg0: number): _javatypes.java.time.zone.ZoneOffsetTransition;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace ZoneOffsetTransitionRule {
                    interface static {
                        
                        
                        of(arg0: _javatypes.java.time.Month, arg1: number, arg2: _javatypes.java.time.DayOfWeek, arg3: _javatypes.java.time.LocalTime, arg4: boolean, arg5: _javatypes.java.time.zone.ZoneOffsetTransitionRule$TimeDefinition, arg6: _javatypes.java.time.ZoneOffset, arg7: _javatypes.java.time.ZoneOffset, arg8: _javatypes.java.time.ZoneOffset): _javatypes.java.time.zone.ZoneOffsetTransitionRule;
                        
                    }
                }
                interface ZoneOffsetTransitionRule$TimeDefinition extends _javatypes.java.lang.Enum<_javatypes.java.time.zone.ZoneOffsetTransitionRule$TimeDefinition> {
                    
                    createDateTime(arg0: _javatypes.java.time.LocalDateTime, arg1: _javatypes.java.time.ZoneOffset, arg2: _javatypes.java.time.ZoneOffset): _javatypes.java.time.LocalDateTime;
                    
                }
                namespace ZoneOffsetTransitionRule$TimeDefinition {
                    interface static {
                        
                        readonly UTC: _javatypes.java.time.zone.ZoneOffsetTransitionRule$TimeDefinition;
                        readonly WALL: _javatypes.java.time.zone.ZoneOffsetTransitionRule$TimeDefinition;
                        readonly STANDARD: _javatypes.java.time.zone.ZoneOffsetTransitionRule$TimeDefinition;
                        
                        values(): _javatypes.java.time.zone.ZoneOffsetTransitionRule$TimeDefinition[];
                        valueOf(arg0: string): _javatypes.java.time.zone.ZoneOffsetTransitionRule$TimeDefinition;
                        
                    }
                }
            }
        
            namespace chrono {
            
                interface Chronology extends _javatypes.java.lang.Interface, _javatypes.java.lang.Comparable<_javatypes.java.time.chrono.Chronology> {
                    
                    getId(): string;
                    getCalendarType(): string;
                    date(arg0: _javatypes.java.time.chrono.Era, arg1: number, arg2: number, arg3: number): _javatypes.java.time.chrono.ChronoLocalDate;
                    date(arg0: number, arg1: number, arg2: number): _javatypes.java.time.chrono.ChronoLocalDate;
                    dateYearDay(arg0: _javatypes.java.time.chrono.Era, arg1: number, arg2: number): _javatypes.java.time.chrono.ChronoLocalDate;
                    dateYearDay(arg0: number, arg1: number): _javatypes.java.time.chrono.ChronoLocalDate;
                    dateEpochDay(arg0: number): _javatypes.java.time.chrono.ChronoLocalDate;
                    dateNow(): _javatypes.java.time.chrono.ChronoLocalDate;
                    dateNow(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.chrono.ChronoLocalDate;
                    dateNow(arg0: _javatypes.java.time.Clock): _javatypes.java.time.chrono.ChronoLocalDate;
                    date(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.chrono.ChronoLocalDate;
                    localDateTime(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.chrono.ChronoLocalDateTime<any>;
                    zonedDateTime(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.chrono.ChronoZonedDateTime<any>;
                    zonedDateTime(arg0: _javatypes.java.time.Instant, arg1: _javatypes.java.time.ZoneId): _javatypes.java.time.chrono.ChronoZonedDateTime<any>;
                    isLeapYear(arg0: number): boolean;
                    prolepticYear(arg0: _javatypes.java.time.chrono.Era, arg1: number): number;
                    eraOf(arg0: number): _javatypes.java.time.chrono.Era;
                    eras(): _javatypes.java.util.List<_javatypes.java.time.chrono.Era>;
                    range(arg0: _javatypes.java.time.temporal.ChronoField): _javatypes.java.time.temporal.ValueRange;
                    getDisplayName(arg0: _javatypes.java.time.format.TextStyle, arg1: _javatypes.java.util.Locale): string;
                    resolveDate(arg0: _javatypes.java.util.Map<_javatypes.java.time.temporal.TemporalField, number>, arg1: _javatypes.java.time.format.ResolverStyle): _javatypes.java.time.chrono.ChronoLocalDate;
                    period(arg0: number, arg1: number, arg2: number): _javatypes.java.time.chrono.ChronoPeriod;
                    epochSecond(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: _javatypes.java.time.ZoneOffset): number;
                    epochSecond(arg0: _javatypes.java.time.chrono.Era, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: _javatypes.java.time.ZoneOffset): number;
                    compareTo(arg0: _javatypes.java.time.chrono.Chronology): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace Chronology {
                    interface static {
                        
                        
                        from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.chrono.Chronology;
                        ofLocale(arg0: _javatypes.java.util.Locale): _javatypes.java.time.chrono.Chronology;
                        of(arg0: string): _javatypes.java.time.chrono.Chronology;
                        getAvailableChronologies(): _javatypes.java.util.Set<_javatypes.java.time.chrono.Chronology>;
                        
                    }
                }
                interface ChronoZonedDateTime<D> extends _javatypes.java.lang.Interface, _javatypes.java.time.temporal.Temporal, _javatypes.java.lang.Comparable<_javatypes.java.time.chrono.ChronoZonedDateTime<any>> {
                    
                    range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                    get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                    getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                    toLocalDate(): D;
                    toLocalTime(): _javatypes.java.time.LocalTime;
                    toLocalDateTime(): _javatypes.java.time.chrono.ChronoLocalDateTime<D>;
                    getChronology(): _javatypes.java.time.chrono.Chronology;
                    getOffset(): _javatypes.java.time.ZoneOffset;
                    getZone(): _javatypes.java.time.ZoneId;
                    withEarlierOffsetAtOverlap(): _javatypes.java.time.chrono.ChronoZonedDateTime<D>;
                    withLaterOffsetAtOverlap(): _javatypes.java.time.chrono.ChronoZonedDateTime<D>;
                    withZoneSameLocal(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.chrono.ChronoZonedDateTime<D>;
                    withZoneSameInstant(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.chrono.ChronoZonedDateTime<D>;
                    isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                    isSupported(arg0: _javatypes.java.time.temporal.TemporalUnit): boolean;
                    with(arg0: _javatypes.java.time.temporal.TemporalAdjuster): _javatypes.java.time.chrono.ChronoZonedDateTime<D>;
                    with(arg0: _javatypes.java.time.temporal.TemporalField, arg1: number): _javatypes.java.time.chrono.ChronoZonedDateTime<D>;
                    plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.chrono.ChronoZonedDateTime<D>;
                    plus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.chrono.ChronoZonedDateTime<D>;
                    minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.chrono.ChronoZonedDateTime<D>;
                    minus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.chrono.ChronoZonedDateTime<D>;
                    query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                    format(arg0: _javatypes.java.time.format.DateTimeFormatter): string;
                    toInstant(): _javatypes.java.time.Instant;
                    toEpochSecond(): number;
                    compareTo(arg0: _javatypes.java.time.chrono.ChronoZonedDateTime<any>): number;
                    isBefore(arg0: _javatypes.java.time.chrono.ChronoZonedDateTime<any>): boolean;
                    isAfter(arg0: _javatypes.java.time.chrono.ChronoZonedDateTime<any>): boolean;
                    isEqual(arg0: _javatypes.java.time.chrono.ChronoZonedDateTime<any>): boolean;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace ChronoZonedDateTime {
                    interface static {
                        
                        
                        timeLineOrder(): _javatypes.java.util.Comparator<_javatypes.java.time.chrono.ChronoZonedDateTime<any>>;
                        from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.chrono.ChronoZonedDateTime<any>;
                        
                    }
                }
                interface Era extends _javatypes.java.lang.Interface, _javatypes.java.time.temporal.TemporalAccessor, _javatypes.java.time.temporal.TemporalAdjuster {
                    
                    getValue(): number;
                    isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                    range(arg0: _javatypes.java.time.temporal.TemporalField): _javatypes.java.time.temporal.ValueRange;
                    get(arg0: _javatypes.java.time.temporal.TemporalField): number;
                    getLong(arg0: _javatypes.java.time.temporal.TemporalField): number;
                    query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                    adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                    getDisplayName(arg0: _javatypes.java.time.format.TextStyle, arg1: _javatypes.java.util.Locale): string;
                    
                }
                namespace Era {
                    interface static {
                        
                        
                        
                    }
                }
                interface ChronoLocalDateTime<D> extends _javatypes.java.lang.Interface, _javatypes.java.time.temporal.Temporal, _javatypes.java.time.temporal.TemporalAdjuster, _javatypes.java.lang.Comparable<_javatypes.java.time.chrono.ChronoLocalDateTime<any>> {
                    
                    getChronology(): _javatypes.java.time.chrono.Chronology;
                    toLocalDate(): D;
                    toLocalTime(): _javatypes.java.time.LocalTime;
                    isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                    isSupported(arg0: _javatypes.java.time.temporal.TemporalUnit): boolean;
                    with(arg0: _javatypes.java.time.temporal.TemporalAdjuster): _javatypes.java.time.chrono.ChronoLocalDateTime<D>;
                    with(arg0: _javatypes.java.time.temporal.TemporalField, arg1: number): _javatypes.java.time.chrono.ChronoLocalDateTime<D>;
                    plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.chrono.ChronoLocalDateTime<D>;
                    plus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.chrono.ChronoLocalDateTime<D>;
                    minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.chrono.ChronoLocalDateTime<D>;
                    minus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.chrono.ChronoLocalDateTime<D>;
                    query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                    adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                    format(arg0: _javatypes.java.time.format.DateTimeFormatter): string;
                    atZone(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.chrono.ChronoZonedDateTime<D>;
                    toInstant(arg0: _javatypes.java.time.ZoneOffset): _javatypes.java.time.Instant;
                    toEpochSecond(arg0: _javatypes.java.time.ZoneOffset): number;
                    compareTo(arg0: _javatypes.java.time.chrono.ChronoLocalDateTime<any>): number;
                    isAfter(arg0: _javatypes.java.time.chrono.ChronoLocalDateTime<any>): boolean;
                    isBefore(arg0: _javatypes.java.time.chrono.ChronoLocalDateTime<any>): boolean;
                    isEqual(arg0: _javatypes.java.time.chrono.ChronoLocalDateTime<any>): boolean;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace ChronoLocalDateTime {
                    interface static {
                        
                        
                        timeLineOrder(): _javatypes.java.util.Comparator<_javatypes.java.time.chrono.ChronoLocalDateTime<any>>;
                        from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.chrono.ChronoLocalDateTime<any>;
                        
                    }
                }
                interface ChronoLocalDate extends _javatypes.java.lang.Interface, _javatypes.java.time.temporal.Temporal, _javatypes.java.time.temporal.TemporalAdjuster, _javatypes.java.lang.Comparable<_javatypes.java.time.chrono.ChronoLocalDate> {
                    
                    getChronology(): _javatypes.java.time.chrono.Chronology;
                    getEra(): _javatypes.java.time.chrono.Era;
                    isLeapYear(): boolean;
                    lengthOfMonth(): number;
                    lengthOfYear(): number;
                    isSupported(arg0: _javatypes.java.time.temporal.TemporalField): boolean;
                    isSupported(arg0: _javatypes.java.time.temporal.TemporalUnit): boolean;
                    with(arg0: _javatypes.java.time.temporal.TemporalAdjuster): _javatypes.java.time.chrono.ChronoLocalDate;
                    with(arg0: _javatypes.java.time.temporal.TemporalField, arg1: number): _javatypes.java.time.chrono.ChronoLocalDate;
                    plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.chrono.ChronoLocalDate;
                    plus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.chrono.ChronoLocalDate;
                    minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.chrono.ChronoLocalDate;
                    minus(arg0: number, arg1: _javatypes.java.time.temporal.TemporalUnit): _javatypes.java.time.chrono.ChronoLocalDate;
                    query<R>(arg0: _javatypes.java.time.temporal.TemporalQuery<R>): R;
                    adjustInto(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                    until(arg0: _javatypes.java.time.temporal.Temporal, arg1: _javatypes.java.time.temporal.TemporalUnit): number;
                    until(arg0: _javatypes.java.time.chrono.ChronoLocalDate): _javatypes.java.time.chrono.ChronoPeriod;
                    format(arg0: _javatypes.java.time.format.DateTimeFormatter): string;
                    atTime(arg0: _javatypes.java.time.LocalTime): _javatypes.java.time.chrono.ChronoLocalDateTime<any>;
                    toEpochDay(): number;
                    compareTo(arg0: _javatypes.java.time.chrono.ChronoLocalDate): number;
                    isAfter(arg0: _javatypes.java.time.chrono.ChronoLocalDate): boolean;
                    isBefore(arg0: _javatypes.java.time.chrono.ChronoLocalDate): boolean;
                    isEqual(arg0: _javatypes.java.time.chrono.ChronoLocalDate): boolean;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace ChronoLocalDate {
                    interface static {
                        
                        
                        timeLineOrder(): _javatypes.java.util.Comparator<_javatypes.java.time.chrono.ChronoLocalDate>;
                        from(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.chrono.ChronoLocalDate;
                        
                    }
                }
                interface ChronoPeriod extends _javatypes.java.lang.Interface, _javatypes.java.time.temporal.TemporalAmount {
                    
                    get(arg0: _javatypes.java.time.temporal.TemporalUnit): number;
                    getUnits(): _javatypes.java.util.List<_javatypes.java.time.temporal.TemporalUnit>;
                    getChronology(): _javatypes.java.time.chrono.Chronology;
                    isZero(): boolean;
                    isNegative(): boolean;
                    plus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.chrono.ChronoPeriod;
                    minus(arg0: _javatypes.java.time.temporal.TemporalAmount): _javatypes.java.time.chrono.ChronoPeriod;
                    multipliedBy(arg0: number): _javatypes.java.time.chrono.ChronoPeriod;
                    negated(): _javatypes.java.time.chrono.ChronoPeriod;
                    normalized(): _javatypes.java.time.chrono.ChronoPeriod;
                    addTo(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                    subtractFrom(arg0: _javatypes.java.time.temporal.Temporal): _javatypes.java.time.temporal.Temporal;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace ChronoPeriod {
                    interface static {
                        
                        
                        between(arg0: _javatypes.java.time.chrono.ChronoLocalDate, arg1: _javatypes.java.time.chrono.ChronoLocalDate): _javatypes.java.time.chrono.ChronoPeriod;
                        
                    }
                }
                interface IsoEra extends _javatypes.java.lang.Enum<_javatypes.java.time.chrono.IsoEra>, _javatypes.java.time.chrono.Era {
                    
                    getValue(): number;
                    
                }
                namespace IsoEra {
                    interface static {
                        
                        readonly BCE: _javatypes.java.time.chrono.IsoEra;
                        readonly CE: _javatypes.java.time.chrono.IsoEra;
                        
                        values(): _javatypes.java.time.chrono.IsoEra[];
                        valueOf(arg0: string): _javatypes.java.time.chrono.IsoEra;
                        of(arg0: number): _javatypes.java.time.chrono.IsoEra;
                        
                    }
                }
                interface IsoChronology extends _javatypes.java.time.chrono.AbstractChronology, _javatypes.java.io.Serializable {
                    
                    getId(): string;
                    getCalendarType(): string;
                    date(arg0: _javatypes.java.time.chrono.Era, arg1: number, arg2: number, arg3: number): _javatypes.java.time.LocalDate;
                    date(arg0: number, arg1: number, arg2: number): _javatypes.java.time.LocalDate;
                    dateYearDay(arg0: _javatypes.java.time.chrono.Era, arg1: number, arg2: number): _javatypes.java.time.LocalDate;
                    dateYearDay(arg0: number, arg1: number): _javatypes.java.time.LocalDate;
                    dateEpochDay(arg0: number): _javatypes.java.time.LocalDate;
                    date(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.LocalDate;
                    epochSecond(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: _javatypes.java.time.ZoneOffset): number;
                    localDateTime(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.LocalDateTime;
                    zonedDateTime(arg0: _javatypes.java.time.temporal.TemporalAccessor): _javatypes.java.time.ZonedDateTime;
                    zonedDateTime(arg0: _javatypes.java.time.Instant, arg1: _javatypes.java.time.ZoneId): _javatypes.java.time.ZonedDateTime;
                    dateNow(): _javatypes.java.time.LocalDate;
                    dateNow(arg0: _javatypes.java.time.ZoneId): _javatypes.java.time.LocalDate;
                    dateNow(arg0: _javatypes.java.time.Clock): _javatypes.java.time.LocalDate;
                    isLeapYear(arg0: number): boolean;
                    prolepticYear(arg0: _javatypes.java.time.chrono.Era, arg1: number): number;
                    eraOf(arg0: number): _javatypes.java.time.chrono.IsoEra;
                    eras(): _javatypes.java.util.List<_javatypes.java.time.chrono.Era>;
                    resolveDate(arg0: _javatypes.java.util.Map<_javatypes.java.time.temporal.TemporalField, number>, arg1: _javatypes.java.time.format.ResolverStyle): _javatypes.java.time.LocalDate;
                    range(arg0: _javatypes.java.time.temporal.ChronoField): _javatypes.java.time.temporal.ValueRange;
                    period(arg0: number, arg1: number, arg2: number): _javatypes.java.time.Period;
                    
                }
                namespace IsoChronology {
                    interface static {
                        
                        readonly INSTANCE: _javatypes.java.time.chrono.IsoChronology;
                        
                        
                    }
                }
                interface AbstractChronology extends _javatypes.java.lang.Object, _javatypes.java.time.chrono.Chronology {
                    
                    resolveDate(arg0: _javatypes.java.util.Map<_javatypes.java.time.temporal.TemporalField, number>, arg1: _javatypes.java.time.format.ResolverStyle): _javatypes.java.time.chrono.ChronoLocalDate;
                    compareTo(arg0: _javatypes.java.time.chrono.Chronology): number;
                    equals(arg0: _javatypes.java.lang.Object): boolean;
                    hashCode(): number;
                    toString(): string;
                    
                }
                namespace AbstractChronology {
                    interface static {
                        
                        
                        
                    }
                }
            }
        }
    
        namespace math {
        
            interface BigDecimal extends _javatypes.java.lang.Number, _javatypes.java.lang.Comparable<_javatypes.java.math.BigDecimal> {
                
                add(arg0: _javatypes.java.math.BigDecimal): _javatypes.java.math.BigDecimal;
                add(arg0: _javatypes.java.math.BigDecimal, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                subtract(arg0: _javatypes.java.math.BigDecimal): _javatypes.java.math.BigDecimal;
                subtract(arg0: _javatypes.java.math.BigDecimal, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                multiply(arg0: _javatypes.java.math.BigDecimal): _javatypes.java.math.BigDecimal;
                multiply(arg0: _javatypes.java.math.BigDecimal, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                divide(arg0: _javatypes.java.math.BigDecimal, arg1: number, arg2: number): _javatypes.java.math.BigDecimal;
                divide(arg0: _javatypes.java.math.BigDecimal, arg1: number, arg2: _javatypes.java.math.RoundingMode): _javatypes.java.math.BigDecimal;
                divide(arg0: _javatypes.java.math.BigDecimal, arg1: number): _javatypes.java.math.BigDecimal;
                divide(arg0: _javatypes.java.math.BigDecimal, arg1: _javatypes.java.math.RoundingMode): _javatypes.java.math.BigDecimal;
                divide(arg0: _javatypes.java.math.BigDecimal): _javatypes.java.math.BigDecimal;
                divide(arg0: _javatypes.java.math.BigDecimal, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                divideToIntegralValue(arg0: _javatypes.java.math.BigDecimal): _javatypes.java.math.BigDecimal;
                divideToIntegralValue(arg0: _javatypes.java.math.BigDecimal, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                remainder(arg0: _javatypes.java.math.BigDecimal): _javatypes.java.math.BigDecimal;
                remainder(arg0: _javatypes.java.math.BigDecimal, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                divideAndRemainder(arg0: _javatypes.java.math.BigDecimal): _javatypes.java.math.BigDecimal[];
                divideAndRemainder(arg0: _javatypes.java.math.BigDecimal, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal[];
                sqrt(arg0: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                pow(arg0: number): _javatypes.java.math.BigDecimal;
                pow(arg0: number, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                abs(): _javatypes.java.math.BigDecimal;
                abs(arg0: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                negate(): _javatypes.java.math.BigDecimal;
                negate(arg0: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                plus(): _javatypes.java.math.BigDecimal;
                plus(arg0: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                signum(): number;
                scale(): number;
                precision(): number;
                unscaledValue(): _javatypes.java.math.BigInteger;
                round(arg0: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                setScale(arg0: number, arg1: _javatypes.java.math.RoundingMode): _javatypes.java.math.BigDecimal;
                setScale(arg0: number, arg1: number): _javatypes.java.math.BigDecimal;
                setScale(arg0: number): _javatypes.java.math.BigDecimal;
                movePointLeft(arg0: number): _javatypes.java.math.BigDecimal;
                movePointRight(arg0: number): _javatypes.java.math.BigDecimal;
                scaleByPowerOfTen(arg0: number): _javatypes.java.math.BigDecimal;
                stripTrailingZeros(): _javatypes.java.math.BigDecimal;
                compareTo(arg0: _javatypes.java.math.BigDecimal): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                min(arg0: _javatypes.java.math.BigDecimal): _javatypes.java.math.BigDecimal;
                max(arg0: _javatypes.java.math.BigDecimal): _javatypes.java.math.BigDecimal;
                hashCode(): number;
                toString(): string;
                toEngineeringString(): string;
                toPlainString(): string;
                toBigInteger(): _javatypes.java.math.BigInteger;
                toBigIntegerExact(): _javatypes.java.math.BigInteger;
                longValue(): number;
                longValueExact(): number;
                intValue(): number;
                intValueExact(): number;
                shortValueExact(): number;
                byteValueExact(): number;
                floatValue(): number;
                doubleValue(): number;
                ulp(): _javatypes.java.math.BigDecimal;
                
            }
            namespace BigDecimal {
                interface static {
                    new (arg0: number[], arg1: number, arg2: number): _javatypes.java.math.BigDecimal;
                    new (arg0: number[], arg1: number, arg2: number, arg3: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                    new (arg0: number[]): _javatypes.java.math.BigDecimal;
                    new (arg0: number[], arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                    new (arg0: string): _javatypes.java.math.BigDecimal;
                    new (arg0: string, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                    new (arg0: number): _javatypes.java.math.BigDecimal;
                    new (arg0: number, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                    new (arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigDecimal;
                    new (arg0: _javatypes.java.math.BigInteger, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                    new (arg0: _javatypes.java.math.BigInteger, arg1: number): _javatypes.java.math.BigDecimal;
                    new (arg0: _javatypes.java.math.BigInteger, arg1: number, arg2: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                    new (arg0: number): _javatypes.java.math.BigDecimal;
                    new (arg0: number, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                    new (arg0: number): _javatypes.java.math.BigDecimal;
                    new (arg0: number, arg1: _javatypes.java.math.MathContext): _javatypes.java.math.BigDecimal;
                    
                    readonly ZERO: _javatypes.java.math.BigDecimal;
                    readonly ONE: _javatypes.java.math.BigDecimal;
                    readonly TEN: _javatypes.java.math.BigDecimal;
                    readonly ROUND_UP: number;
                    readonly ROUND_DOWN: number;
                    readonly ROUND_CEILING: number;
                    readonly ROUND_FLOOR: number;
                    readonly ROUND_HALF_UP: number;
                    readonly ROUND_HALF_DOWN: number;
                    readonly ROUND_HALF_EVEN: number;
                    readonly ROUND_UNNECESSARY: number;
                    
                    valueOf(arg0: number, arg1: number): _javatypes.java.math.BigDecimal;
                    valueOf(arg0: number): _javatypes.java.math.BigDecimal;
                    valueOf(arg0: number): _javatypes.java.math.BigDecimal;
                    
                }
            }
            interface BigInteger extends _javatypes.java.lang.Number, _javatypes.java.lang.Comparable<_javatypes.java.math.BigInteger> {
                
                nextProbablePrime(): _javatypes.java.math.BigInteger;
                add(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                subtract(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                multiply(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                divide(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                divideAndRemainder(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger[];
                remainder(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                pow(arg0: number): _javatypes.java.math.BigInteger;
                sqrt(): _javatypes.java.math.BigInteger;
                sqrtAndRemainder(): _javatypes.java.math.BigInteger[];
                gcd(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                abs(): _javatypes.java.math.BigInteger;
                negate(): _javatypes.java.math.BigInteger;
                signum(): number;
                mod(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                modPow(arg0: _javatypes.java.math.BigInteger, arg1: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                modInverse(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                shiftLeft(arg0: number): _javatypes.java.math.BigInteger;
                shiftRight(arg0: number): _javatypes.java.math.BigInteger;
                and(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                or(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                xor(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                not(): _javatypes.java.math.BigInteger;
                andNot(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                testBit(arg0: number): boolean;
                setBit(arg0: number): _javatypes.java.math.BigInteger;
                clearBit(arg0: number): _javatypes.java.math.BigInteger;
                flipBit(arg0: number): _javatypes.java.math.BigInteger;
                getLowestSetBit(): number;
                bitLength(): number;
                bitCount(): number;
                isProbablePrime(arg0: number): boolean;
                compareTo(arg0: _javatypes.java.math.BigInteger): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                min(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                max(arg0: _javatypes.java.math.BigInteger): _javatypes.java.math.BigInteger;
                hashCode(): number;
                toString(arg0: number): string;
                toString(): string;
                toByteArray(): number[];
                intValue(): number;
                longValue(): number;
                floatValue(): number;
                doubleValue(): number;
                longValueExact(): number;
                intValueExact(): number;
                shortValueExact(): number;
                byteValueExact(): number;
                
            }
            namespace BigInteger {
                interface static {
                    new (arg0: number[], arg1: number, arg2: number): _javatypes.java.math.BigInteger;
                    new (arg0: number[]): _javatypes.java.math.BigInteger;
                    new (arg0: number, arg1: number[], arg2: number, arg3: number): _javatypes.java.math.BigInteger;
                    new (arg0: number, arg1: number[]): _javatypes.java.math.BigInteger;
                    new (arg0: string, arg1: number): _javatypes.java.math.BigInteger;
                    new (arg0: string): _javatypes.java.math.BigInteger;
                    new (arg0: number, arg1: _javatypes.java.util.Random): _javatypes.java.math.BigInteger;
                    new (arg0: number, arg1: number, arg2: _javatypes.java.util.Random): _javatypes.java.math.BigInteger;
                    
                    readonly ZERO: _javatypes.java.math.BigInteger;
                    readonly ONE: _javatypes.java.math.BigInteger;
                    readonly TWO: _javatypes.java.math.BigInteger;
                    readonly TEN: _javatypes.java.math.BigInteger;
                    
                    probablePrime(arg0: number, arg1: _javatypes.java.util.Random): _javatypes.java.math.BigInteger;
                    valueOf(arg0: number): _javatypes.java.math.BigInteger;
                    
                }
            }
            interface MathContext extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                
                getPrecision(): number;
                getRoundingMode(): _javatypes.java.math.RoundingMode;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace MathContext {
                interface static {
                    new (arg0: number): _javatypes.java.math.MathContext;
                    new (arg0: number, arg1: _javatypes.java.math.RoundingMode): _javatypes.java.math.MathContext;
                    new (arg0: string): _javatypes.java.math.MathContext;
                    
                    readonly UNLIMITED: _javatypes.java.math.MathContext;
                    readonly DECIMAL32: _javatypes.java.math.MathContext;
                    readonly DECIMAL64: _javatypes.java.math.MathContext;
                    readonly DECIMAL128: _javatypes.java.math.MathContext;
                    
                    
                }
            }
            interface RoundingMode extends _javatypes.java.lang.Enum<_javatypes.java.math.RoundingMode> {
                
                
            }
            namespace RoundingMode {
                interface static {
                    
                    readonly UP: _javatypes.java.math.RoundingMode;
                    readonly DOWN: _javatypes.java.math.RoundingMode;
                    readonly CEILING: _javatypes.java.math.RoundingMode;
                    readonly FLOOR: _javatypes.java.math.RoundingMode;
                    readonly HALF_UP: _javatypes.java.math.RoundingMode;
                    readonly HALF_DOWN: _javatypes.java.math.RoundingMode;
                    readonly HALF_EVEN: _javatypes.java.math.RoundingMode;
                    readonly UNNECESSARY: _javatypes.java.math.RoundingMode;
                    
                    values(): _javatypes.java.math.RoundingMode[];
                    valueOf(arg0: string): _javatypes.java.math.RoundingMode;
                    valueOf(arg0: number): _javatypes.java.math.RoundingMode;
                    
                }
            }
        }
    
        namespace net {
        
            interface Socket extends _javatypes.java.lang.Object, _javatypes.java.io.Closeable {
                
                connect(arg0: _javatypes.java.net.SocketAddress): void;
                connect(arg0: _javatypes.java.net.SocketAddress, arg1: number): void;
                bind(arg0: _javatypes.java.net.SocketAddress): void;
                getInetAddress(): _javatypes.java.net.InetAddress;
                getLocalAddress(): _javatypes.java.net.InetAddress;
                getPort(): number;
                getLocalPort(): number;
                getRemoteSocketAddress(): _javatypes.java.net.SocketAddress;
                getLocalSocketAddress(): _javatypes.java.net.SocketAddress;
                getChannel(): _javatypes.java.nio.channels.SocketChannel;
                getInputStream(): _javatypes.java.io.InputStream;
                getOutputStream(): _javatypes.java.io.OutputStream;
                setTcpNoDelay(arg0: boolean): void;
                getTcpNoDelay(): boolean;
                setSoLinger(arg0: boolean, arg1: number): void;
                getSoLinger(): number;
                sendUrgentData(arg0: number): void;
                setOOBInline(arg0: boolean): void;
                getOOBInline(): boolean;
                setSoTimeout(arg0: number): void;
                getSoTimeout(): number;
                setSendBufferSize(arg0: number): void;
                getSendBufferSize(): number;
                setReceiveBufferSize(arg0: number): void;
                getReceiveBufferSize(): number;
                setKeepAlive(arg0: boolean): void;
                getKeepAlive(): boolean;
                setTrafficClass(arg0: number): void;
                getTrafficClass(): number;
                setReuseAddress(arg0: boolean): void;
                getReuseAddress(): boolean;
                close(): void;
                shutdownInput(): void;
                shutdownOutput(): void;
                toString(): string;
                isConnected(): boolean;
                isBound(): boolean;
                isClosed(): boolean;
                isInputShutdown(): boolean;
                isOutputShutdown(): boolean;
                setPerformancePreferences(arg0: number, arg1: number, arg2: number): void;
                setOption<T>(arg0: _javatypes.java.net.SocketOption<T>, arg1: T): _javatypes.java.net.Socket;
                getOption<T>(arg0: _javatypes.java.net.SocketOption<T>): T;
                supportedOptions(): _javatypes.java.util.Set<_javatypes.java.net.SocketOption<any>>;
                
            }
            namespace Socket {
                interface static {
                    new (): _javatypes.java.net.Socket;
                    new (arg0: _javatypes.java.net.Proxy): _javatypes.java.net.Socket;
                    new (arg0: string, arg1: number): _javatypes.java.net.Socket;
                    new (arg0: _javatypes.java.net.InetAddress, arg1: number): _javatypes.java.net.Socket;
                    new (arg0: string, arg1: number, arg2: _javatypes.java.net.InetAddress, arg3: number): _javatypes.java.net.Socket;
                    new (arg0: _javatypes.java.net.InetAddress, arg1: number, arg2: _javatypes.java.net.InetAddress, arg3: number): _javatypes.java.net.Socket;
                    new (arg0: string, arg1: number, arg2: boolean): _javatypes.java.net.Socket;
                    new (arg0: _javatypes.java.net.InetAddress, arg1: number, arg2: boolean): _javatypes.java.net.Socket;
                    
                    
                    setSocketImplFactory(arg0: _javatypes.java.net.SocketImplFactory): void;
                    
                }
            }
            interface SocketAddress extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                
                
            }
            namespace SocketAddress {
                interface static {
                    new (): _javatypes.java.net.SocketAddress;
                    
                    
                    
                }
            }
            interface SocketOption<T> extends _javatypes.java.lang.Interface {
                
                name(): string;
                type(): _javatypes.java.lang.Class<T>;
                
            }
            namespace SocketOption {
                interface static {
                    
                    
                    
                }
            }
            interface SocketImplFactory extends _javatypes.java.lang.Interface {
                
                createSocketImpl(): _javatypes.java.net.SocketImpl;
                
            }
            namespace SocketImplFactory {
                interface static {
                    
                    
                    
                }
            }
            interface InetAddress extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                
                isMulticastAddress(): boolean;
                isAnyLocalAddress(): boolean;
                isLoopbackAddress(): boolean;
                isLinkLocalAddress(): boolean;
                isSiteLocalAddress(): boolean;
                isMCGlobal(): boolean;
                isMCNodeLocal(): boolean;
                isMCLinkLocal(): boolean;
                isMCSiteLocal(): boolean;
                isMCOrgLocal(): boolean;
                isReachable(arg0: number): boolean;
                isReachable(arg0: _javatypes.java.net.NetworkInterface, arg1: number, arg2: number): boolean;
                getHostName(): string;
                getCanonicalHostName(): string;
                getAddress(): number[];
                getHostAddress(): string;
                hashCode(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                toString(): string;
                
            }
            namespace InetAddress {
                interface static {
                    
                    
                    getByAddress(arg0: string, arg1: number[]): _javatypes.java.net.InetAddress;
                    getByName(arg0: string): _javatypes.java.net.InetAddress;
                    getAllByName(arg0: string): _javatypes.java.net.InetAddress[];
                    getLoopbackAddress(): _javatypes.java.net.InetAddress;
                    getByAddress(arg0: number[]): _javatypes.java.net.InetAddress;
                    getLocalHost(): _javatypes.java.net.InetAddress;
                    
                }
            }
            interface Proxy extends _javatypes.java.lang.Object {
                
                type(): _javatypes.java.net.Proxy$Type;
                address(): _javatypes.java.net.SocketAddress;
                toString(): string;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                
            }
            namespace Proxy {
                interface static {
                    new (arg0: _javatypes.java.net.Proxy$Type, arg1: _javatypes.java.net.SocketAddress): _javatypes.java.net.Proxy;
                    
                    readonly NO_PROXY: _javatypes.java.net.Proxy;
                    
                    
                }
            }
            interface Proxy$Type extends _javatypes.java.lang.Enum<_javatypes.java.net.Proxy$Type> {
                
                
            }
            namespace Proxy$Type {
                interface static {
                    
                    readonly DIRECT: _javatypes.java.net.Proxy$Type;
                    readonly HTTP: _javatypes.java.net.Proxy$Type;
                    readonly SOCKS: _javatypes.java.net.Proxy$Type;
                    
                    values(): _javatypes.java.net.Proxy$Type[];
                    valueOf(arg0: string): _javatypes.java.net.Proxy$Type;
                    
                }
            }
            interface SocketImpl extends _javatypes.java.lang.Object, _javatypes.java.net.SocketOptions {
                
                toString(): string;
                
            }
            namespace SocketImpl {
                interface static {
                    new (): _javatypes.java.net.SocketImpl;
                    
                    
                    
                }
            }
            interface NetworkInterface extends _javatypes.java.lang.Object {
                
                getName(): string;
                getInetAddresses(): _javatypes.java.util.Enumeration<_javatypes.java.net.InetAddress>;
                inetAddresses(): _javatypes.java.util.stream.Stream<_javatypes.java.net.InetAddress>;
                getInterfaceAddresses(): _javatypes.java.util.List<_javatypes.java.net.InterfaceAddress>;
                getSubInterfaces(): _javatypes.java.util.Enumeration<_javatypes.java.net.NetworkInterface>;
                subInterfaces(): _javatypes.java.util.stream.Stream<_javatypes.java.net.NetworkInterface>;
                getParent(): _javatypes.java.net.NetworkInterface;
                getIndex(): number;
                getDisplayName(): string;
                isUp(): boolean;
                isLoopback(): boolean;
                isPointToPoint(): boolean;
                supportsMulticast(): boolean;
                getHardwareAddress(): number[];
                getMTU(): number;
                isVirtual(): boolean;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace NetworkInterface {
                interface static {
                    
                    
                    getByName(arg0: string): _javatypes.java.net.NetworkInterface;
                    getByIndex(arg0: number): _javatypes.java.net.NetworkInterface;
                    getByInetAddress(arg0: _javatypes.java.net.InetAddress): _javatypes.java.net.NetworkInterface;
                    getNetworkInterfaces(): _javatypes.java.util.Enumeration<_javatypes.java.net.NetworkInterface>;
                    networkInterfaces(): _javatypes.java.util.stream.Stream<_javatypes.java.net.NetworkInterface>;
                    
                }
            }
            interface InterfaceAddress extends _javatypes.java.lang.Object {
                
                getAddress(): _javatypes.java.net.InetAddress;
                getBroadcast(): _javatypes.java.net.InetAddress;
                getNetworkPrefixLength(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace InterfaceAddress {
                interface static {
                    
                    
                    
                }
            }
            interface SocketOptions extends _javatypes.java.lang.Interface {
                
                setOption(arg0: number, arg1: _javatypes.java.lang.Object): void;
                getOption(arg0: number): _javatypes.java.lang.Object;
                
            }
            namespace SocketOptions {
                interface static {
                    
                    readonly TCP_NODELAY: number;
                    readonly SO_BINDADDR: number;
                    readonly SO_REUSEADDR: number;
                    readonly SO_REUSEPORT: number;
                    readonly SO_BROADCAST: number;
                    readonly IP_MULTICAST_IF: number;
                    readonly IP_MULTICAST_IF2: number;
                    readonly IP_MULTICAST_LOOP: number;
                    readonly IP_TOS: number;
                    readonly SO_LINGER: number;
                    readonly SO_TIMEOUT: number;
                    readonly SO_SNDBUF: number;
                    readonly SO_RCVBUF: number;
                    readonly SO_KEEPALIVE: number;
                    readonly SO_OOBINLINE: number;
                    
                    
                }
            }
            interface ServerSocket extends _javatypes.java.lang.Object, _javatypes.java.io.Closeable {
                
                bind(arg0: _javatypes.java.net.SocketAddress): void;
                bind(arg0: _javatypes.java.net.SocketAddress, arg1: number): void;
                getInetAddress(): _javatypes.java.net.InetAddress;
                getLocalPort(): number;
                getLocalSocketAddress(): _javatypes.java.net.SocketAddress;
                accept(): _javatypes.java.net.Socket;
                close(): void;
                getChannel(): _javatypes.java.nio.channels.ServerSocketChannel;
                isBound(): boolean;
                isClosed(): boolean;
                setSoTimeout(arg0: number): void;
                getSoTimeout(): number;
                setReuseAddress(arg0: boolean): void;
                getReuseAddress(): boolean;
                toString(): string;
                setReceiveBufferSize(arg0: number): void;
                getReceiveBufferSize(): number;
                setPerformancePreferences(arg0: number, arg1: number, arg2: number): void;
                setOption<T>(arg0: _javatypes.java.net.SocketOption<T>, arg1: T): _javatypes.java.net.ServerSocket;
                getOption<T>(arg0: _javatypes.java.net.SocketOption<T>): T;
                supportedOptions(): _javatypes.java.util.Set<_javatypes.java.net.SocketOption<any>>;
                
            }
            namespace ServerSocket {
                interface static {
                    new (): _javatypes.java.net.ServerSocket;
                    new (arg0: number): _javatypes.java.net.ServerSocket;
                    new (arg0: number, arg1: number): _javatypes.java.net.ServerSocket;
                    new (arg0: number, arg1: number, arg2: _javatypes.java.net.InetAddress): _javatypes.java.net.ServerSocket;
                    
                    
                    setSocketFactory(arg0: _javatypes.java.net.SocketImplFactory): void;
                    
                }
            }
            interface ProtocolFamily extends _javatypes.java.lang.Interface {
                
                name(): string;
                
            }
            namespace ProtocolFamily {
                interface static {
                    
                    
                    
                }
            }
            interface DatagramSocket extends _javatypes.java.lang.Object, _javatypes.java.io.Closeable {
                
                bind(arg0: _javatypes.java.net.SocketAddress): void;
                connect(arg0: _javatypes.java.net.InetAddress, arg1: number): void;
                connect(arg0: _javatypes.java.net.SocketAddress): void;
                disconnect(): void;
                isBound(): boolean;
                isConnected(): boolean;
                getInetAddress(): _javatypes.java.net.InetAddress;
                getPort(): number;
                getRemoteSocketAddress(): _javatypes.java.net.SocketAddress;
                getLocalSocketAddress(): _javatypes.java.net.SocketAddress;
                send(arg0: _javatypes.java.net.DatagramPacket): void;
                receive(arg0: _javatypes.java.net.DatagramPacket): void;
                getLocalAddress(): _javatypes.java.net.InetAddress;
                getLocalPort(): number;
                setSoTimeout(arg0: number): void;
                getSoTimeout(): number;
                setSendBufferSize(arg0: number): void;
                getSendBufferSize(): number;
                setReceiveBufferSize(arg0: number): void;
                getReceiveBufferSize(): number;
                setReuseAddress(arg0: boolean): void;
                getReuseAddress(): boolean;
                setBroadcast(arg0: boolean): void;
                getBroadcast(): boolean;
                setTrafficClass(arg0: number): void;
                getTrafficClass(): number;
                close(): void;
                isClosed(): boolean;
                getChannel(): _javatypes.java.nio.channels.DatagramChannel;
                setOption<T>(arg0: _javatypes.java.net.SocketOption<T>, arg1: T): _javatypes.java.net.DatagramSocket;
                getOption<T>(arg0: _javatypes.java.net.SocketOption<T>): T;
                supportedOptions(): _javatypes.java.util.Set<_javatypes.java.net.SocketOption<any>>;
                joinGroup(arg0: _javatypes.java.net.SocketAddress, arg1: _javatypes.java.net.NetworkInterface): void;
                leaveGroup(arg0: _javatypes.java.net.SocketAddress, arg1: _javatypes.java.net.NetworkInterface): void;
                
            }
            namespace DatagramSocket {
                interface static {
                    new (): _javatypes.java.net.DatagramSocket;
                    new (arg0: _javatypes.java.net.SocketAddress): _javatypes.java.net.DatagramSocket;
                    new (arg0: number): _javatypes.java.net.DatagramSocket;
                    new (arg0: number, arg1: _javatypes.java.net.InetAddress): _javatypes.java.net.DatagramSocket;
                    
                    
                    setDatagramSocketImplFactory(arg0: _javatypes.java.net.DatagramSocketImplFactory): void;
                    
                }
            }
            interface DatagramSocketImplFactory extends _javatypes.java.lang.Interface {
                
                createDatagramSocketImpl(): _javatypes.java.net.DatagramSocketImpl;
                
            }
            namespace DatagramSocketImplFactory {
                interface static {
                    
                    
                    
                }
            }
            interface DatagramPacket extends _javatypes.java.lang.Object {
                
                getAddress(): _javatypes.java.net.InetAddress;
                getPort(): number;
                getData(): number[];
                getOffset(): number;
                getLength(): number;
                setData(arg0: number[], arg1: number, arg2: number): void;
                setAddress(arg0: _javatypes.java.net.InetAddress): void;
                setPort(arg0: number): void;
                setSocketAddress(arg0: _javatypes.java.net.SocketAddress): void;
                getSocketAddress(): _javatypes.java.net.SocketAddress;
                setData(arg0: number[]): void;
                setLength(arg0: number): void;
                
            }
            namespace DatagramPacket {
                interface static {
                    new (arg0: number[], arg1: number, arg2: number): _javatypes.java.net.DatagramPacket;
                    new (arg0: number[], arg1: number): _javatypes.java.net.DatagramPacket;
                    new (arg0: number[], arg1: number, arg2: number, arg3: _javatypes.java.net.InetAddress, arg4: number): _javatypes.java.net.DatagramPacket;
                    new (arg0: number[], arg1: number, arg2: number, arg3: _javatypes.java.net.SocketAddress): _javatypes.java.net.DatagramPacket;
                    new (arg0: number[], arg1: number, arg2: _javatypes.java.net.InetAddress, arg3: number): _javatypes.java.net.DatagramPacket;
                    new (arg0: number[], arg1: number, arg2: _javatypes.java.net.SocketAddress): _javatypes.java.net.DatagramPacket;
                    
                    
                    
                }
            }
            interface DatagramSocketImpl extends _javatypes.java.lang.Object, _javatypes.java.net.SocketOptions {
                
                
            }
            namespace DatagramSocketImpl {
                interface static {
                    new (): _javatypes.java.net.DatagramSocketImpl;
                    
                    
                    
                }
            }
        }
    
        namespace text {
        
            interface ParsePosition extends _javatypes.java.lang.Object {
                
                getIndex(): number;
                setIndex(arg0: number): void;
                setErrorIndex(arg0: number): void;
                getErrorIndex(): number;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace ParsePosition {
                interface static {
                    new (arg0: number): _javatypes.java.text.ParsePosition;
                    
                    
                    
                }
            }
            interface Format extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable, _javatypes.java.lang.Cloneable {
                
                format(arg0: _javatypes.java.lang.Object): string;
                format(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.StringBuffer, arg2: _javatypes.java.text.FieldPosition): _javatypes.java.lang.StringBuffer;
                formatToCharacterIterator(arg0: _javatypes.java.lang.Object): _javatypes.java.text.AttributedCharacterIterator;
                parseObject(arg0: string, arg1: _javatypes.java.text.ParsePosition): _javatypes.java.lang.Object;
                parseObject(arg0: string): _javatypes.java.lang.Object;
                clone(): _javatypes.java.lang.Object;
                
            }
            namespace Format {
                interface static {
                    
                    
                    
                }
            }
            interface AttributedCharacterIterator extends _javatypes.java.lang.Interface, _javatypes.java.text.CharacterIterator {
                
                getRunStart(): number;
                getRunStart(arg0: _javatypes.java.text.AttributedCharacterIterator$Attribute): number;
                getRunStart(arg0: _javatypes.java.util.Set<any>): number;
                getRunLimit(): number;
                getRunLimit(arg0: _javatypes.java.text.AttributedCharacterIterator$Attribute): number;
                getRunLimit(arg0: _javatypes.java.util.Set<any>): number;
                getAttributes(): _javatypes.java.util.Map<_javatypes.java.text.AttributedCharacterIterator$Attribute, _javatypes.java.lang.Object>;
                getAttribute(arg0: _javatypes.java.text.AttributedCharacterIterator$Attribute): _javatypes.java.lang.Object;
                getAllAttributeKeys(): _javatypes.java.util.Set<_javatypes.java.text.AttributedCharacterIterator$Attribute>;
                
            }
            namespace AttributedCharacterIterator {
                interface static {
                    
                    
                    
                }
            }
            interface FieldPosition extends _javatypes.java.lang.Object {
                
                getFieldAttribute(): _javatypes.java.text.Format$Field;
                getField(): number;
                getBeginIndex(): number;
                getEndIndex(): number;
                setBeginIndex(arg0: number): void;
                setEndIndex(arg0: number): void;
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace FieldPosition {
                interface static {
                    new (arg0: number): _javatypes.java.text.FieldPosition;
                    new (arg0: _javatypes.java.text.Format$Field): _javatypes.java.text.FieldPosition;
                    new (arg0: _javatypes.java.text.Format$Field, arg1: number): _javatypes.java.text.FieldPosition;
                    
                    
                    
                }
            }
            interface CharacterIterator extends _javatypes.java.lang.Interface, _javatypes.java.lang.Cloneable {
                
                first(): number;
                last(): number;
                current(): number;
                next(): number;
                previous(): number;
                setIndex(arg0: number): number;
                getBeginIndex(): number;
                getEndIndex(): number;
                getIndex(): number;
                clone(): _javatypes.java.lang.Object;
                
            }
            namespace CharacterIterator {
                interface static {
                    
                    readonly DONE: number;
                    
                    
                }
            }
            interface Format$Field extends _javatypes.java.text.AttributedCharacterIterator$Attribute {
                
                
            }
            namespace Format$Field {
                interface static {
                    
                    
                    
                }
            }
            interface AttributedCharacterIterator$Attribute extends _javatypes.java.lang.Object, _javatypes.java.io.Serializable {
                
                equals(arg0: _javatypes.java.lang.Object): boolean;
                hashCode(): number;
                toString(): string;
                
            }
            namespace AttributedCharacterIterator$Attribute {
                interface static {
                    
                    readonly LANGUAGE: _javatypes.java.text.AttributedCharacterIterator$Attribute;
                    readonly READING: _javatypes.java.text.AttributedCharacterIterator$Attribute;
                    readonly INPUT_METHOD_SEGMENT: _javatypes.java.text.AttributedCharacterIterator$Attribute;
                    
                    
                }
            }
        }
    }

    namespace org.slf4j {
    
        interface Logger extends _javatypes.java.lang.Interface {
            
            getName(): string;
            isTraceEnabled(): boolean;
            trace(arg0: string): void;
            trace(arg0: string, arg1: _javatypes.java.lang.Object): void;
            trace(arg0: string, arg1: _javatypes.java.lang.Object, arg2: _javatypes.java.lang.Object): void;
            trace(arg0: string, arg1: _javatypes.java.lang.Object[]): void;
            trace(arg0: string, arg1: _javatypes.java.lang.Throwable): void;
            isTraceEnabled(arg0: _javatypes.org.slf4j.Marker): boolean;
            trace(arg0: _javatypes.org.slf4j.Marker, arg1: string): void;
            trace(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object): void;
            trace(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object, arg3: _javatypes.java.lang.Object): void;
            trace(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object[]): void;
            trace(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Throwable): void;
            isDebugEnabled(): boolean;
            debug(arg0: string): void;
            debug(arg0: string, arg1: _javatypes.java.lang.Object): void;
            debug(arg0: string, arg1: _javatypes.java.lang.Object, arg2: _javatypes.java.lang.Object): void;
            debug(arg0: string, arg1: _javatypes.java.lang.Object[]): void;
            debug(arg0: string, arg1: _javatypes.java.lang.Throwable): void;
            isDebugEnabled(arg0: _javatypes.org.slf4j.Marker): boolean;
            debug(arg0: _javatypes.org.slf4j.Marker, arg1: string): void;
            debug(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object): void;
            debug(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object, arg3: _javatypes.java.lang.Object): void;
            debug(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object[]): void;
            debug(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Throwable): void;
            isInfoEnabled(): boolean;
            info(arg0: string): void;
            info(arg0: string, arg1: _javatypes.java.lang.Object): void;
            info(arg0: string, arg1: _javatypes.java.lang.Object, arg2: _javatypes.java.lang.Object): void;
            info(arg0: string, arg1: _javatypes.java.lang.Object[]): void;
            info(arg0: string, arg1: _javatypes.java.lang.Throwable): void;
            isInfoEnabled(arg0: _javatypes.org.slf4j.Marker): boolean;
            info(arg0: _javatypes.org.slf4j.Marker, arg1: string): void;
            info(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object): void;
            info(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object, arg3: _javatypes.java.lang.Object): void;
            info(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object[]): void;
            info(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Throwable): void;
            isWarnEnabled(): boolean;
            warn(arg0: string): void;
            warn(arg0: string, arg1: _javatypes.java.lang.Object): void;
            warn(arg0: string, arg1: _javatypes.java.lang.Object[]): void;
            warn(arg0: string, arg1: _javatypes.java.lang.Object, arg2: _javatypes.java.lang.Object): void;
            warn(arg0: string, arg1: _javatypes.java.lang.Throwable): void;
            isWarnEnabled(arg0: _javatypes.org.slf4j.Marker): boolean;
            warn(arg0: _javatypes.org.slf4j.Marker, arg1: string): void;
            warn(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object): void;
            warn(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object, arg3: _javatypes.java.lang.Object): void;
            warn(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object[]): void;
            warn(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Throwable): void;
            isErrorEnabled(): boolean;
            error(arg0: string): void;
            error(arg0: string, arg1: _javatypes.java.lang.Object): void;
            error(arg0: string, arg1: _javatypes.java.lang.Object, arg2: _javatypes.java.lang.Object): void;
            error(arg0: string, arg1: _javatypes.java.lang.Object[]): void;
            error(arg0: string, arg1: _javatypes.java.lang.Throwable): void;
            isErrorEnabled(arg0: _javatypes.org.slf4j.Marker): boolean;
            error(arg0: _javatypes.org.slf4j.Marker, arg1: string): void;
            error(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object): void;
            error(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object, arg3: _javatypes.java.lang.Object): void;
            error(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Object[]): void;
            error(arg0: _javatypes.org.slf4j.Marker, arg1: string, arg2: _javatypes.java.lang.Throwable): void;
            
        }
        namespace Logger {
            interface static {
                
                readonly ROOT_LOGGER_NAME: string;
                
                
            }
        }
        interface Marker extends _javatypes.java.lang.Interface, _javatypes.java.io.Serializable {
            
            getName(): string;
            add(arg0: _javatypes.org.slf4j.Marker): void;
            remove(arg0: _javatypes.org.slf4j.Marker): boolean;
            hasChildren(): boolean;
            hasReferences(): boolean;
            iterator(): _javatypes.java.util.Iterator<_javatypes.org.slf4j.Marker>;
            contains(arg0: _javatypes.org.slf4j.Marker): boolean;
            contains(arg0: string): boolean;
            equals(arg0: _javatypes.java.lang.Object): boolean;
            hashCode(): number;
            
        }
        namespace Marker {
            interface static {
                
                readonly ANY_MARKER: string;
                readonly ANY_NON_NULL_MARKER: string;
                
                
            }
        }
    }

    namespace javassist {
    
        interface CtField$Initializer extends _javatypes.java.lang.Object {
            
            
        }
        namespace CtField$Initializer {
            interface static {
                new (): _javatypes.javassist.CtField$Initializer;
                
                
                constant(arg0: number): _javatypes.javassist.CtField$Initializer;
                constant(arg0: boolean): _javatypes.javassist.CtField$Initializer;
                constant(arg0: number): _javatypes.javassist.CtField$Initializer;
                constant(arg0: number): _javatypes.javassist.CtField$Initializer;
                constant(arg0: number): _javatypes.javassist.CtField$Initializer;
                constant(arg0: string): _javatypes.javassist.CtField$Initializer;
                byParameter(arg0: number): _javatypes.javassist.CtField$Initializer;
                byNew(arg0: _javatypes.javassist.CtClass): _javatypes.javassist.CtField$Initializer;
                byNew(arg0: _javatypes.javassist.CtClass, arg1: string[]): _javatypes.javassist.CtField$Initializer;
                byNewWithParams(arg0: _javatypes.javassist.CtClass): _javatypes.javassist.CtField$Initializer;
                byNewWithParams(arg0: _javatypes.javassist.CtClass, arg1: string[]): _javatypes.javassist.CtField$Initializer;
                byCall(arg0: _javatypes.javassist.CtClass, arg1: string): _javatypes.javassist.CtField$Initializer;
                byCall(arg0: _javatypes.javassist.CtClass, arg1: string, arg2: string[]): _javatypes.javassist.CtField$Initializer;
                byCallWithParams(arg0: _javatypes.javassist.CtClass, arg1: string): _javatypes.javassist.CtField$Initializer;
                byCallWithParams(arg0: _javatypes.javassist.CtClass, arg1: string, arg2: string[]): _javatypes.javassist.CtField$Initializer;
                byNewArray(arg0: _javatypes.javassist.CtClass, arg1: number): _javatypes.javassist.CtField$Initializer;
                byNewArray(arg0: _javatypes.javassist.CtClass, arg1: number[]): _javatypes.javassist.CtField$Initializer;
                byExpr(arg0: string): _javatypes.javassist.CtField$Initializer;
                
            }
        }
        interface CtBehavior extends _javatypes.javassist.CtMember {
            
            getLongName(): string;
            getMethodInfo(): _javatypes.javassist.bytecode.MethodInfo;
            getMethodInfo2(): _javatypes.javassist.bytecode.MethodInfo;
            getModifiers(): number;
            setModifiers(arg0: number): void;
            hasAnnotation(arg0: string): boolean;
            getAnnotation(arg0: _javatypes.java.lang.Class<any>): _javatypes.java.lang.Object;
            getAnnotations(): _javatypes.java.lang.Object[];
            getAvailableAnnotations(): _javatypes.java.lang.Object[];
            getParameterAnnotations(): _javatypes.java.lang.Object[][];
            getAvailableParameterAnnotations(): _javatypes.java.lang.Object[][];
            getParameterTypes(): _javatypes.javassist.CtClass[];
            getSignature(): string;
            getGenericSignature(): string;
            setGenericSignature(arg0: string): void;
            getExceptionTypes(): _javatypes.javassist.CtClass[];
            setExceptionTypes(arg0: _javatypes.javassist.CtClass[]): void;
            isEmpty(): boolean;
            setBody(arg0: string): void;
            setBody(arg0: string, arg1: string, arg2: string): void;
            getAttribute(arg0: string): number[];
            setAttribute(arg0: string, arg1: number[]): void;
            useCflow(arg0: string): void;
            addLocalVariable(arg0: string, arg1: _javatypes.javassist.CtClass): void;
            insertParameter(arg0: _javatypes.javassist.CtClass): void;
            addParameter(arg0: _javatypes.javassist.CtClass): void;
            instrument(arg0: _javatypes.javassist.CodeConverter): void;
            instrument(arg0: _javatypes.javassist.expr.ExprEditor): void;
            insertBefore(arg0: string): void;
            insertAfter(arg0: string): void;
            insertAfter(arg0: string, arg1: boolean): void;
            insertAfter(arg0: string, arg1: boolean, arg2: boolean): void;
            addCatch(arg0: string, arg1: _javatypes.javassist.CtClass): void;
            addCatch(arg0: string, arg1: _javatypes.javassist.CtClass, arg2: string): void;
            insertAt(arg0: number, arg1: string): number;
            insertAt(arg0: number, arg1: boolean, arg2: string): number;
            
        }
        namespace CtBehavior {
            interface static {
                
                
                
            }
        }
        interface CtClass extends _javatypes.java.lang.Object {
            
            toString(): string;
            getClassPool(): _javatypes.javassist.ClassPool;
            getClassFile(): _javatypes.javassist.bytecode.ClassFile;
            getClassFile2(): _javatypes.javassist.bytecode.ClassFile;
            getAccessorMaker(): _javatypes.javassist.compiler.AccessorMaker;
            getURL(): _javatypes.java.net.URL;
            isModified(): boolean;
            isFrozen(): boolean;
            freeze(): void;
            defrost(): void;
            isPrimitive(): boolean;
            isArray(): boolean;
            isKotlin(): boolean;
            getComponentType(): _javatypes.javassist.CtClass;
            subtypeOf(arg0: _javatypes.javassist.CtClass): boolean;
            getName(): string;
            getSimpleName(): string;
            getPackageName(): string;
            setName(arg0: string): void;
            getGenericSignature(): string;
            setGenericSignature(arg0: string): void;
            replaceClassName(arg0: string, arg1: string): void;
            replaceClassName(arg0: _javatypes.javassist.ClassMap): void;
            getRefClasses(): _javatypes.java.util.Collection<string>;
            isInterface(): boolean;
            isAnnotation(): boolean;
            isEnum(): boolean;
            getModifiers(): number;
            hasAnnotation(arg0: _javatypes.java.lang.Class<any>): boolean;
            hasAnnotation(arg0: string): boolean;
            getAnnotation(arg0: _javatypes.java.lang.Class<any>): _javatypes.java.lang.Object;
            getAnnotations(): _javatypes.java.lang.Object[];
            getAvailableAnnotations(): _javatypes.java.lang.Object[];
            getDeclaredClasses(): _javatypes.javassist.CtClass[];
            getNestedClasses(): _javatypes.javassist.CtClass[];
            setModifiers(arg0: number): void;
            subclassOf(arg0: _javatypes.javassist.CtClass): boolean;
            getSuperclass(): _javatypes.javassist.CtClass;
            setSuperclass(arg0: _javatypes.javassist.CtClass): void;
            getInterfaces(): _javatypes.javassist.CtClass[];
            setInterfaces(arg0: _javatypes.javassist.CtClass[]): void;
            addInterface(arg0: _javatypes.javassist.CtClass): void;
            getDeclaringClass(): _javatypes.javassist.CtClass;
            getEnclosingMethod(): _javatypes.javassist.CtMethod;
            getEnclosingBehavior(): _javatypes.javassist.CtBehavior;
            makeNestedClass(arg0: string, arg1: boolean): _javatypes.javassist.CtClass;
            getFields(): _javatypes.javassist.CtField[];
            getField(arg0: string): _javatypes.javassist.CtField;
            getField(arg0: string, arg1: string): _javatypes.javassist.CtField;
            getDeclaredFields(): _javatypes.javassist.CtField[];
            getDeclaredField(arg0: string): _javatypes.javassist.CtField;
            getDeclaredField(arg0: string, arg1: string): _javatypes.javassist.CtField;
            getDeclaredBehaviors(): _javatypes.javassist.CtBehavior[];
            getConstructors(): _javatypes.javassist.CtConstructor[];
            getConstructor(arg0: string): _javatypes.javassist.CtConstructor;
            getDeclaredConstructors(): _javatypes.javassist.CtConstructor[];
            getDeclaredConstructor(arg0: _javatypes.javassist.CtClass[]): _javatypes.javassist.CtConstructor;
            getClassInitializer(): _javatypes.javassist.CtConstructor;
            getMethods(): _javatypes.javassist.CtMethod[];
            getMethod(arg0: string, arg1: string): _javatypes.javassist.CtMethod;
            getDeclaredMethods(): _javatypes.javassist.CtMethod[];
            getDeclaredMethod(arg0: string, arg1: _javatypes.javassist.CtClass[]): _javatypes.javassist.CtMethod;
            getDeclaredMethods(arg0: string): _javatypes.javassist.CtMethod[];
            getDeclaredMethod(arg0: string): _javatypes.javassist.CtMethod;
            makeClassInitializer(): _javatypes.javassist.CtConstructor;
            addConstructor(arg0: _javatypes.javassist.CtConstructor): void;
            removeConstructor(arg0: _javatypes.javassist.CtConstructor): void;
            addMethod(arg0: _javatypes.javassist.CtMethod): void;
            removeMethod(arg0: _javatypes.javassist.CtMethod): void;
            addField(arg0: _javatypes.javassist.CtField): void;
            addField(arg0: _javatypes.javassist.CtField, arg1: string): void;
            addField(arg0: _javatypes.javassist.CtField, arg1: _javatypes.javassist.CtField$Initializer): void;
            removeField(arg0: _javatypes.javassist.CtField): void;
            getAttribute(arg0: string): number[];
            setAttribute(arg0: string, arg1: number[]): void;
            instrument(arg0: _javatypes.javassist.CodeConverter): void;
            instrument(arg0: _javatypes.javassist.expr.ExprEditor): void;
            toClass(): _javatypes.java.lang.Class<any>;
            toClass(arg0: _javatypes.java.lang.Class<any>): _javatypes.java.lang.Class<any>;
            toClass(arg0: _javatypes.java.lang.invoke.MethodHandles$Lookup): _javatypes.java.lang.Class<any>;
            toClass(arg0: _javatypes.java.lang.ClassLoader, arg1: _javatypes.java.security.ProtectionDomain): _javatypes.java.lang.Class<any>;
            toClass(arg0: _javatypes.java.lang.ClassLoader): _javatypes.java.lang.Class<any>;
            detach(): void;
            stopPruning(arg0: boolean): boolean;
            prune(): void;
            rebuildClassFile(): void;
            toBytecode(): number[];
            writeFile(): void;
            writeFile(arg0: string): void;
            debugWriteFile(): void;
            debugWriteFile(arg0: string): void;
            toBytecode(arg0: _javatypes.java.io.DataOutputStream): void;
            makeUniqueName(arg0: string): string;
            
        }
        namespace CtClass {
            interface static {
                
                debugDump: string;
                readonly version: string;
                booleanType: _javatypes.javassist.CtClass;
                charType: _javatypes.javassist.CtClass;
                byteType: _javatypes.javassist.CtClass;
                shortType: _javatypes.javassist.CtClass;
                intType: _javatypes.javassist.CtClass;
                longType: _javatypes.javassist.CtClass;
                floatType: _javatypes.javassist.CtClass;
                doubleType: _javatypes.javassist.CtClass;
                voidType: _javatypes.javassist.CtClass;
                
                main(arg0: string[]): void;
                
            }
        }
        interface CodeConverter extends _javatypes.java.lang.Object {
            
            replaceNew(arg0: _javatypes.javassist.CtClass, arg1: _javatypes.javassist.CtClass, arg2: string): void;
            replaceNew(arg0: _javatypes.javassist.CtClass, arg1: _javatypes.javassist.CtClass): void;
            redirectFieldAccess(arg0: _javatypes.javassist.CtField, arg1: _javatypes.javassist.CtClass, arg2: string): void;
            replaceFieldRead(arg0: _javatypes.javassist.CtField, arg1: _javatypes.javassist.CtClass, arg2: string): void;
            replaceFieldWrite(arg0: _javatypes.javassist.CtField, arg1: _javatypes.javassist.CtClass, arg2: string): void;
            replaceArrayAccess(arg0: _javatypes.javassist.CtClass, arg1: _javatypes.javassist.CodeConverter$ArrayAccessReplacementMethodNames): void;
            redirectMethodCall(arg0: _javatypes.javassist.CtMethod, arg1: _javatypes.javassist.CtMethod): void;
            redirectMethodCall(arg0: string, arg1: _javatypes.javassist.CtMethod): void;
            redirectMethodCallToStatic(arg0: _javatypes.javassist.CtMethod, arg1: _javatypes.javassist.CtMethod): void;
            insertBeforeMethod(arg0: _javatypes.javassist.CtMethod, arg1: _javatypes.javassist.CtMethod): void;
            insertAfterMethod(arg0: _javatypes.javassist.CtMethod, arg1: _javatypes.javassist.CtMethod): void;
            
        }
        namespace CodeConverter {
            interface static {
                new (): _javatypes.javassist.CodeConverter;
                
                
                
            }
        }
        interface ClassMap extends _javatypes.java.util.HashMap<string, string> {
            
            put(arg0: _javatypes.javassist.CtClass, arg1: _javatypes.javassist.CtClass): void;
            put(arg0: string, arg1: string): string;
            putIfNone(arg0: string, arg1: string): void;
            get(arg0: _javatypes.java.lang.Object): string;
            fix(arg0: _javatypes.javassist.CtClass): void;
            fix(arg0: string): void;
            
        }
        namespace ClassMap {
            interface static {
                new (): _javatypes.javassist.ClassMap;
                
                
                toJvmName(arg0: string): string;
                toJavaName(arg0: string): string;
                
            }
        }
        interface CtField extends _javatypes.javassist.CtMember {
            
            toString(): string;
            getFieldInfo(): _javatypes.javassist.bytecode.FieldInfo;
            getFieldInfo2(): _javatypes.javassist.bytecode.FieldInfo;
            getDeclaringClass(): _javatypes.javassist.CtClass;
            getName(): string;
            setName(arg0: string): void;
            getModifiers(): number;
            setModifiers(arg0: number): void;
            hasAnnotation(arg0: string): boolean;
            getAnnotation(arg0: _javatypes.java.lang.Class<any>): _javatypes.java.lang.Object;
            getAnnotations(): _javatypes.java.lang.Object[];
            getAvailableAnnotations(): _javatypes.java.lang.Object[];
            getSignature(): string;
            getGenericSignature(): string;
            setGenericSignature(arg0: string): void;
            getType(): _javatypes.javassist.CtClass;
            setType(arg0: _javatypes.javassist.CtClass): void;
            getConstantValue(): _javatypes.java.lang.Object;
            getAttribute(arg0: string): number[];
            setAttribute(arg0: string, arg1: number[]): void;
            
        }
        namespace CtField {
            interface static {
                new (arg0: _javatypes.javassist.CtClass, arg1: string, arg2: _javatypes.javassist.CtClass): _javatypes.javassist.CtField;
                new (arg0: _javatypes.javassist.CtField, arg1: _javatypes.javassist.CtClass): _javatypes.javassist.CtField;
                
                
                make(arg0: string, arg1: _javatypes.javassist.CtClass): _javatypes.javassist.CtField;
                
            }
        }
        interface ClassPool extends _javatypes.java.lang.Object {
            childFirstLookup: boolean;
            
            toString(): string;
            importPackage(arg0: string): void;
            clearImportedPackages(): void;
            getImportedPackages(): _javatypes.java.util.Iterator<string>;
            recordInvalidClassName(arg0: string): void;
            lookupCflow(arg0: string): _javatypes.java.lang.Object[];
            getAndRename(arg0: string, arg1: string): _javatypes.javassist.CtClass;
            get(arg0: string): _javatypes.javassist.CtClass;
            getOrNull(arg0: string): _javatypes.javassist.CtClass;
            getCtClass(arg0: string): _javatypes.javassist.CtClass;
            find(arg0: string): _javatypes.java.net.URL;
            get(arg0: string[]): _javatypes.javassist.CtClass[];
            getMethod(arg0: string, arg1: string): _javatypes.javassist.CtMethod;
            makeClass(arg0: _javatypes.java.io.InputStream): _javatypes.javassist.CtClass;
            makeClass(arg0: _javatypes.java.io.InputStream, arg1: boolean): _javatypes.javassist.CtClass;
            makeClass(arg0: _javatypes.javassist.bytecode.ClassFile): _javatypes.javassist.CtClass;
            makeClass(arg0: _javatypes.javassist.bytecode.ClassFile, arg1: boolean): _javatypes.javassist.CtClass;
            makeClassIfNew(arg0: _javatypes.java.io.InputStream): _javatypes.javassist.CtClass;
            makeClass(arg0: string): _javatypes.javassist.CtClass;
            makeClass(arg0: string, arg1: _javatypes.javassist.CtClass): _javatypes.javassist.CtClass;
            makeInterface(arg0: string): _javatypes.javassist.CtClass;
            makeInterface(arg0: string, arg1: _javatypes.javassist.CtClass): _javatypes.javassist.CtClass;
            makeAnnotation(arg0: string): _javatypes.javassist.CtClass;
            appendSystemPath(): _javatypes.javassist.ClassPath;
            insertClassPath(arg0: _javatypes.javassist.ClassPath): _javatypes.javassist.ClassPath;
            appendClassPath(arg0: _javatypes.javassist.ClassPath): _javatypes.javassist.ClassPath;
            insertClassPath(arg0: string): _javatypes.javassist.ClassPath;
            appendClassPath(arg0: string): _javatypes.javassist.ClassPath;
            removeClassPath(arg0: _javatypes.javassist.ClassPath): void;
            appendPathList(arg0: string): void;
            toClass(arg0: _javatypes.javassist.CtClass): _javatypes.java.lang.Class;
            getClassLoader(): _javatypes.java.lang.ClassLoader;
            toClass(arg0: _javatypes.javassist.CtClass, arg1: _javatypes.java.lang.ClassLoader): _javatypes.java.lang.Class;
            toClass(arg0: _javatypes.javassist.CtClass, arg1: _javatypes.java.lang.ClassLoader, arg2: _javatypes.java.security.ProtectionDomain): _javatypes.java.lang.Class;
            toClass(arg0: _javatypes.javassist.CtClass, arg1: _javatypes.java.lang.Class<any>): _javatypes.java.lang.Class<any>;
            toClass(arg0: _javatypes.javassist.CtClass, arg1: _javatypes.java.lang.invoke.MethodHandles$Lookup): _javatypes.java.lang.Class<any>;
            toClass(arg0: _javatypes.javassist.CtClass, arg1: _javatypes.java.lang.Class<any>, arg2: _javatypes.java.lang.ClassLoader, arg3: _javatypes.java.security.ProtectionDomain): _javatypes.java.lang.Class;
            makePackage(arg0: _javatypes.java.lang.ClassLoader, arg1: string): void;
            
        }
        namespace ClassPool {
            interface static {
                new (): _javatypes.javassist.ClassPool;
                new (arg0: boolean): _javatypes.javassist.ClassPool;
                new (arg0: _javatypes.javassist.ClassPool): _javatypes.javassist.ClassPool;
                
                doPruning: boolean;
                releaseUnmodifiedClassFile: boolean;
                cacheOpenedJarFile: boolean;
                
                getDefault(): _javatypes.javassist.ClassPool;
                
            }
        }
        interface CtMember extends _javatypes.java.lang.Object {
            
            toString(): string;
            getDeclaringClass(): _javatypes.javassist.CtClass;
            visibleFrom(arg0: _javatypes.javassist.CtClass): boolean;
            getModifiers(): number;
            setModifiers(arg0: number): void;
            hasAnnotation(arg0: _javatypes.java.lang.Class<any>): boolean;
            hasAnnotation(arg0: string): boolean;
            getAnnotation(arg0: _javatypes.java.lang.Class<any>): _javatypes.java.lang.Object;
            getAnnotations(): _javatypes.java.lang.Object[];
            getAvailableAnnotations(): _javatypes.java.lang.Object[];
            getName(): string;
            getSignature(): string;
            getGenericSignature(): string;
            setGenericSignature(arg0: string): void;
            getAttribute(arg0: string): number[];
            setAttribute(arg0: string, arg1: number[]): void;
            
        }
        namespace CtMember {
            interface static {
                
                
                
            }
        }
        interface CtMethod extends _javatypes.javassist.CtBehavior {
            
            hashCode(): number;
            equals(arg0: _javatypes.java.lang.Object): boolean;
            getLongName(): string;
            getName(): string;
            setName(arg0: string): void;
            getReturnType(): _javatypes.javassist.CtClass;
            isEmpty(): boolean;
            setBody(arg0: _javatypes.javassist.CtMethod, arg1: _javatypes.javassist.ClassMap): void;
            setWrappedBody(arg0: _javatypes.javassist.CtMethod, arg1: _javatypes.javassist.CtMethod$ConstParameter): void;
            
        }
        namespace CtMethod {
            interface static {
                new (arg0: _javatypes.javassist.CtClass, arg1: string, arg2: _javatypes.javassist.CtClass[], arg3: _javatypes.javassist.CtClass): _javatypes.javassist.CtMethod;
                new (arg0: _javatypes.javassist.CtMethod, arg1: _javatypes.javassist.CtClass, arg2: _javatypes.javassist.ClassMap): _javatypes.javassist.CtMethod;
                
                
                make(arg0: string, arg1: _javatypes.javassist.CtClass): _javatypes.javassist.CtMethod;
                make(arg0: _javatypes.javassist.bytecode.MethodInfo, arg1: _javatypes.javassist.CtClass): _javatypes.javassist.CtMethod;
                
            }
        }
        interface CtConstructor extends _javatypes.javassist.CtBehavior {
            
            isConstructor(): boolean;
            isClassInitializer(): boolean;
            getLongName(): string;
            getName(): string;
            isEmpty(): boolean;
            callsSuper(): boolean;
            setBody(arg0: string): void;
            setBody(arg0: _javatypes.javassist.CtConstructor, arg1: _javatypes.javassist.ClassMap): void;
            insertBeforeBody(arg0: string): void;
            toMethod(arg0: string, arg1: _javatypes.javassist.CtClass): _javatypes.javassist.CtMethod;
            toMethod(arg0: string, arg1: _javatypes.javassist.CtClass, arg2: _javatypes.javassist.ClassMap): _javatypes.javassist.CtMethod;
            
        }
        namespace CtConstructor {
            interface static {
                new (arg0: _javatypes.javassist.CtClass[], arg1: _javatypes.javassist.CtClass): _javatypes.javassist.CtConstructor;
                new (arg0: _javatypes.javassist.CtConstructor, arg1: _javatypes.javassist.CtClass, arg2: _javatypes.javassist.ClassMap): _javatypes.javassist.CtConstructor;
                
                
                
            }
        }
        interface ClassPath extends _javatypes.java.lang.Interface {
            
            openClassfile(arg0: string): _javatypes.java.io.InputStream;
            find(arg0: string): _javatypes.java.net.URL;
            
        }
        namespace ClassPath {
            interface static {
                
                
                
            }
        }
        interface CtMethod$ConstParameter extends _javatypes.java.lang.Object {
            
            
        }
        namespace CtMethod$ConstParameter {
            interface static {
                
                
                integer(arg0: number): _javatypes.javassist.CtMethod$ConstParameter;
                integer(arg0: number): _javatypes.javassist.CtMethod$ConstParameter;
                string(arg0: string): _javatypes.javassist.CtMethod$ConstParameter;
                
            }
        }
        interface CodeConverter$ArrayAccessReplacementMethodNames extends _javatypes.java.lang.Interface {
            
            byteOrBooleanRead(): string;
            byteOrBooleanWrite(): string;
            charRead(): string;
            charWrite(): string;
            doubleRead(): string;
            doubleWrite(): string;
            floatRead(): string;
            floatWrite(): string;
            intRead(): string;
            intWrite(): string;
            longRead(): string;
            longWrite(): string;
            objectRead(): string;
            objectWrite(): string;
            shortRead(): string;
            shortWrite(): string;
            
        }
        namespace CodeConverter$ArrayAccessReplacementMethodNames {
            interface static {
                
                
                
            }
        }
    
        namespace util.proxy {
        
            interface ProxyFactory extends _javatypes.java.lang.Object {
                writeDirectory: string;
                
                isUseCache(): boolean;
                setUseCache(arg0: boolean): void;
                isUseWriteReplace(): boolean;
                setUseWriteReplace(arg0: boolean): void;
                setSuperclass(arg0: _javatypes.java.lang.Class<any>): void;
                getSuperclass(): _javatypes.java.lang.Class<any>;
                setInterfaces(arg0: _javatypes.java.lang.Class<any>[]): void;
                getInterfaces(): _javatypes.java.lang.Class<any>[];
                setFilter(arg0: _javatypes.javassist.util.proxy.MethodFilter): void;
                setGenericSignature(arg0: string): void;
                createClass(): _javatypes.java.lang.Class<any>;
                createClass(arg0: _javatypes.javassist.util.proxy.MethodFilter): _javatypes.java.lang.Class<any>;
                createClass(arg0: _javatypes.java.lang.invoke.MethodHandles$Lookup): _javatypes.java.lang.Class<any>;
                createClass(arg0: _javatypes.java.lang.invoke.MethodHandles$Lookup, arg1: _javatypes.javassist.util.proxy.MethodFilter): _javatypes.java.lang.Class<any>;
                getKey(arg0: _javatypes.java.lang.Class<any>, arg1: _javatypes.java.lang.Class<any>[], arg2: number[], arg3: boolean): string;
                create(arg0: _javatypes.java.lang.Class<any>[], arg1: _javatypes.java.lang.Object[], arg2: _javatypes.javassist.util.proxy.MethodHandler): _javatypes.java.lang.Object;
                create(arg0: _javatypes.java.lang.Class<any>[], arg1: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                setHandler(arg0: _javatypes.javassist.util.proxy.MethodHandler): void;
                
            }
            namespace ProxyFactory {
                interface static {
                    new (): _javatypes.javassist.util.proxy.ProxyFactory;
                    
                    onlyPublicMethods: boolean;
                    useCache: boolean;
                    useWriteReplace: boolean;
                    classLoaderProvider: _javatypes.javassist.util.proxy.ProxyFactory$ClassLoaderProvider;
                    nameGenerator: _javatypes.javassist.util.proxy.ProxyFactory$UniqueName;
                    
                    isProxyClass(arg0: _javatypes.java.lang.Class<any>): boolean;
                    getHandler(arg0: _javatypes.javassist.util.proxy.Proxy): _javatypes.javassist.util.proxy.MethodHandler;
                    
                }
            }
            interface ProxyFactory$UniqueName extends _javatypes.java.lang.Interface {
                
                get(arg0: string): string;
                
            }
            namespace ProxyFactory$UniqueName {
                interface static {
                    
                    
                    
                }
            }
            interface ProxyFactory$ClassLoaderProvider extends _javatypes.java.lang.Interface {
                
                get(arg0: _javatypes.javassist.util.proxy.ProxyFactory): _javatypes.java.lang.ClassLoader;
                
            }
            namespace ProxyFactory$ClassLoaderProvider {
                interface static {
                    
                    
                    
                }
            }
            interface Proxy extends _javatypes.java.lang.Interface {
                
                setHandler(arg0: _javatypes.javassist.util.proxy.MethodHandler): void;
                
            }
            namespace Proxy {
                interface static {
                    
                    
                    
                }
            }
            interface MethodFilter extends _javatypes.java.lang.Interface {
                
                isHandled(arg0: _javatypes.java.lang.reflect.Method): boolean;
                
            }
            namespace MethodFilter {
                interface static {
                    
                    
                    
                }
            }
            interface MethodHandler extends _javatypes.java.lang.Interface {
                
                invoke(arg0: _javatypes.java.lang.Object, arg1: _javatypes.java.lang.reflect.Method, arg2: _javatypes.java.lang.reflect.Method, arg3: _javatypes.java.lang.Object[]): _javatypes.java.lang.Object;
                
            }
            namespace MethodHandler {
                interface static {
                    
                    
                    
                }
            }
        }
    
        namespace bytecode {
        
            interface FieldInfo extends _javatypes.java.lang.Object {
                
                toString(): string;
                getConstPool(): _javatypes.javassist.bytecode.ConstPool;
                getName(): string;
                setName(arg0: string): void;
                getAccessFlags(): number;
                setAccessFlags(arg0: number): void;
                getDescriptor(): string;
                setDescriptor(arg0: string): void;
                getConstantValue(): number;
                getAttributes(): _javatypes.java.util.List<_javatypes.javassist.bytecode.AttributeInfo>;
                getAttribute(arg0: string): _javatypes.javassist.bytecode.AttributeInfo;
                removeAttribute(arg0: string): _javatypes.javassist.bytecode.AttributeInfo;
                addAttribute(arg0: _javatypes.javassist.bytecode.AttributeInfo): void;
                
            }
            namespace FieldInfo {
                interface static {
                    new (arg0: _javatypes.javassist.bytecode.ConstPool, arg1: string, arg2: string): _javatypes.javassist.bytecode.FieldInfo;
                    
                    
                    
                }
            }
            interface ConstPool extends _javatypes.java.lang.Object {
                
                getSize(): number;
                getClassName(): string;
                getThisClassInfo(): number;
                getTag(arg0: number): number;
                getClassInfo(arg0: number): string;
                getClassInfoByDescriptor(arg0: number): string;
                getNameAndTypeName(arg0: number): number;
                getNameAndTypeDescriptor(arg0: number): number;
                getMemberClass(arg0: number): number;
                getMemberNameAndType(arg0: number): number;
                getFieldrefClass(arg0: number): number;
                getFieldrefClassName(arg0: number): string;
                getFieldrefNameAndType(arg0: number): number;
                getFieldrefName(arg0: number): string;
                getFieldrefType(arg0: number): string;
                getMethodrefClass(arg0: number): number;
                getMethodrefClassName(arg0: number): string;
                getMethodrefNameAndType(arg0: number): number;
                getMethodrefName(arg0: number): string;
                getMethodrefType(arg0: number): string;
                getInterfaceMethodrefClass(arg0: number): number;
                getInterfaceMethodrefClassName(arg0: number): string;
                getInterfaceMethodrefNameAndType(arg0: number): number;
                getInterfaceMethodrefName(arg0: number): string;
                getInterfaceMethodrefType(arg0: number): string;
                getLdcValue(arg0: number): _javatypes.java.lang.Object;
                getIntegerInfo(arg0: number): number;
                getFloatInfo(arg0: number): number;
                getLongInfo(arg0: number): number;
                getDoubleInfo(arg0: number): number;
                getStringInfo(arg0: number): string;
                getUtf8Info(arg0: number): string;
                getMethodHandleKind(arg0: number): number;
                getMethodHandleIndex(arg0: number): number;
                getMethodTypeInfo(arg0: number): number;
                getInvokeDynamicBootstrap(arg0: number): number;
                getInvokeDynamicNameAndType(arg0: number): number;
                getInvokeDynamicType(arg0: number): string;
                getDynamicBootstrap(arg0: number): number;
                getDynamicNameAndType(arg0: number): number;
                getDynamicType(arg0: number): string;
                getModuleInfo(arg0: number): string;
                getPackageInfo(arg0: number): string;
                isConstructor(arg0: string, arg1: number): number;
                isMember(arg0: string, arg1: string, arg2: number): number;
                eqMember(arg0: string, arg1: string, arg2: number): string;
                copy(arg0: number, arg1: _javatypes.javassist.bytecode.ConstPool, arg2: _javatypes.java.util.Map<string, string>): number;
                addClassInfo(arg0: _javatypes.javassist.CtClass): number;
                addClassInfo(arg0: string): number;
                addNameAndTypeInfo(arg0: string, arg1: string): number;
                addNameAndTypeInfo(arg0: number, arg1: number): number;
                addFieldrefInfo(arg0: number, arg1: string, arg2: string): number;
                addFieldrefInfo(arg0: number, arg1: number): number;
                addMethodrefInfo(arg0: number, arg1: string, arg2: string): number;
                addMethodrefInfo(arg0: number, arg1: number): number;
                addInterfaceMethodrefInfo(arg0: number, arg1: string, arg2: string): number;
                addInterfaceMethodrefInfo(arg0: number, arg1: number): number;
                addStringInfo(arg0: string): number;
                addIntegerInfo(arg0: number): number;
                addFloatInfo(arg0: number): number;
                addLongInfo(arg0: number): number;
                addDoubleInfo(arg0: number): number;
                addUtf8Info(arg0: string): number;
                addMethodHandleInfo(arg0: number, arg1: number): number;
                addMethodTypeInfo(arg0: number): number;
                addInvokeDynamicInfo(arg0: number, arg1: number): number;
                addDynamicInfo(arg0: number, arg1: number): number;
                addModuleInfo(arg0: number): number;
                addPackageInfo(arg0: number): number;
                getClassNames(): _javatypes.java.util.Set<string>;
                renameClass(arg0: string, arg1: string): void;
                renameClass(arg0: _javatypes.java.util.Map<string, string>): void;
                write(arg0: _javatypes.java.io.DataOutputStream): void;
                print(): void;
                print(arg0: _javatypes.java.io.PrintWriter): void;
                
            }
            namespace ConstPool {
                interface static {
                    new (arg0: string): _javatypes.javassist.bytecode.ConstPool;
                    new (arg0: _javatypes.java.io.DataInputStream): _javatypes.javassist.bytecode.ConstPool;
                    
                    readonly CONST_Class: number;
                    readonly CONST_Fieldref: number;
                    readonly CONST_Methodref: number;
                    readonly CONST_InterfaceMethodref: number;
                    readonly CONST_String: number;
                    readonly CONST_Integer: number;
                    readonly CONST_Float: number;
                    readonly CONST_Long: number;
                    readonly CONST_Double: number;
                    readonly CONST_NameAndType: number;
                    readonly CONST_Utf8: number;
                    readonly CONST_MethodHandle: number;
                    readonly CONST_MethodType: number;
                    readonly CONST_Dynamic: number;
                    readonly CONST_DynamicCallSite: number;
                    readonly CONST_InvokeDynamic: number;
                    readonly CONST_Module: number;
                    readonly CONST_Package: number;
                    readonly THIS: _javatypes.javassist.CtClass;
                    readonly REF_getField: number;
                    readonly REF_getStatic: number;
                    readonly REF_putField: number;
                    readonly REF_putStatic: number;
                    readonly REF_invokeVirtual: number;
                    readonly REF_invokeStatic: number;
                    readonly REF_invokeSpecial: number;
                    readonly REF_newInvokeSpecial: number;
                    readonly REF_invokeInterface: number;
                    
                    
                }
            }
            interface MethodInfo extends _javatypes.java.lang.Object {
                
                toString(): string;
                getName(): string;
                setName(arg0: string): void;
                isMethod(): boolean;
                getConstPool(): _javatypes.javassist.bytecode.ConstPool;
                isConstructor(): boolean;
                isStaticInitializer(): boolean;
                getAccessFlags(): number;
                setAccessFlags(arg0: number): void;
                getDescriptor(): string;
                setDescriptor(arg0: string): void;
                getAttributes(): _javatypes.java.util.List<_javatypes.javassist.bytecode.AttributeInfo>;
                getAttribute(arg0: string): _javatypes.javassist.bytecode.AttributeInfo;
                removeAttribute(arg0: string): _javatypes.javassist.bytecode.AttributeInfo;
                addAttribute(arg0: _javatypes.javassist.bytecode.AttributeInfo): void;
                getExceptionsAttribute(): _javatypes.javassist.bytecode.ExceptionsAttribute;
                getCodeAttribute(): _javatypes.javassist.bytecode.CodeAttribute;
                removeExceptionsAttribute(): void;
                setExceptionsAttribute(arg0: _javatypes.javassist.bytecode.ExceptionsAttribute): void;
                removeCodeAttribute(): void;
                setCodeAttribute(arg0: _javatypes.javassist.bytecode.CodeAttribute): void;
                rebuildStackMapIf6(arg0: _javatypes.javassist.ClassPool, arg1: _javatypes.javassist.bytecode.ClassFile): void;
                rebuildStackMap(arg0: _javatypes.javassist.ClassPool): void;
                rebuildStackMapForME(arg0: _javatypes.javassist.ClassPool): void;
                getLineNumber(arg0: number): number;
                setSuperclass(arg0: string): void;
                
            }
            namespace MethodInfo {
                interface static {
                    new (arg0: _javatypes.javassist.bytecode.ConstPool, arg1: string, arg2: string): _javatypes.javassist.bytecode.MethodInfo;
                    new (arg0: _javatypes.javassist.bytecode.ConstPool, arg1: string, arg2: _javatypes.javassist.bytecode.MethodInfo, arg3: _javatypes.java.util.Map<string, string>): _javatypes.javassist.bytecode.MethodInfo;
                    
                    doPreverify: boolean;
                    readonly nameInit: string;
                    readonly nameClinit: string;
                    
                    
                }
            }
            interface ClassFile extends _javatypes.java.lang.Object {
                
                compact(): void;
                prune(): void;
                getConstPool(): _javatypes.javassist.bytecode.ConstPool;
                isInterface(): boolean;
                isFinal(): boolean;
                isAbstract(): boolean;
                getAccessFlags(): number;
                setAccessFlags(arg0: number): void;
                getInnerAccessFlags(): number;
                getName(): string;
                setName(arg0: string): void;
                getSuperclass(): string;
                getSuperclassId(): number;
                setSuperclass(arg0: string): void;
                renameClass(arg0: string, arg1: string): void;
                renameClass(arg0: _javatypes.java.util.Map<string, string>): void;
                getRefClasses(arg0: _javatypes.java.util.Map<string, string>): void;
                getInterfaces(): string[];
                setInterfaces(arg0: string[]): void;
                addInterface(arg0: string): void;
                getFields(): _javatypes.java.util.List<_javatypes.javassist.bytecode.FieldInfo>;
                addField(arg0: _javatypes.javassist.bytecode.FieldInfo): void;
                addField2(arg0: _javatypes.javassist.bytecode.FieldInfo): void;
                getMethods(): _javatypes.java.util.List<_javatypes.javassist.bytecode.MethodInfo>;
                getMethod(arg0: string): _javatypes.javassist.bytecode.MethodInfo;
                getStaticInitializer(): _javatypes.javassist.bytecode.MethodInfo;
                addMethod(arg0: _javatypes.javassist.bytecode.MethodInfo): void;
                addMethod2(arg0: _javatypes.javassist.bytecode.MethodInfo): void;
                getAttributes(): _javatypes.java.util.List<_javatypes.javassist.bytecode.AttributeInfo>;
                getAttribute(arg0: string): _javatypes.javassist.bytecode.AttributeInfo;
                removeAttribute(arg0: string): _javatypes.javassist.bytecode.AttributeInfo;
                addAttribute(arg0: _javatypes.javassist.bytecode.AttributeInfo): void;
                getSourceFile(): string;
                write(arg0: _javatypes.java.io.DataOutputStream): void;
                getMajorVersion(): number;
                setMajorVersion(arg0: number): void;
                getMinorVersion(): number;
                setMinorVersion(arg0: number): void;
                setVersionToJava5(): void;
                
            }
            namespace ClassFile {
                interface static {
                    new (arg0: _javatypes.java.io.DataInputStream): _javatypes.javassist.bytecode.ClassFile;
                    new (arg0: boolean, arg1: string, arg2: string): _javatypes.javassist.bytecode.ClassFile;
                    
                    readonly JAVA_1: number;
                    readonly JAVA_2: number;
                    readonly JAVA_3: number;
                    readonly JAVA_4: number;
                    readonly JAVA_5: number;
                    readonly JAVA_6: number;
                    readonly JAVA_7: number;
                    readonly JAVA_8: number;
                    readonly JAVA_9: number;
                    readonly JAVA_10: number;
                    readonly JAVA_11: number;
                    readonly MAJOR_VERSION: number;
                    
                    
                }
            }
            interface Opcode extends _javatypes.java.lang.Interface {
                
                
            }
            namespace Opcode {
                interface static {
                    
                    readonly AALOAD: number;
                    readonly AASTORE: number;
                    readonly ACONST_NULL: number;
                    readonly ALOAD: number;
                    readonly ALOAD_0: number;
                    readonly ALOAD_1: number;
                    readonly ALOAD_2: number;
                    readonly ALOAD_3: number;
                    readonly ANEWARRAY: number;
                    readonly ARETURN: number;
                    readonly ARRAYLENGTH: number;
                    readonly ASTORE: number;
                    readonly ASTORE_0: number;
                    readonly ASTORE_1: number;
                    readonly ASTORE_2: number;
                    readonly ASTORE_3: number;
                    readonly ATHROW: number;
                    readonly BALOAD: number;
                    readonly BASTORE: number;
                    readonly BIPUSH: number;
                    readonly CALOAD: number;
                    readonly CASTORE: number;
                    readonly CHECKCAST: number;
                    readonly D2F: number;
                    readonly D2I: number;
                    readonly D2L: number;
                    readonly DADD: number;
                    readonly DALOAD: number;
                    readonly DASTORE: number;
                    readonly DCMPG: number;
                    readonly DCMPL: number;
                    readonly DCONST_0: number;
                    readonly DCONST_1: number;
                    readonly DDIV: number;
                    readonly DLOAD: number;
                    readonly DLOAD_0: number;
                    readonly DLOAD_1: number;
                    readonly DLOAD_2: number;
                    readonly DLOAD_3: number;
                    readonly DMUL: number;
                    readonly DNEG: number;
                    readonly DREM: number;
                    readonly DRETURN: number;
                    readonly DSTORE: number;
                    readonly DSTORE_0: number;
                    readonly DSTORE_1: number;
                    readonly DSTORE_2: number;
                    readonly DSTORE_3: number;
                    readonly DSUB: number;
                    readonly DUP: number;
                    readonly DUP2: number;
                    readonly DUP2_X1: number;
                    readonly DUP2_X2: number;
                    readonly DUP_X1: number;
                    readonly DUP_X2: number;
                    readonly F2D: number;
                    readonly F2I: number;
                    readonly F2L: number;
                    readonly FADD: number;
                    readonly FALOAD: number;
                    readonly FASTORE: number;
                    readonly FCMPG: number;
                    readonly FCMPL: number;
                    readonly FCONST_0: number;
                    readonly FCONST_1: number;
                    readonly FCONST_2: number;
                    readonly FDIV: number;
                    readonly FLOAD: number;
                    readonly FLOAD_0: number;
                    readonly FLOAD_1: number;
                    readonly FLOAD_2: number;
                    readonly FLOAD_3: number;
                    readonly FMUL: number;
                    readonly FNEG: number;
                    readonly FREM: number;
                    readonly FRETURN: number;
                    readonly FSTORE: number;
                    readonly FSTORE_0: number;
                    readonly FSTORE_1: number;
                    readonly FSTORE_2: number;
                    readonly FSTORE_3: number;
                    readonly FSUB: number;
                    readonly GETFIELD: number;
                    readonly GETSTATIC: number;
                    readonly GOTO: number;
                    readonly GOTO_W: number;
                    readonly I2B: number;
                    readonly I2C: number;
                    readonly I2D: number;
                    readonly I2F: number;
                    readonly I2L: number;
                    readonly I2S: number;
                    readonly IADD: number;
                    readonly IALOAD: number;
                    readonly IAND: number;
                    readonly IASTORE: number;
                    readonly ICONST_0: number;
                    readonly ICONST_1: number;
                    readonly ICONST_2: number;
                    readonly ICONST_3: number;
                    readonly ICONST_4: number;
                    readonly ICONST_5: number;
                    readonly ICONST_M1: number;
                    readonly IDIV: number;
                    readonly IFEQ: number;
                    readonly IFGE: number;
                    readonly IFGT: number;
                    readonly IFLE: number;
                    readonly IFLT: number;
                    readonly IFNE: number;
                    readonly IFNONNULL: number;
                    readonly IFNULL: number;
                    readonly IF_ACMPEQ: number;
                    readonly IF_ACMPNE: number;
                    readonly IF_ICMPEQ: number;
                    readonly IF_ICMPGE: number;
                    readonly IF_ICMPGT: number;
                    readonly IF_ICMPLE: number;
                    readonly IF_ICMPLT: number;
                    readonly IF_ICMPNE: number;
                    readonly IINC: number;
                    readonly ILOAD: number;
                    readonly ILOAD_0: number;
                    readonly ILOAD_1: number;
                    readonly ILOAD_2: number;
                    readonly ILOAD_3: number;
                    readonly IMUL: number;
                    readonly INEG: number;
                    readonly INSTANCEOF: number;
                    readonly INVOKEDYNAMIC: number;
                    readonly INVOKEINTERFACE: number;
                    readonly INVOKESPECIAL: number;
                    readonly INVOKESTATIC: number;
                    readonly INVOKEVIRTUAL: number;
                    readonly IOR: number;
                    readonly IREM: number;
                    readonly IRETURN: number;
                    readonly ISHL: number;
                    readonly ISHR: number;
                    readonly ISTORE: number;
                    readonly ISTORE_0: number;
                    readonly ISTORE_1: number;
                    readonly ISTORE_2: number;
                    readonly ISTORE_3: number;
                    readonly ISUB: number;
                    readonly IUSHR: number;
                    readonly IXOR: number;
                    readonly JSR: number;
                    readonly JSR_W: number;
                    readonly L2D: number;
                    readonly L2F: number;
                    readonly L2I: number;
                    readonly LADD: number;
                    readonly LALOAD: number;
                    readonly LAND: number;
                    readonly LASTORE: number;
                    readonly LCMP: number;
                    readonly LCONST_0: number;
                    readonly LCONST_1: number;
                    readonly LDC: number;
                    readonly LDC2_W: number;
                    readonly LDC_W: number;
                    readonly LDIV: number;
                    readonly LLOAD: number;
                    readonly LLOAD_0: number;
                    readonly LLOAD_1: number;
                    readonly LLOAD_2: number;
                    readonly LLOAD_3: number;
                    readonly LMUL: number;
                    readonly LNEG: number;
                    readonly LOOKUPSWITCH: number;
                    readonly LOR: number;
                    readonly LREM: number;
                    readonly LRETURN: number;
                    readonly LSHL: number;
                    readonly LSHR: number;
                    readonly LSTORE: number;
                    readonly LSTORE_0: number;
                    readonly LSTORE_1: number;
                    readonly LSTORE_2: number;
                    readonly LSTORE_3: number;
                    readonly LSUB: number;
                    readonly LUSHR: number;
                    readonly LXOR: number;
                    readonly MONITORENTER: number;
                    readonly MONITOREXIT: number;
                    readonly MULTIANEWARRAY: number;
                    readonly NEW: number;
                    readonly NEWARRAY: number;
                    readonly NOP: number;
                    readonly POP: number;
                    readonly POP2: number;
                    readonly PUTFIELD: number;
                    readonly PUTSTATIC: number;
                    readonly RET: number;
                    readonly RETURN: number;
                    readonly SALOAD: number;
                    readonly SASTORE: number;
                    readonly SIPUSH: number;
                    readonly SWAP: number;
                    readonly TABLESWITCH: number;
                    readonly WIDE: number;
                    readonly T_BOOLEAN: number;
                    readonly T_CHAR: number;
                    readonly T_FLOAT: number;
                    readonly T_DOUBLE: number;
                    readonly T_BYTE: number;
                    readonly T_SHORT: number;
                    readonly T_INT: number;
                    readonly T_LONG: number;
                    readonly STACK_GROW: number[];
                    
                    
                }
            }
            interface CodeAttribute extends _javatypes.javassist.bytecode.AttributeInfo, _javatypes.javassist.bytecode.Opcode {
                
                copy(arg0: _javatypes.javassist.bytecode.ConstPool, arg1: _javatypes.java.util.Map<string, string>): _javatypes.javassist.bytecode.AttributeInfo;
                length(): number;
                get(): number[];
                set(arg0: number[]): void;
                getDeclaringClass(): string;
                getMaxStack(): number;
                setMaxStack(arg0: number): void;
                computeMaxStack(): number;
                getMaxLocals(): number;
                setMaxLocals(arg0: number): void;
                getCodeLength(): number;
                getCode(): number[];
                iterator(): _javatypes.javassist.bytecode.CodeIterator;
                getExceptionTable(): _javatypes.javassist.bytecode.ExceptionTable;
                getAttributes(): _javatypes.java.util.List<_javatypes.javassist.bytecode.AttributeInfo>;
                getAttribute(arg0: string): _javatypes.javassist.bytecode.AttributeInfo;
                setAttribute(arg0: _javatypes.javassist.bytecode.StackMapTable): void;
                setAttribute(arg0: _javatypes.javassist.bytecode.StackMap): void;
                insertLocalVar(arg0: number, arg1: number): void;
                
            }
            namespace CodeAttribute {
                interface static {
                    new (arg0: _javatypes.javassist.bytecode.ConstPool, arg1: number, arg2: number, arg3: number[], arg4: _javatypes.javassist.bytecode.ExceptionTable): _javatypes.javassist.bytecode.CodeAttribute;
                    
                    readonly tag: string;
                    
                    
                }
            }
            interface AttributeInfo extends _javatypes.java.lang.Object {
                
                getName(): string;
                getConstPool(): _javatypes.javassist.bytecode.ConstPool;
                length(): number;
                get(): number[];
                set(arg0: number[]): void;
                copy(arg0: _javatypes.javassist.bytecode.ConstPool, arg1: _javatypes.java.util.Map<string, string>): _javatypes.javassist.bytecode.AttributeInfo;
                
            }
            namespace AttributeInfo {
                interface static {
                    new (arg0: _javatypes.javassist.bytecode.ConstPool, arg1: string, arg2: number[]): _javatypes.javassist.bytecode.AttributeInfo;
                    
                    
                    
                }
            }
            interface ExceptionsAttribute extends _javatypes.javassist.bytecode.AttributeInfo {
                
                copy(arg0: _javatypes.javassist.bytecode.ConstPool, arg1: _javatypes.java.util.Map<string, string>): _javatypes.javassist.bytecode.AttributeInfo;
                getExceptionIndexes(): number[];
                getExceptions(): string[];
                setExceptionIndexes(arg0: number[]): void;
                setExceptions(arg0: string[]): void;
                tableLength(): number;
                getException(arg0: number): number;
                
            }
            namespace ExceptionsAttribute {
                interface static {
                    new (arg0: _javatypes.javassist.bytecode.ConstPool): _javatypes.javassist.bytecode.ExceptionsAttribute;
                    
                    readonly tag: string;
                    
                    
                }
            }
            interface StackMap extends _javatypes.javassist.bytecode.AttributeInfo {
                
                numOfEntries(): number;
                copy(arg0: _javatypes.javassist.bytecode.ConstPool, arg1: _javatypes.java.util.Map<string, string>): _javatypes.javassist.bytecode.AttributeInfo;
                insertLocal(arg0: number, arg1: number, arg2: number): void;
                removeNew(arg0: number): void;
                print(arg0: _javatypes.java.io.PrintWriter): void;
                
            }
            namespace StackMap {
                interface static {
                    
                    readonly tag: string;
                    readonly TOP: number;
                    readonly INTEGER: number;
                    readonly FLOAT: number;
                    readonly DOUBLE: number;
                    readonly LONG: number;
                    readonly NULL: number;
                    readonly THIS: number;
                    readonly OBJECT: number;
                    readonly UNINIT: number;
                    
                    
                }
            }
            interface CodeIterator extends _javatypes.java.lang.Object, _javatypes.javassist.bytecode.Opcode {
                
                begin(): void;
                move(arg0: number): void;
                setMark(arg0: number): void;
                setMark2(arg0: number): void;
                getMark(): number;
                getMark2(): number;
                get(): _javatypes.javassist.bytecode.CodeAttribute;
                getCodeLength(): number;
                byteAt(arg0: number): number;
                signedByteAt(arg0: number): number;
                writeByte(arg0: number, arg1: number): void;
                u16bitAt(arg0: number): number;
                s16bitAt(arg0: number): number;
                write16bit(arg0: number, arg1: number): void;
                s32bitAt(arg0: number): number;
                write32bit(arg0: number, arg1: number): void;
                write(arg0: number[], arg1: number): void;
                hasNext(): boolean;
                next(): number;
                lookAhead(): number;
                skipConstructor(): number;
                skipSuperConstructor(): number;
                skipThisConstructor(): number;
                insert(arg0: number[]): number;
                insert(arg0: number, arg1: number[]): void;
                insertAt(arg0: number, arg1: number[]): number;
                insertEx(arg0: number[]): number;
                insertEx(arg0: number, arg1: number[]): void;
                insertExAt(arg0: number, arg1: number[]): number;
                insertGap(arg0: number): number;
                insertGap(arg0: number, arg1: number): number;
                insertExGap(arg0: number): number;
                insertExGap(arg0: number, arg1: number): number;
                insertGapAt(arg0: number, arg1: number, arg2: boolean): _javatypes.javassist.bytecode.CodeIterator$Gap;
                insert(arg0: _javatypes.javassist.bytecode.ExceptionTable, arg1: number): void;
                append(arg0: number[]): number;
                appendGap(arg0: number): void;
                append(arg0: _javatypes.javassist.bytecode.ExceptionTable, arg1: number): void;
                
            }
            namespace CodeIterator {
                interface static {
                    
                    
                    
                }
            }
            interface ExceptionTable extends _javatypes.java.lang.Object, _javatypes.java.lang.Cloneable {
                
                clone(): _javatypes.java.lang.Object;
                size(): number;
                startPc(arg0: number): number;
                setStartPc(arg0: number, arg1: number): void;
                endPc(arg0: number): number;
                setEndPc(arg0: number, arg1: number): void;
                handlerPc(arg0: number): number;
                setHandlerPc(arg0: number, arg1: number): void;
                catchType(arg0: number): number;
                setCatchType(arg0: number, arg1: number): void;
                add(arg0: number, arg1: _javatypes.javassist.bytecode.ExceptionTable, arg2: number): void;
                add(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
                add(arg0: number, arg1: number, arg2: number, arg3: number): void;
                remove(arg0: number): void;
                copy(arg0: _javatypes.javassist.bytecode.ConstPool, arg1: _javatypes.java.util.Map<string, string>): _javatypes.javassist.bytecode.ExceptionTable;
                
            }
            namespace ExceptionTable {
                interface static {
                    new (arg0: _javatypes.javassist.bytecode.ConstPool): _javatypes.javassist.bytecode.ExceptionTable;
                    
                    
                    
                }
            }
            interface StackMapTable extends _javatypes.javassist.bytecode.AttributeInfo {
                
                copy(arg0: _javatypes.javassist.bytecode.ConstPool, arg1: _javatypes.java.util.Map<string, string>): _javatypes.javassist.bytecode.AttributeInfo;
                insertLocal(arg0: number, arg1: number, arg2: number): void;
                println(arg0: _javatypes.java.io.PrintWriter): void;
                println(arg0: _javatypes.java.io.PrintStream): void;
                removeNew(arg0: number): void;
                
            }
            namespace StackMapTable {
                interface static {
                    
                    readonly tag: string;
                    readonly TOP: number;
                    readonly INTEGER: number;
                    readonly FLOAT: number;
                    readonly DOUBLE: number;
                    readonly LONG: number;
                    readonly NULL: number;
                    readonly THIS: number;
                    readonly OBJECT: number;
                    readonly UNINIT: number;
                    
                    typeTagOf(arg0: number): number;
                    
                }
            }
            interface CodeIterator$Gap extends _javatypes.java.lang.Object {
                position: number;
                length: number;
                
                
            }
            namespace CodeIterator$Gap {
                interface static {
                    new (): _javatypes.javassist.bytecode.CodeIterator$Gap;
                    
                    
                    
                }
            }
        }
    
        namespace expr {
        
            interface ExprEditor extends _javatypes.java.lang.Object {
                
                doit(arg0: _javatypes.javassist.CtClass, arg1: _javatypes.javassist.bytecode.MethodInfo): boolean;
                edit(arg0: _javatypes.javassist.expr.NewExpr): void;
                edit(arg0: _javatypes.javassist.expr.NewArray): void;
                edit(arg0: _javatypes.javassist.expr.MethodCall): void;
                edit(arg0: _javatypes.javassist.expr.ConstructorCall): void;
                edit(arg0: _javatypes.javassist.expr.FieldAccess): void;
                edit(arg0: _javatypes.javassist.expr.Instanceof): void;
                edit(arg0: _javatypes.javassist.expr.Cast): void;
                edit(arg0: _javatypes.javassist.expr.Handler): void;
                
            }
            namespace ExprEditor {
                interface static {
                    new (): _javatypes.javassist.expr.ExprEditor;
                    
                    
                    
                }
            }
            interface ConstructorCall extends _javatypes.javassist.expr.MethodCall {
                
                getMethodName(): string;
                getMethod(): _javatypes.javassist.CtMethod;
                getConstructor(): _javatypes.javassist.CtConstructor;
                isSuper(): boolean;
                
            }
            namespace ConstructorCall {
                interface static {
                    
                    
                    
                }
            }
            interface FieldAccess extends _javatypes.javassist.expr.Expr {
                
                where(): _javatypes.javassist.CtBehavior;
                getLineNumber(): number;
                getFileName(): string;
                isStatic(): boolean;
                isReader(): boolean;
                isWriter(): boolean;
                getClassName(): string;
                getFieldName(): string;
                getField(): _javatypes.javassist.CtField;
                mayThrow(): _javatypes.javassist.CtClass[];
                getSignature(): string;
                replace(arg0: string): void;
                
            }
            namespace FieldAccess {
                interface static {
                    
                    
                    
                }
            }
            interface NewArray extends _javatypes.javassist.expr.Expr {
                
                where(): _javatypes.javassist.CtBehavior;
                getLineNumber(): number;
                getFileName(): string;
                mayThrow(): _javatypes.javassist.CtClass[];
                getComponentType(): _javatypes.javassist.CtClass;
                getDimension(): number;
                getCreatedDimensions(): number;
                replace(arg0: string): void;
                
            }
            namespace NewArray {
                interface static {
                    
                    
                    
                }
            }
            interface Instanceof extends _javatypes.javassist.expr.Expr {
                
                where(): _javatypes.javassist.CtBehavior;
                getLineNumber(): number;
                getFileName(): string;
                getType(): _javatypes.javassist.CtClass;
                mayThrow(): _javatypes.javassist.CtClass[];
                replace(arg0: string): void;
                
            }
            namespace Instanceof {
                interface static {
                    
                    
                    
                }
            }
            interface NewExpr extends _javatypes.javassist.expr.Expr {
                
                where(): _javatypes.javassist.CtBehavior;
                getLineNumber(): number;
                getFileName(): string;
                getClassName(): string;
                getSignature(): string;
                getConstructor(): _javatypes.javassist.CtConstructor;
                mayThrow(): _javatypes.javassist.CtClass[];
                replace(arg0: string): void;
                
            }
            namespace NewExpr {
                interface static {
                    
                    
                    
                }
            }
            interface Handler extends _javatypes.javassist.expr.Expr {
                
                where(): _javatypes.javassist.CtBehavior;
                getLineNumber(): number;
                getFileName(): string;
                mayThrow(): _javatypes.javassist.CtClass[];
                getType(): _javatypes.javassist.CtClass;
                isFinally(): boolean;
                replace(arg0: string): void;
                insertBefore(arg0: string): void;
                
            }
            namespace Handler {
                interface static {
                    
                    
                    
                }
            }
            interface MethodCall extends _javatypes.javassist.expr.Expr {
                
                where(): _javatypes.javassist.CtBehavior;
                getLineNumber(): number;
                getFileName(): string;
                getClassName(): string;
                getMethodName(): string;
                getMethod(): _javatypes.javassist.CtMethod;
                getSignature(): string;
                mayThrow(): _javatypes.javassist.CtClass[];
                isSuper(): boolean;
                replace(arg0: string): void;
                
            }
            namespace MethodCall {
                interface static {
                    
                    
                    
                }
            }
            interface Cast extends _javatypes.javassist.expr.Expr {
                
                where(): _javatypes.javassist.CtBehavior;
                getLineNumber(): number;
                getFileName(): string;
                getType(): _javatypes.javassist.CtClass;
                mayThrow(): _javatypes.javassist.CtClass[];
                replace(arg0: string): void;
                
            }
            namespace Cast {
                interface static {
                    
                    
                    
                }
            }
            interface Expr extends _javatypes.java.lang.Object, _javatypes.javassist.bytecode.Opcode {
                
                getEnclosingClass(): _javatypes.javassist.CtClass;
                where(): _javatypes.javassist.CtBehavior;
                mayThrow(): _javatypes.javassist.CtClass[];
                indexOfBytecode(): number;
                getLineNumber(): number;
                getFileName(): string;
                replace(arg0: string): void;
                replace(arg0: string, arg1: _javatypes.javassist.expr.ExprEditor): void;
                
            }
            namespace Expr {
                interface static {
                    
                    
                    
                }
            }
        }
    
        namespace compiler {
        
            interface AccessorMaker extends _javatypes.java.lang.Object {
                
                getConstructor(arg0: _javatypes.javassist.CtClass, arg1: string, arg2: _javatypes.javassist.bytecode.MethodInfo): string;
                getMethodAccessor(arg0: string, arg1: string, arg2: string, arg3: _javatypes.javassist.bytecode.MethodInfo): string;
                getFieldGetter(arg0: _javatypes.javassist.bytecode.FieldInfo, arg1: boolean): _javatypes.javassist.bytecode.MethodInfo;
                getFieldSetter(arg0: _javatypes.javassist.bytecode.FieldInfo, arg1: boolean): _javatypes.javassist.bytecode.MethodInfo;
                
            }
            namespace AccessorMaker {
                interface static {
                    new (arg0: _javatypes.javassist.CtClass): _javatypes.javassist.compiler.AccessorMaker;
                    
                    
                    
                }
            }
        }
    }
}

declare namespace Java {
    export function type(className: "xyz.wagyourtail.StringHashTrie"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.StringHashTrie> & _javatypes.xyz.wagyourtail.StringHashTrie.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.MethodWrapper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper> & _javatypes.xyz.wagyourtail.jsmacros.core.MethodWrapper.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.Core"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.Core> & _javatypes.xyz.wagyourtail.jsmacros.core.Core.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.language.EventContainer"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer> & _javatypes.xyz.wagyourtail.jsmacros.core.language.EventContainer.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.language.BaseScriptContext"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.language.BaseScriptContext> & _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseScriptContext.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.language.BaseScriptContext.SleepRunnable"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.language.BaseScriptContext.SleepRunnable> & _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseScriptContext.SleepRunnable.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.language.BaseWrappedException"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException> & _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.language.BaseLanguage"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.language.BaseLanguage> & _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseLanguage.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.language.BaseWrappedException.SourceLocation"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException.SourceLocation> & _javatypes.xyz.wagyourtail.jsmacros.core.language.BaseWrappedException.SourceLocation.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.BaseLibrary"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.BaseLibrary> & _javatypes.xyz.wagyourtail.jsmacros.core.library.BaseLibrary.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.LibraryRegistry"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.LibraryRegistry> & _javatypes.xyz.wagyourtail.jsmacros.core.library.LibraryRegistry.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.Library"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.Library> & _javatypes.xyz.wagyourtail.jsmacros.core.library.Library.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.PerLanguageLibrary"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.PerLanguageLibrary> & _javatypes.xyz.wagyourtail.jsmacros.core.library.PerLanguageLibrary.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.FJsMacros.EventAndContext"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.FJsMacros.EventAndContext> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.FJsMacros.EventAndContext.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.LibraryBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.LibraryBuilder> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.LibraryBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.FileHandler"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.FileHandler> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.FileHandler.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest.Response"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest.Response> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.HTTPRequest.Response.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder.MethodSigParts"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder.MethodSigParts> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder.MethodSigParts.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder.ProxyReference"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder.ProxyReference> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ProxyBuilder.ProxyReference.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket.Disconnected"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket.Disconnected> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.Websocket.Disconnected.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.ConstructorBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.ConstructorBuilder> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.ConstructorBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.FieldBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.FieldBuilder> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.FieldBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.MethodBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.MethodBuilder> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.MethodBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.AnnotationBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.AnnotationBuilder> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.AnnotationBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.AnnotationBuilder.AnnotationArrayBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.AnnotationBuilder.AnnotationArrayBuilder> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.AnnotationBuilder.AnnotationArrayBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.BodyBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.BodyBuilder> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.BodyBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.FieldBuilder.FieldInitializerBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.FieldBuilder.FieldInitializerBuilder> & _javatypes.xyz.wagyourtail.jsmacros.core.library.impl.classes.ClassBuilder.FieldBuilder.FieldInitializerBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.classes.Mappings"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings> & _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.classes.WrappedClassInstance"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.classes.WrappedClassInstance> & _javatypes.xyz.wagyourtail.jsmacros.core.classes.WrappedClassInstance.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.classes.Mappings.ClassData"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings.ClassData> & _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings.ClassData.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.classes.Mappings.MappedClass"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings.MappedClass> & _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings.MappedClass.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.classes.Mappings.MethodData"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings.MethodData> & _javatypes.xyz.wagyourtail.jsmacros.core.classes.Mappings.MethodData.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.config.BaseProfile"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.config.BaseProfile> & _javatypes.xyz.wagyourtail.jsmacros.core.config.BaseProfile.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.config.ConfigManager"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.config.ConfigManager> & _javatypes.xyz.wagyourtail.jsmacros.core.config.ConfigManager.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.config.ScriptTrigger"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger> & _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.config.ScriptTrigger.TriggerType"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger.TriggerType> & _javatypes.xyz.wagyourtail.jsmacros.core.config.ScriptTrigger.TriggerType.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.service.ServiceManager"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager> & _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.service.ServiceTrigger"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceTrigger> & _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceTrigger.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.service.ServiceManager.ServiceStatus"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager.ServiceStatus> & _javatypes.xyz.wagyourtail.jsmacros.core.service.ServiceManager.ServiceStatus.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.service.EventService"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.service.EventService> & _javatypes.xyz.wagyourtail.jsmacros.core.service.EventService.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.event.IEventListener"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.event.IEventListener> & _javatypes.xyz.wagyourtail.jsmacros.core.event.IEventListener.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.event.BaseEventRegistry"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.event.BaseEventRegistry> & _javatypes.xyz.wagyourtail.jsmacros.core.event.BaseEventRegistry.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.event.impl.EventCustom"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.event.impl.EventCustom> & _javatypes.xyz.wagyourtail.jsmacros.core.event.impl.EventCustom.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.extensions.ExtensionLoader"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.extensions.ExtensionLoader> & _javatypes.xyz.wagyourtail.jsmacros.core.extensions.ExtensionLoader.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.extensions.Extension"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension> & _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.extensions.Extension.ExtMatch"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension.ExtMatch> & _javatypes.xyz.wagyourtail.jsmacros.core.extensions.Extension.ExtMatch.static
    export function type(className: "xyz.wagyourtail.jsmacros.core.helpers.BaseHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper> & _javatypes.xyz.wagyourtail.jsmacros.core.helpers.BaseHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.CommandContextHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandContextHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandContextHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ClientPlayerEntityHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.EntityHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.PlayerListEntryHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerListEntryHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerListEntryHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockDataHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemStackHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.BossBarHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BossBarHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BossBarHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.PlayerEntityHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerEntityHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerEntityHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockPosHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.BlockHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.BlockStateHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockStateHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.BlockStateHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.ScoreboardsHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ScoreboardsHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ScoreboardsHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.OptionsHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.OptionsHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.OptionsHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.ServerInfoHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ServerInfoHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ServerInfoHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.CommandNodeHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandNodeHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.CommandNodeHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.LivingEntityHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.LivingEntityHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.LivingEntityHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.PlayerAbilitiesHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerAbilitiesHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.PlayerAbilitiesHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.ScoreboardObjectiveHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ScoreboardObjectiveHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ScoreboardObjectiveHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.TeamHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TeamHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TeamHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.StyleHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.StyleHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.StyleHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.VillagerEntityHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.VillagerEntityHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.VillagerEntityHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.MerchantEntityHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.MerchantEntityHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.MerchantEntityHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.ItemEntityHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemEntityHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ItemEntityHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.StatusEffectHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.StatusEffectHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.StatusEffectHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.TradeOfferHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TradeOfferHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TradeOfferHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper.NBTNumberHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper.NBTNumberHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper.NBTNumberHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper.NBTListHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper.NBTListHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper.NBTListHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper.NBTCompoundHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper.NBTCompoundHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.NBTElementHelper.NBTCompoundHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.RecipeHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.RecipeHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.RecipeHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.ChatHudLineHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ChatHudLineHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ChatHudLineHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.SuggestionsBuilderHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.SuggestionsBuilderHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.SuggestionsBuilderHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.ButtonWidgetHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper> & _javatypes.xyz.wagyourtail.jsmacros.client.api.helpers.TextFieldWidgetHelper.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.Inventory"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Inventory.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.TextBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScannerBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.WorldScanner"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScanner> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.WorldScanner.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.PlayerInput.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.ScriptScreen"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.ScriptScreen> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.ScriptScreen.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.Draw2D"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw2D.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.Draw3D"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandBuilder.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.CommandManager"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandManager> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.CommandManager.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.ChatHistoryManager"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.ChatHistoryManager> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.ChatHistoryManager.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.VillagerInventory"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.VillagerInventory> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.VillagerInventory.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.Draw3D.Box"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D.Box> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D.Box.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.Draw3D.Line"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D.Line> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D.Line.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.classes.Draw3D.Surface"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D.Surface> & _javatypes.xyz.wagyourtail.jsmacros.client.api.classes.Draw3D.Surface.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon.Pos3D"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon.Pos3D> & _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon.Pos3D.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon.Vec3D"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon.Vec3D> & _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon.Vec3D.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon.Vec2D"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon.Vec2D> & _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon.Vec2D.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon.Pos2D"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon.Pos2D> & _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.PositionCommon.Pos2D.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Text"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Text> & _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Text.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Rect"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Rect> & _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Rect.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Item"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Item> & _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Item.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Image"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Image> & _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.Image.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.RenderElement"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.RenderElement> & _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedclasses.RenderCommon.RenderElement.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen> & _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IScreen.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D> & _javatypes.xyz.wagyourtail.jsmacros.client.api.sharedinterfaces.IDraw2D.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.gui.editor.SelectCursor"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.SelectCursor> & _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.SelectCursor.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.gui.editor.History"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.History> & _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.History.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AutoCompleteSuggestion"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AutoCompleteSuggestion> & _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AutoCompleteSuggestion.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AbstractRenderCodeCompiler"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AbstractRenderCodeCompiler> & _javatypes.xyz.wagyourtail.jsmacros.client.gui.editor.highlighting.AbstractRenderCodeCompiler.static
    export function type(className: "xyz.wagyourtail.jsmacros.client.gui.screens.EditorScreen"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.jsmacros.client.gui.screens.EditorScreen> & _javatypes.xyz.wagyourtail.jsmacros.client.gui.screens.EditorScreen.static
    export function type(className: "xyz.wagyourtail.wagyourgui.BaseScreen"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.wagyourgui.BaseScreen> & _javatypes.xyz.wagyourtail.wagyourgui.BaseScreen.static
    export function type(className: "xyz.wagyourtail.wagyourgui.overlays.IOverlayParent"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.wagyourgui.overlays.IOverlayParent> & _javatypes.xyz.wagyourtail.wagyourgui.overlays.IOverlayParent.static
    export function type(className: "xyz.wagyourtail.wagyourgui.overlays.OverlayContainer"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer> & _javatypes.xyz.wagyourtail.wagyourgui.overlays.OverlayContainer.static
    export function type(className: "xyz.wagyourtail.wagyourgui.containers.IContainerParent"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.wagyourgui.containers.IContainerParent> & _javatypes.xyz.wagyourtail.wagyourgui.containers.IContainerParent.static
    export function type(className: "xyz.wagyourtail.wagyourgui.containers.MultiElementContainer"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.wagyourgui.containers.MultiElementContainer> & _javatypes.xyz.wagyourtail.wagyourgui.containers.MultiElementContainer.static
    export function type(className: "xyz.wagyourtail.wagyourgui.elements.Scrollbar"): _javatypes.java.lang.Class<_javatypes.xyz.wagyourtail.wagyourgui.elements.Scrollbar> & _javatypes.xyz.wagyourtail.wagyourgui.elements.Scrollbar.static
    export function type(className: "com.mojang.brigadier.ImmutableStringReader"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.ImmutableStringReader> & _javatypes.com.mojang.brigadier.ImmutableStringReader.static
    export function type(className: "com.mojang.brigadier.Command"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.Command> & _javatypes.com.mojang.brigadier.Command.static
    export function type(className: "com.mojang.brigadier.RedirectModifier"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.RedirectModifier> & _javatypes.com.mojang.brigadier.RedirectModifier.static
    export function type(className: "com.mojang.brigadier.AmbiguityConsumer"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.AmbiguityConsumer> & _javatypes.com.mojang.brigadier.AmbiguityConsumer.static
    export function type(className: "com.mojang.brigadier.StringReader"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.StringReader> & _javatypes.com.mojang.brigadier.StringReader.static
    export function type(className: "com.mojang.brigadier.Message"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.Message> & _javatypes.com.mojang.brigadier.Message.static
    export function type(className: "com.mojang.brigadier.CommandDispatcher"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.CommandDispatcher> & _javatypes.com.mojang.brigadier.CommandDispatcher.static
    export function type(className: "com.mojang.brigadier.ResultConsumer"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.ResultConsumer> & _javatypes.com.mojang.brigadier.ResultConsumer.static
    export function type(className: "com.mojang.brigadier.ParseResults"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.ParseResults> & _javatypes.com.mojang.brigadier.ParseResults.static
    export function type(className: "com.mojang.brigadier.SingleRedirectModifier"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.SingleRedirectModifier> & _javatypes.com.mojang.brigadier.SingleRedirectModifier.static
    export function type(className: "com.mojang.brigadier.context.StringRange"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.context.StringRange> & _javatypes.com.mojang.brigadier.context.StringRange.static
    export function type(className: "com.mojang.brigadier.context.CommandContext"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.context.CommandContext> & _javatypes.com.mojang.brigadier.context.CommandContext.static
    export function type(className: "com.mojang.brigadier.context.CommandContextBuilder"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.context.CommandContextBuilder> & _javatypes.com.mojang.brigadier.context.CommandContextBuilder.static
    export function type(className: "com.mojang.brigadier.context.ParsedCommandNode"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.context.ParsedCommandNode> & _javatypes.com.mojang.brigadier.context.ParsedCommandNode.static
    export function type(className: "com.mojang.brigadier.context.ParsedArgument"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.context.ParsedArgument> & _javatypes.com.mojang.brigadier.context.ParsedArgument.static
    export function type(className: "com.mojang.brigadier.context.SuggestionContext"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.context.SuggestionContext> & _javatypes.com.mojang.brigadier.context.SuggestionContext.static
    export function type(className: "com.mojang.brigadier.tree.CommandNode"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.tree.CommandNode> & _javatypes.com.mojang.brigadier.tree.CommandNode.static
    export function type(className: "com.mojang.brigadier.tree.LiteralCommandNode"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.tree.LiteralCommandNode> & _javatypes.com.mojang.brigadier.tree.LiteralCommandNode.static
    export function type(className: "com.mojang.brigadier.tree.RootCommandNode"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.tree.RootCommandNode> & _javatypes.com.mojang.brigadier.tree.RootCommandNode.static
    export function type(className: "com.mojang.brigadier.suggestion.SuggestionsBuilder"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder> & _javatypes.com.mojang.brigadier.suggestion.SuggestionsBuilder.static
    export function type(className: "com.mojang.brigadier.suggestion.Suggestions"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.suggestion.Suggestions> & _javatypes.com.mojang.brigadier.suggestion.Suggestions.static
    export function type(className: "com.mojang.brigadier.suggestion.Suggestion"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.suggestion.Suggestion> & _javatypes.com.mojang.brigadier.suggestion.Suggestion.static
    export function type(className: "com.mojang.brigadier.builder.ArgumentBuilder"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.builder.ArgumentBuilder> & _javatypes.com.mojang.brigadier.builder.ArgumentBuilder.static
    export function type(className: "com.mojang.brigadier.builder.LiteralArgumentBuilder"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.builder.LiteralArgumentBuilder> & _javatypes.com.mojang.brigadier.builder.LiteralArgumentBuilder.static
    export function type(className: "com.mojang.brigadier.exceptions.CommandSyntaxException"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.exceptions.CommandSyntaxException> & _javatypes.com.mojang.brigadier.exceptions.CommandSyntaxException.static
    export function type(className: "com.mojang.brigadier.exceptions.CommandExceptionType"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.exceptions.CommandExceptionType> & _javatypes.com.mojang.brigadier.exceptions.CommandExceptionType.static
    export function type(className: "com.mojang.brigadier.exceptions.BuiltInExceptionProvider"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.exceptions.BuiltInExceptionProvider> & _javatypes.com.mojang.brigadier.exceptions.BuiltInExceptionProvider.static
    export function type(className: "com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType> & _javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType.static
    export function type(className: "com.mojang.brigadier.exceptions.DynamicCommandExceptionType"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.exceptions.DynamicCommandExceptionType> & _javatypes.com.mojang.brigadier.exceptions.DynamicCommandExceptionType.static
    export function type(className: "com.mojang.brigadier.exceptions.SimpleCommandExceptionType"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType> & _javatypes.com.mojang.brigadier.exceptions.SimpleCommandExceptionType.static
    export function type(className: "com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType.Function"): _javatypes.java.lang.Class<_javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType.Function> & _javatypes.com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType.Function.static
    export function type(className: "com.google.gson.JsonObject"): _javatypes.java.lang.Class<_javatypes.com.google.gson.JsonObject> & _javatypes.com.google.gson.JsonObject.static
    export function type(className: "com.google.gson.JsonElement"): _javatypes.java.lang.Class<_javatypes.com.google.gson.JsonElement> & _javatypes.com.google.gson.JsonElement.static
    export function type(className: "com.google.gson.JsonPrimitive"): _javatypes.java.lang.Class<_javatypes.com.google.gson.JsonPrimitive> & _javatypes.com.google.gson.JsonPrimitive.static
    export function type(className: "com.google.gson.JsonArray"): _javatypes.java.lang.Class<_javatypes.com.google.gson.JsonArray> & _javatypes.com.google.gson.JsonArray.static
    export function type(className: "com.google.gson.JsonNull"): _javatypes.java.lang.Class<_javatypes.com.google.gson.JsonNull> & _javatypes.com.google.gson.JsonNull.static
    export function type(className: "com.neovisionaries.ws.client.WebSocket"): _javatypes.java.lang.Class<_javatypes.com.neovisionaries.ws.client.WebSocket> & _javatypes.com.neovisionaries.ws.client.WebSocket.static
    export function type(className: "com.neovisionaries.ws.client.WebSocketException"): _javatypes.java.lang.Class<_javatypes.com.neovisionaries.ws.client.WebSocketException> & _javatypes.com.neovisionaries.ws.client.WebSocketException.static
    export function type(className: "com.neovisionaries.ws.client.WebSocketFrame"): _javatypes.java.lang.Class<_javatypes.com.neovisionaries.ws.client.WebSocketFrame> & _javatypes.com.neovisionaries.ws.client.WebSocketFrame.static
    export function type(className: "com.neovisionaries.ws.client.WebSocketError"): _javatypes.java.lang.Class<_javatypes.com.neovisionaries.ws.client.WebSocketError> & _javatypes.com.neovisionaries.ws.client.WebSocketError.static
    export function type(className: "com.neovisionaries.ws.client.WebSocketState"): _javatypes.java.lang.Class<_javatypes.com.neovisionaries.ws.client.WebSocketState> & _javatypes.com.neovisionaries.ws.client.WebSocketState.static
    export function type(className: "com.neovisionaries.ws.client.WebSocketExtension"): _javatypes.java.lang.Class<_javatypes.com.neovisionaries.ws.client.WebSocketExtension> & _javatypes.com.neovisionaries.ws.client.WebSocketExtension.static
    export function type(className: "com.neovisionaries.ws.client.PayloadGenerator"): _javatypes.java.lang.Class<_javatypes.com.neovisionaries.ws.client.PayloadGenerator> & _javatypes.com.neovisionaries.ws.client.PayloadGenerator.static
    export function type(className: "com.neovisionaries.ws.client.WebSocketListener"): _javatypes.java.lang.Class<_javatypes.com.neovisionaries.ws.client.WebSocketListener> & _javatypes.com.neovisionaries.ws.client.WebSocketListener.static
    export function type(className: "com.neovisionaries.ws.client.ThreadType"): _javatypes.java.lang.Class<_javatypes.com.neovisionaries.ws.client.ThreadType> & _javatypes.com.neovisionaries.ws.client.ThreadType.static
    export function type(className: "io.noties.prism4j.Prism4j.Node"): _javatypes.java.lang.Class<_javatypes.io.noties.prism4j.Prism4j.Node> & _javatypes.io.noties.prism4j.Prism4j.Node.static
    export function type(className: "javax.sound.sampled.Clip"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.Clip> & _javatypes.javax.sound.sampled.Clip.static
    export function type(className: "javax.sound.sampled.DataLine"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.DataLine> & _javatypes.javax.sound.sampled.DataLine.static
    export function type(className: "javax.sound.sampled.AudioFormat"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.AudioFormat> & _javatypes.javax.sound.sampled.AudioFormat.static
    export function type(className: "javax.sound.sampled.AudioInputStream"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.AudioInputStream> & _javatypes.javax.sound.sampled.AudioInputStream.static
    export function type(className: "javax.sound.sampled.TargetDataLine"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.TargetDataLine> & _javatypes.javax.sound.sampled.TargetDataLine.static
    export function type(className: "javax.sound.sampled.AudioFormat.Encoding"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.AudioFormat.Encoding> & _javatypes.javax.sound.sampled.AudioFormat.Encoding.static
    export function type(className: "javax.sound.sampled.Line"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.Line> & _javatypes.javax.sound.sampled.Line.static
    export function type(className: "javax.sound.sampled.Line.Info"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.Line.Info> & _javatypes.javax.sound.sampled.Line.Info.static
    export function type(className: "javax.sound.sampled.Control"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.Control> & _javatypes.javax.sound.sampled.Control.static
    export function type(className: "javax.sound.sampled.Control.Type"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.Control.Type> & _javatypes.javax.sound.sampled.Control.Type.static
    export function type(className: "javax.sound.sampled.LineListener"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.LineListener> & _javatypes.javax.sound.sampled.LineListener.static
    export function type(className: "javax.sound.sampled.LineEvent"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.LineEvent> & _javatypes.javax.sound.sampled.LineEvent.static
    export function type(className: "javax.sound.sampled.LineEvent.Type"): _javatypes.java.lang.Class<_javatypes.javax.sound.sampled.LineEvent.Type> & _javatypes.javax.sound.sampled.LineEvent.Type.static
    export function type(className: "javax.security.auth.Subject"): _javatypes.java.lang.Class<_javatypes.javax.security.auth.Subject> & _javatypes.javax.security.auth.Subject.static
    export function type(className: "java.io.IOException"): _javatypes.java.lang.Class<_javatypes.java.io.IOException> & _javatypes.java.io.IOException.static
    export function type(className: "java.io.InputStream"): _javatypes.java.lang.Class<_javatypes.java.io.InputStream> & _javatypes.java.io.InputStream.static
    export function type(className: "java.io.Closeable"): _javatypes.java.lang.Class<_javatypes.java.io.Closeable> & _javatypes.java.io.Closeable.static
    export function type(className: "java.io.OutputStream"): _javatypes.java.lang.Class<_javatypes.java.io.OutputStream> & _javatypes.java.io.OutputStream.static
    export function type(className: "java.io.Flushable"): _javatypes.java.lang.Class<_javatypes.java.io.Flushable> & _javatypes.java.io.Flushable.static
    export function type(className: "java.io.DataOutputStream"): _javatypes.java.lang.Class<_javatypes.java.io.DataOutputStream> & _javatypes.java.io.DataOutputStream.static
    export function type(className: "java.io.PrintWriter"): _javatypes.java.lang.Class<_javatypes.java.io.PrintWriter> & _javatypes.java.io.PrintWriter.static
    export function type(className: "java.io.DataInputStream"): _javatypes.java.lang.Class<_javatypes.java.io.DataInputStream> & _javatypes.java.io.DataInputStream.static
    export function type(className: "java.io.PrintStream"): _javatypes.java.lang.Class<_javatypes.java.io.PrintStream> & _javatypes.java.io.PrintStream.static
    export function type(className: "java.io.FilterOutputStream"): _javatypes.java.lang.Class<_javatypes.java.io.FilterOutputStream> & _javatypes.java.io.FilterOutputStream.static
    export function type(className: "java.io.DataOutput"): _javatypes.java.lang.Class<_javatypes.java.io.DataOutput> & _javatypes.java.io.DataOutput.static
    export function type(className: "java.io.FilterInputStream"): _javatypes.java.lang.Class<_javatypes.java.io.FilterInputStream> & _javatypes.java.io.FilterInputStream.static
    export function type(className: "java.io.DataInput"): _javatypes.java.lang.Class<_javatypes.java.io.DataInput> & _javatypes.java.io.DataInput.static
    export function type(className: "java.io.Writer"): _javatypes.java.lang.Class<_javatypes.java.io.Writer> & _javatypes.java.io.Writer.static
    export function type(className: "java.io.Reader"): _javatypes.java.lang.Class<_javatypes.java.io.Reader> & _javatypes.java.io.Reader.static
    export function type(className: "java.lang.Exception"): _javatypes.java.lang.Class<_javatypes.java.lang.Exception> & _javatypes.java.lang.Exception.static
    export function type(className: "java.lang.Runnable"): _javatypes.java.lang.Class<_javatypes.java.lang.Runnable> & _javatypes.java.lang.Runnable.static
    export function type(className: "java.lang.Thread"): _javatypes.java.lang.Class<_javatypes.java.lang.Thread> & _javatypes.java.lang.Thread.static
    export function type(className: "java.lang.Enum"): _javatypes.java.lang.Class<_javatypes.java.lang.Enum> & _javatypes.java.lang.Enum.static
    export function type(className: "java.lang.Number"): _javatypes.java.lang.Class<_javatypes.java.lang.Number> & _javatypes.java.lang.Number.static
    export function type(className: "java.lang.AutoCloseable"): _javatypes.java.lang.Class<_javatypes.java.lang.AutoCloseable> & _javatypes.java.lang.AutoCloseable.static
    export function type(className: "java.lang.Comparable"): _javatypes.java.lang.Class<_javatypes.java.lang.Comparable> & _javatypes.java.lang.Comparable.static
    export function type(className: "java.lang.Enum.EnumDesc"): _javatypes.java.lang.Class<_javatypes.java.lang.Enum.EnumDesc> & _javatypes.java.lang.Enum.EnumDesc.static
    export function type(className: "java.lang.ThreadGroup"): _javatypes.java.lang.Class<_javatypes.java.lang.ThreadGroup> & _javatypes.java.lang.ThreadGroup.static
    export function type(className: "java.lang.ClassLoader"): _javatypes.java.lang.Class<_javatypes.java.lang.ClassLoader> & _javatypes.java.lang.ClassLoader.static
    export function type(className: "java.lang.Thread.State"): _javatypes.java.lang.Class<_javatypes.java.lang.Thread.State> & _javatypes.java.lang.Thread.State.static
    export function type(className: "java.lang.Thread.UncaughtExceptionHandler"): _javatypes.java.lang.Class<_javatypes.java.lang.Thread.UncaughtExceptionHandler> & _javatypes.java.lang.Thread.UncaughtExceptionHandler.static
    export function type(className: "java.lang.Module"): _javatypes.java.lang.Class<_javatypes.java.lang.Module> & _javatypes.java.lang.Module.static
    export function type(className: "java.lang.Package"): _javatypes.java.lang.Class<_javatypes.java.lang.Package> & _javatypes.java.lang.Package.static
    export function type(className: "java.lang.NamedPackage"): _javatypes.java.lang.Class<_javatypes.java.lang.NamedPackage> & _javatypes.java.lang.NamedPackage.static
    export function type(className: "java.lang.ModuleLayer"): _javatypes.java.lang.Class<_javatypes.java.lang.ModuleLayer> & _javatypes.java.lang.ModuleLayer.static
    export function type(className: "java.lang.ModuleLayer.Controller"): _javatypes.java.lang.Class<_javatypes.java.lang.ModuleLayer.Controller> & _javatypes.java.lang.ModuleLayer.Controller.static
    export function type(className: "java.lang.Iterable"): _javatypes.java.lang.Class<_javatypes.java.lang.Iterable> & _javatypes.java.lang.Iterable.static
    export function type(className: "java.lang.Appendable"): _javatypes.java.lang.Class<_javatypes.java.lang.Appendable> & _javatypes.java.lang.Appendable.static
    export function type(className: "java.lang.CharSequence"): _javatypes.java.lang.Class<_javatypes.java.lang.CharSequence> & _javatypes.java.lang.CharSequence.static
    export function type(className: "java.lang.Readable"): _javatypes.java.lang.Class<_javatypes.java.lang.Readable> & _javatypes.java.lang.Readable.static
    export function type(className: "java.lang.Cloneable"): _javatypes.java.lang.Class<_javatypes.java.lang.Cloneable> & _javatypes.java.lang.Cloneable.static
    export function type(className: "java.lang.Void"): _javatypes.java.lang.Class<_javatypes.java.lang.Void> & _javatypes.java.lang.Void.static
    export function type(className: "java.lang.StringBuffer"): _javatypes.java.lang.Class<_javatypes.java.lang.StringBuffer> & _javatypes.java.lang.StringBuffer.static
    export function type(className: "java.lang.AbstractStringBuilder"): _javatypes.java.lang.Class<_javatypes.java.lang.AbstractStringBuilder> & _javatypes.java.lang.AbstractStringBuilder.static
    export function type(className: "java.lang.reflect.Method"): _javatypes.java.lang.Class<_javatypes.java.lang.reflect.Method> & _javatypes.java.lang.reflect.Method.static
    export function type(className: "java.lang.reflect.Field"): _javatypes.java.lang.Class<_javatypes.java.lang.reflect.Field> & _javatypes.java.lang.reflect.Field.static
    export function type(className: "java.lang.reflect.Executable"): _javatypes.java.lang.Class<_javatypes.java.lang.reflect.Executable> & _javatypes.java.lang.reflect.Executable.static
    export function type(className: "java.lang.reflect.TypeVariable"): _javatypes.java.lang.Class<_javatypes.java.lang.reflect.TypeVariable> & _javatypes.java.lang.reflect.TypeVariable.static
    export function type(className: "java.lang.reflect.Type"): _javatypes.java.lang.Class<_javatypes.java.lang.reflect.Type> & _javatypes.java.lang.reflect.Type.static
    export function type(className: "java.lang.reflect.AnnotatedType"): _javatypes.java.lang.Class<_javatypes.java.lang.reflect.AnnotatedType> & _javatypes.java.lang.reflect.AnnotatedType.static
    export function type(className: "java.lang.reflect.AccessibleObject"): _javatypes.java.lang.Class<_javatypes.java.lang.reflect.AccessibleObject> & _javatypes.java.lang.reflect.AccessibleObject.static
    export function type(className: "java.lang.reflect.Member"): _javatypes.java.lang.Class<_javatypes.java.lang.reflect.Member> & _javatypes.java.lang.reflect.Member.static
    export function type(className: "java.lang.reflect.AnnotatedElement"): _javatypes.java.lang.Class<_javatypes.java.lang.reflect.AnnotatedElement> & _javatypes.java.lang.reflect.AnnotatedElement.static
    export function type(className: "java.lang.reflect.GenericDeclaration"): _javatypes.java.lang.Class<_javatypes.java.lang.reflect.GenericDeclaration> & _javatypes.java.lang.reflect.GenericDeclaration.static
    export function type(className: "java.lang.reflect.Parameter"): _javatypes.java.lang.Class<_javatypes.java.lang.reflect.Parameter> & _javatypes.java.lang.reflect.Parameter.static
    export function type(className: "java.lang.reflect.Constructor"): _javatypes.java.lang.Class<_javatypes.java.lang.reflect.Constructor> & _javatypes.java.lang.reflect.Constructor.static
    export function type(className: "java.lang.annotation.Annotation"): _javatypes.java.lang.Class<_javatypes.java.lang.annotation.Annotation> & _javatypes.java.lang.annotation.Annotation.static
    export function type(className: "java.lang.ref.WeakReference"): _javatypes.java.lang.Class<_javatypes.java.lang.ref.WeakReference> & _javatypes.java.lang.ref.WeakReference.static
    export function type(className: "java.lang.ref.Reference"): _javatypes.java.lang.Class<_javatypes.java.lang.ref.Reference> & _javatypes.java.lang.ref.Reference.static
    export function type(className: "java.lang.ref.ReferenceQueue"): _javatypes.java.lang.Class<_javatypes.java.lang.ref.ReferenceQueue> & _javatypes.java.lang.ref.ReferenceQueue.static
    export function type(className: "java.lang.constant.Constable"): _javatypes.java.lang.Class<_javatypes.java.lang.constant.Constable> & _javatypes.java.lang.constant.Constable.static
    export function type(className: "java.lang.constant.DynamicConstantDesc"): _javatypes.java.lang.Class<_javatypes.java.lang.constant.DynamicConstantDesc> & _javatypes.java.lang.constant.DynamicConstantDesc.static
    export function type(className: "java.lang.constant.ClassDesc"): _javatypes.java.lang.Class<_javatypes.java.lang.constant.ClassDesc> & _javatypes.java.lang.constant.ClassDesc.static
    export function type(className: "java.lang.constant.ConstantDesc"): _javatypes.java.lang.Class<_javatypes.java.lang.constant.ConstantDesc> & _javatypes.java.lang.constant.ConstantDesc.static
    export function type(className: "java.lang.constant.DirectMethodHandleDesc"): _javatypes.java.lang.Class<_javatypes.java.lang.constant.DirectMethodHandleDesc> & _javatypes.java.lang.constant.DirectMethodHandleDesc.static
    export function type(className: "java.lang.constant.MethodHandleDesc"): _javatypes.java.lang.Class<_javatypes.java.lang.constant.MethodHandleDesc> & _javatypes.java.lang.constant.MethodHandleDesc.static
    export function type(className: "java.lang.constant.DirectMethodHandleDesc.Kind"): _javatypes.java.lang.Class<_javatypes.java.lang.constant.DirectMethodHandleDesc.Kind> & _javatypes.java.lang.constant.DirectMethodHandleDesc.Kind.static
    export function type(className: "java.lang.constant.MethodTypeDesc"): _javatypes.java.lang.Class<_javatypes.java.lang.constant.MethodTypeDesc> & _javatypes.java.lang.constant.MethodTypeDesc.static
    export function type(className: "java.lang.invoke.MethodHandles.Lookup"): _javatypes.java.lang.Class<_javatypes.java.lang.invoke.MethodHandles.Lookup> & _javatypes.java.lang.invoke.MethodHandles.Lookup.static
    export function type(className: "java.lang.invoke.TypeDescriptor.OfField"): _javatypes.java.lang.Class<_javatypes.java.lang.invoke.TypeDescriptor.OfField> & _javatypes.java.lang.invoke.TypeDescriptor.OfField.static
    export function type(className: "java.lang.invoke.TypeDescriptor.OfMethod"): _javatypes.java.lang.Class<_javatypes.java.lang.invoke.TypeDescriptor.OfMethod> & _javatypes.java.lang.invoke.TypeDescriptor.OfMethod.static
    export function type(className: "java.lang.invoke.MethodHandles.Lookup.ClassOption"): _javatypes.java.lang.Class<_javatypes.java.lang.invoke.MethodHandles.Lookup.ClassOption> & _javatypes.java.lang.invoke.MethodHandles.Lookup.ClassOption.static
    export function type(className: "java.lang.invoke.MethodType"): _javatypes.java.lang.Class<_javatypes.java.lang.invoke.MethodType> & _javatypes.java.lang.invoke.MethodType.static
    export function type(className: "java.lang.invoke.MethodHandle"): _javatypes.java.lang.Class<_javatypes.java.lang.invoke.MethodHandle> & _javatypes.java.lang.invoke.MethodHandle.static
    export function type(className: "java.lang.invoke.VarHandle"): _javatypes.java.lang.Class<_javatypes.java.lang.invoke.VarHandle> & _javatypes.java.lang.invoke.VarHandle.static
    export function type(className: "java.lang.invoke.MethodHandleInfo"): _javatypes.java.lang.Class<_javatypes.java.lang.invoke.MethodHandleInfo> & _javatypes.java.lang.invoke.MethodHandleInfo.static
    export function type(className: "java.lang.invoke.TypeDescriptor"): _javatypes.java.lang.Class<_javatypes.java.lang.invoke.TypeDescriptor> & _javatypes.java.lang.invoke.TypeDescriptor.static
    export function type(className: "java.lang.invoke.VarHandle.AccessMode"): _javatypes.java.lang.Class<_javatypes.java.lang.invoke.VarHandle.AccessMode> & _javatypes.java.lang.invoke.VarHandle.AccessMode.static
    export function type(className: "java.lang.invoke.VarHandle.VarHandleDesc"): _javatypes.java.lang.Class<_javatypes.java.lang.invoke.VarHandle.VarHandleDesc> & _javatypes.java.lang.invoke.VarHandle.VarHandleDesc.static
    export function type(className: "java.lang.module.ModuleDescriptor"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleDescriptor> & _javatypes.java.lang.module.ModuleDescriptor.static
    export function type(className: "java.lang.module.ModuleDescriptor.Modifier"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleDescriptor.Modifier> & _javatypes.java.lang.module.ModuleDescriptor.Modifier.static
    export function type(className: "java.lang.module.ModuleDescriptor.Requires"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleDescriptor.Requires> & _javatypes.java.lang.module.ModuleDescriptor.Requires.static
    export function type(className: "java.lang.module.ModuleDescriptor.Exports"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleDescriptor.Exports> & _javatypes.java.lang.module.ModuleDescriptor.Exports.static
    export function type(className: "java.lang.module.ModuleDescriptor.Opens"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleDescriptor.Opens> & _javatypes.java.lang.module.ModuleDescriptor.Opens.static
    export function type(className: "java.lang.module.ModuleDescriptor.Provides"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleDescriptor.Provides> & _javatypes.java.lang.module.ModuleDescriptor.Provides.static
    export function type(className: "java.lang.module.ModuleDescriptor.Version"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleDescriptor.Version> & _javatypes.java.lang.module.ModuleDescriptor.Version.static
    export function type(className: "java.lang.module.ModuleDescriptor.Builder"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleDescriptor.Builder> & _javatypes.java.lang.module.ModuleDescriptor.Builder.static
    export function type(className: "java.lang.module.ModuleDescriptor.Requires.Modifier"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleDescriptor.Requires.Modifier> & _javatypes.java.lang.module.ModuleDescriptor.Requires.Modifier.static
    export function type(className: "java.lang.module.ModuleDescriptor.Exports.Modifier"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleDescriptor.Exports.Modifier> & _javatypes.java.lang.module.ModuleDescriptor.Exports.Modifier.static
    export function type(className: "java.lang.module.ModuleDescriptor.Opens.Modifier"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleDescriptor.Opens.Modifier> & _javatypes.java.lang.module.ModuleDescriptor.Opens.Modifier.static
    export function type(className: "java.lang.module.Configuration"): _javatypes.java.lang.Class<_javatypes.java.lang.module.Configuration> & _javatypes.java.lang.module.Configuration.static
    export function type(className: "java.lang.module.ModuleFinder"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleFinder> & _javatypes.java.lang.module.ModuleFinder.static
    export function type(className: "java.lang.module.ResolvedModule"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ResolvedModule> & _javatypes.java.lang.module.ResolvedModule.static
    export function type(className: "java.lang.module.ModuleReference"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleReference> & _javatypes.java.lang.module.ModuleReference.static
    export function type(className: "java.lang.module.ModuleReader"): _javatypes.java.lang.Class<_javatypes.java.lang.module.ModuleReader> & _javatypes.java.lang.module.ModuleReader.static
    export function type(className: "java.util.Iterator"): _javatypes.java.lang.Class<_javatypes.java.util.Iterator> & _javatypes.java.util.Iterator.static
    export function type(className: "java.util.Comparator"): _javatypes.java.lang.Class<_javatypes.java.util.Comparator> & _javatypes.java.util.Comparator.static
    export function type(className: "java.util.EventListener"): _javatypes.java.lang.Class<_javatypes.java.util.EventListener> & _javatypes.java.util.EventListener.static
    export function type(className: "java.util.EventObject"): _javatypes.java.lang.Class<_javatypes.java.util.EventObject> & _javatypes.java.util.EventObject.static
    export function type(className: "java.util.Optional"): _javatypes.java.lang.Class<_javatypes.java.util.Optional> & _javatypes.java.util.Optional.static
    export function type(className: "java.util.Enumeration"): _javatypes.java.lang.Class<_javatypes.java.util.Enumeration> & _javatypes.java.util.Enumeration.static
    export function type(className: "java.util.OptionalLong"): _javatypes.java.lang.Class<_javatypes.java.util.OptionalLong> & _javatypes.java.util.OptionalLong.static
    export function type(className: "java.util.OptionalDouble"): _javatypes.java.lang.Class<_javatypes.java.util.OptionalDouble> & _javatypes.java.util.OptionalDouble.static
    export function type(className: "java.util.LongSummaryStatistics"): _javatypes.java.lang.Class<_javatypes.java.util.LongSummaryStatistics> & _javatypes.java.util.LongSummaryStatistics.static
    export function type(className: "java.util.PrimitiveIterator.OfLong"): _javatypes.java.lang.Class<_javatypes.java.util.PrimitiveIterator.OfLong> & _javatypes.java.util.PrimitiveIterator.OfLong.static
    export function type(className: "java.util.Spliterator.OfLong"): _javatypes.java.lang.Class<_javatypes.java.util.Spliterator.OfLong> & _javatypes.java.util.Spliterator.OfLong.static
    export function type(className: "java.util.OptionalInt"): _javatypes.java.lang.Class<_javatypes.java.util.OptionalInt> & _javatypes.java.util.OptionalInt.static
    export function type(className: "java.util.IntSummaryStatistics"): _javatypes.java.lang.Class<_javatypes.java.util.IntSummaryStatistics> & _javatypes.java.util.IntSummaryStatistics.static
    export function type(className: "java.util.PrimitiveIterator.OfInt"): _javatypes.java.lang.Class<_javatypes.java.util.PrimitiveIterator.OfInt> & _javatypes.java.util.PrimitiveIterator.OfInt.static
    export function type(className: "java.util.Spliterator.OfInt"): _javatypes.java.lang.Class<_javatypes.java.util.Spliterator.OfInt> & _javatypes.java.util.Spliterator.OfInt.static
    export function type(className: "java.util.DoubleSummaryStatistics"): _javatypes.java.lang.Class<_javatypes.java.util.DoubleSummaryStatistics> & _javatypes.java.util.DoubleSummaryStatistics.static
    export function type(className: "java.util.PrimitiveIterator.OfDouble"): _javatypes.java.lang.Class<_javatypes.java.util.PrimitiveIterator.OfDouble> & _javatypes.java.util.PrimitiveIterator.OfDouble.static
    export function type(className: "java.util.Spliterator.OfDouble"): _javatypes.java.lang.Class<_javatypes.java.util.Spliterator.OfDouble> & _javatypes.java.util.Spliterator.OfDouble.static
    export function type(className: "java.util.Spliterator"): _javatypes.java.lang.Class<_javatypes.java.util.Spliterator> & _javatypes.java.util.Spliterator.static
    export function type(className: "java.util.Spliterator.OfPrimitive"): _javatypes.java.lang.Class<_javatypes.java.util.Spliterator.OfPrimitive> & _javatypes.java.util.Spliterator.OfPrimitive.static
    export function type(className: "java.util.PrimitiveIterator"): _javatypes.java.lang.Class<_javatypes.java.util.PrimitiveIterator> & _javatypes.java.util.PrimitiveIterator.static
    export function type(className: "java.util.Locale"): _javatypes.java.lang.Class<_javatypes.java.util.Locale> & _javatypes.java.util.Locale.static
    export function type(className: "java.util.Locale.Category"): _javatypes.java.lang.Class<_javatypes.java.util.Locale.Category> & _javatypes.java.util.Locale.Category.static
    export function type(className: "java.util.Locale.IsoCountryCode"): _javatypes.java.lang.Class<_javatypes.java.util.Locale.IsoCountryCode> & _javatypes.java.util.Locale.IsoCountryCode.static
    export function type(className: "java.util.Locale.LanguageRange"): _javatypes.java.lang.Class<_javatypes.java.util.Locale.LanguageRange> & _javatypes.java.util.Locale.LanguageRange.static
    export function type(className: "java.util.Locale.FilteringMode"): _javatypes.java.lang.Class<_javatypes.java.util.Locale.FilteringMode> & _javatypes.java.util.Locale.FilteringMode.static
    export function type(className: "java.util.HashMap"): _javatypes.java.lang.Class<_javatypes.java.util.HashMap> & _javatypes.java.util.HashMap.static
    export function type(className: "java.util.Map.Entry"): _javatypes.java.lang.Class<_javatypes.java.util.Map.Entry> & _javatypes.java.util.Map.Entry.static
    export function type(className: "java.util.AbstractMap"): _javatypes.java.lang.Class<_javatypes.java.util.AbstractMap> & _javatypes.java.util.AbstractMap.static
    export function type(className: "java.util.Properties"): _javatypes.java.lang.Class<_javatypes.java.util.Properties> & _javatypes.java.util.Properties.static
    export function type(className: "java.util.Date"): _javatypes.java.lang.Class<_javatypes.java.util.Date> & _javatypes.java.util.Date.static
    export function type(className: "java.util.Random"): _javatypes.java.lang.Class<_javatypes.java.util.Random> & _javatypes.java.util.Random.static
    export function type(className: "java.util.SortedMap"): _javatypes.java.lang.Class<_javatypes.java.util.SortedMap> & _javatypes.java.util.SortedMap.static
    export function type(className: "java.util.Hashtable"): _javatypes.java.lang.Class<_javatypes.java.util.Hashtable> & _javatypes.java.util.Hashtable.static
    export function type(className: "java.util.Dictionary"): _javatypes.java.lang.Class<_javatypes.java.util.Dictionary> & _javatypes.java.util.Dictionary.static
    export function type(className: "java.util.function.Consumer"): _javatypes.java.lang.Class<_javatypes.java.util._function.Consumer> & _javatypes.java.util._function.Consumer.static
    export function type(className: "java.util.function.BiConsumer"): _javatypes.java.lang.Class<_javatypes.java.util._function.BiConsumer> & _javatypes.java.util._function.BiConsumer.static
    export function type(className: "java.util.function.Function"): _javatypes.java.lang.Class<_javatypes.java.util._function.Function> & _javatypes.java.util._function.Function.static
    export function type(className: "java.util.function.BiFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.BiFunction> & _javatypes.java.util._function.BiFunction.static
    export function type(className: "java.util.function.Predicate"): _javatypes.java.lang.Class<_javatypes.java.util._function.Predicate> & _javatypes.java.util._function.Predicate.static
    export function type(className: "java.util.function.BiPredicate"): _javatypes.java.lang.Class<_javatypes.java.util._function.BiPredicate> & _javatypes.java.util._function.BiPredicate.static
    export function type(className: "java.util.function.Supplier"): _javatypes.java.lang.Class<_javatypes.java.util._function.Supplier> & _javatypes.java.util._function.Supplier.static
    export function type(className: "java.util.function.ToIntFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.ToIntFunction> & _javatypes.java.util._function.ToIntFunction.static
    export function type(className: "java.util.function.ToLongFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.ToLongFunction> & _javatypes.java.util._function.ToLongFunction.static
    export function type(className: "java.util.function.ToDoubleFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.ToDoubleFunction> & _javatypes.java.util._function.ToDoubleFunction.static
    export function type(className: "java.util.function.IntFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.IntFunction> & _javatypes.java.util._function.IntFunction.static
    export function type(className: "java.util.function.BinaryOperator"): _javatypes.java.lang.Class<_javatypes.java.util._function.BinaryOperator> & _javatypes.java.util._function.BinaryOperator.static
    export function type(className: "java.util.function.UnaryOperator"): _javatypes.java.lang.Class<_javatypes.java.util._function.UnaryOperator> & _javatypes.java.util._function.UnaryOperator.static
    export function type(className: "java.util.function.LongPredicate"): _javatypes.java.lang.Class<_javatypes.java.util._function.LongPredicate> & _javatypes.java.util._function.LongPredicate.static
    export function type(className: "java.util.function.LongUnaryOperator"): _javatypes.java.lang.Class<_javatypes.java.util._function.LongUnaryOperator> & _javatypes.java.util._function.LongUnaryOperator.static
    export function type(className: "java.util.function.LongFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.LongFunction> & _javatypes.java.util._function.LongFunction.static
    export function type(className: "java.util.function.LongToIntFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.LongToIntFunction> & _javatypes.java.util._function.LongToIntFunction.static
    export function type(className: "java.util.function.LongToDoubleFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.LongToDoubleFunction> & _javatypes.java.util._function.LongToDoubleFunction.static
    export function type(className: "java.util.function.LongConsumer"): _javatypes.java.lang.Class<_javatypes.java.util._function.LongConsumer> & _javatypes.java.util._function.LongConsumer.static
    export function type(className: "java.util.function.LongBinaryOperator"): _javatypes.java.lang.Class<_javatypes.java.util._function.LongBinaryOperator> & _javatypes.java.util._function.LongBinaryOperator.static
    export function type(className: "java.util.function.ObjLongConsumer"): _javatypes.java.lang.Class<_javatypes.java.util._function.ObjLongConsumer> & _javatypes.java.util._function.ObjLongConsumer.static
    export function type(className: "java.util.function.LongSupplier"): _javatypes.java.lang.Class<_javatypes.java.util._function.LongSupplier> & _javatypes.java.util._function.LongSupplier.static
    export function type(className: "java.util.function.IntPredicate"): _javatypes.java.lang.Class<_javatypes.java.util._function.IntPredicate> & _javatypes.java.util._function.IntPredicate.static
    export function type(className: "java.util.function.IntUnaryOperator"): _javatypes.java.lang.Class<_javatypes.java.util._function.IntUnaryOperator> & _javatypes.java.util._function.IntUnaryOperator.static
    export function type(className: "java.util.function.IntToLongFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.IntToLongFunction> & _javatypes.java.util._function.IntToLongFunction.static
    export function type(className: "java.util.function.IntToDoubleFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.IntToDoubleFunction> & _javatypes.java.util._function.IntToDoubleFunction.static
    export function type(className: "java.util.function.IntConsumer"): _javatypes.java.lang.Class<_javatypes.java.util._function.IntConsumer> & _javatypes.java.util._function.IntConsumer.static
    export function type(className: "java.util.function.IntBinaryOperator"): _javatypes.java.lang.Class<_javatypes.java.util._function.IntBinaryOperator> & _javatypes.java.util._function.IntBinaryOperator.static
    export function type(className: "java.util.function.ObjIntConsumer"): _javatypes.java.lang.Class<_javatypes.java.util._function.ObjIntConsumer> & _javatypes.java.util._function.ObjIntConsumer.static
    export function type(className: "java.util.function.IntSupplier"): _javatypes.java.lang.Class<_javatypes.java.util._function.IntSupplier> & _javatypes.java.util._function.IntSupplier.static
    export function type(className: "java.util.function.DoublePredicate"): _javatypes.java.lang.Class<_javatypes.java.util._function.DoublePredicate> & _javatypes.java.util._function.DoublePredicate.static
    export function type(className: "java.util.function.DoubleUnaryOperator"): _javatypes.java.lang.Class<_javatypes.java.util._function.DoubleUnaryOperator> & _javatypes.java.util._function.DoubleUnaryOperator.static
    export function type(className: "java.util.function.DoubleFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.DoubleFunction> & _javatypes.java.util._function.DoubleFunction.static
    export function type(className: "java.util.function.DoubleToIntFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.DoubleToIntFunction> & _javatypes.java.util._function.DoubleToIntFunction.static
    export function type(className: "java.util.function.DoubleToLongFunction"): _javatypes.java.lang.Class<_javatypes.java.util._function.DoubleToLongFunction> & _javatypes.java.util._function.DoubleToLongFunction.static
    export function type(className: "java.util.function.DoubleConsumer"): _javatypes.java.lang.Class<_javatypes.java.util._function.DoubleConsumer> & _javatypes.java.util._function.DoubleConsumer.static
    export function type(className: "java.util.function.DoubleBinaryOperator"): _javatypes.java.lang.Class<_javatypes.java.util._function.DoubleBinaryOperator> & _javatypes.java.util._function.DoubleBinaryOperator.static
    export function type(className: "java.util.function.ObjDoubleConsumer"): _javatypes.java.lang.Class<_javatypes.java.util._function.ObjDoubleConsumer> & _javatypes.java.util._function.ObjDoubleConsumer.static
    export function type(className: "java.util.function.DoubleSupplier"): _javatypes.java.lang.Class<_javatypes.java.util._function.DoubleSupplier> & _javatypes.java.util._function.DoubleSupplier.static
    export function type(className: "java.util.stream.Stream"): _javatypes.java.lang.Class<_javatypes.java.util.stream.Stream> & _javatypes.java.util.stream.Stream.static
    export function type(className: "java.util.stream.BaseStream"): _javatypes.java.lang.Class<_javatypes.java.util.stream.BaseStream> & _javatypes.java.util.stream.BaseStream.static
    export function type(className: "java.util.stream.IntStream"): _javatypes.java.lang.Class<_javatypes.java.util.stream.IntStream> & _javatypes.java.util.stream.IntStream.static
    export function type(className: "java.util.stream.LongStream"): _javatypes.java.lang.Class<_javatypes.java.util.stream.LongStream> & _javatypes.java.util.stream.LongStream.static
    export function type(className: "java.util.stream.DoubleStream"): _javatypes.java.lang.Class<_javatypes.java.util.stream.DoubleStream> & _javatypes.java.util.stream.DoubleStream.static
    export function type(className: "java.util.stream.Collector"): _javatypes.java.lang.Class<_javatypes.java.util.stream.Collector> & _javatypes.java.util.stream.Collector.static
    export function type(className: "java.util.stream.Stream.Builder"): _javatypes.java.lang.Class<_javatypes.java.util.stream.Stream.Builder> & _javatypes.java.util.stream.Stream.Builder.static
    export function type(className: "java.util.stream.LongStream.LongMapMultiConsumer"): _javatypes.java.lang.Class<_javatypes.java.util.stream.LongStream.LongMapMultiConsumer> & _javatypes.java.util.stream.LongStream.LongMapMultiConsumer.static
    export function type(className: "java.util.stream.LongStream.Builder"): _javatypes.java.lang.Class<_javatypes.java.util.stream.LongStream.Builder> & _javatypes.java.util.stream.LongStream.Builder.static
    export function type(className: "java.util.stream.IntStream.IntMapMultiConsumer"): _javatypes.java.lang.Class<_javatypes.java.util.stream.IntStream.IntMapMultiConsumer> & _javatypes.java.util.stream.IntStream.IntMapMultiConsumer.static
    export function type(className: "java.util.stream.IntStream.Builder"): _javatypes.java.lang.Class<_javatypes.java.util.stream.IntStream.Builder> & _javatypes.java.util.stream.IntStream.Builder.static
    export function type(className: "java.util.stream.DoubleStream.DoubleMapMultiConsumer"): _javatypes.java.lang.Class<_javatypes.java.util.stream.DoubleStream.DoubleMapMultiConsumer> & _javatypes.java.util.stream.DoubleStream.DoubleMapMultiConsumer.static
    export function type(className: "java.util.stream.DoubleStream.Builder"): _javatypes.java.lang.Class<_javatypes.java.util.stream.DoubleStream.Builder> & _javatypes.java.util.stream.DoubleStream.Builder.static
    export function type(className: "java.util.stream.Collector.Characteristics"): _javatypes.java.lang.Class<_javatypes.java.util.stream.Collector.Characteristics> & _javatypes.java.util.stream.Collector.Characteristics.static
    export function type(className: "java.util.concurrent.TimeUnit"): _javatypes.java.lang.Class<_javatypes.java.util.concurrent.TimeUnit> & _javatypes.java.util.concurrent.TimeUnit.static
    export function type(className: "java.util.concurrent.ExecutorService"): _javatypes.java.lang.Class<_javatypes.java.util.concurrent.ExecutorService> & _javatypes.java.util.concurrent.ExecutorService.static
    export function type(className: "java.util.concurrent.Future"): _javatypes.java.lang.Class<_javatypes.java.util.concurrent.Future> & _javatypes.java.util.concurrent.Future.static
    export function type(className: "java.util.concurrent.Executor"): _javatypes.java.lang.Class<_javatypes.java.util.concurrent.Executor> & _javatypes.java.util.concurrent.Executor.static
    export function type(className: "java.util.concurrent.Callable"): _javatypes.java.lang.Class<_javatypes.java.util.concurrent.Callable> & _javatypes.java.util.concurrent.Callable.static
    export function type(className: "java.util.concurrent.CompletableFuture"): _javatypes.java.lang.Class<_javatypes.java.util.concurrent.CompletableFuture> & _javatypes.java.util.concurrent.CompletableFuture.static
    export function type(className: "java.util.concurrent.CompletionStage"): _javatypes.java.lang.Class<_javatypes.java.util.concurrent.CompletionStage> & _javatypes.java.util.concurrent.CompletionStage.static
    export function type(className: "java.util.random.RandomGenerator"): _javatypes.java.lang.Class<_javatypes.java.util.random.RandomGenerator> & _javatypes.java.util.random.RandomGenerator.static
    export function type(className: "java.nio.ByteBuffer"): _javatypes.java.lang.Class<_javatypes.java.nio.ByteBuffer> & _javatypes.java.nio.ByteBuffer.static
    export function type(className: "java.nio.Buffer"): _javatypes.java.lang.Class<_javatypes.java.nio.Buffer> & _javatypes.java.nio.Buffer.static
    export function type(className: "java.nio.ByteOrder"): _javatypes.java.lang.Class<_javatypes.java.nio.ByteOrder> & _javatypes.java.nio.ByteOrder.static
    export function type(className: "java.nio.CharBuffer"): _javatypes.java.lang.Class<_javatypes.java.nio.CharBuffer> & _javatypes.java.nio.CharBuffer.static
    export function type(className: "java.nio.ShortBuffer"): _javatypes.java.lang.Class<_javatypes.java.nio.ShortBuffer> & _javatypes.java.nio.ShortBuffer.static
    export function type(className: "java.nio.IntBuffer"): _javatypes.java.lang.Class<_javatypes.java.nio.IntBuffer> & _javatypes.java.nio.IntBuffer.static
    export function type(className: "java.nio.LongBuffer"): _javatypes.java.lang.Class<_javatypes.java.nio.LongBuffer> & _javatypes.java.nio.LongBuffer.static
    export function type(className: "java.nio.FloatBuffer"): _javatypes.java.lang.Class<_javatypes.java.nio.FloatBuffer> & _javatypes.java.nio.FloatBuffer.static
    export function type(className: "java.nio.DoubleBuffer"): _javatypes.java.lang.Class<_javatypes.java.nio.DoubleBuffer> & _javatypes.java.nio.DoubleBuffer.static
    export function type(className: "java.nio.MappedByteBuffer"): _javatypes.java.lang.Class<_javatypes.java.nio.MappedByteBuffer> & _javatypes.java.nio.MappedByteBuffer.static
    export function type(className: "java.nio.file.Path"): _javatypes.java.lang.Class<_javatypes.java.nio.file.Path> & _javatypes.java.nio.file.Path.static
    export function type(className: "java.nio.file.Watchable"): _javatypes.java.lang.Class<_javatypes.java.nio.file.Watchable> & _javatypes.java.nio.file.Watchable.static
    export function type(className: "java.nio.file.FileSystem"): _javatypes.java.lang.Class<_javatypes.java.nio.file.FileSystem> & _javatypes.java.nio.file.FileSystem.static
    export function type(className: "java.nio.file.LinkOption"): _javatypes.java.lang.Class<_javatypes.java.nio.file.LinkOption> & _javatypes.java.nio.file.LinkOption.static
    export function type(className: "java.nio.file.WatchService"): _javatypes.java.lang.Class<_javatypes.java.nio.file.WatchService> & _javatypes.java.nio.file.WatchService.static
    export function type(className: "java.nio.file.WatchEvent.Kind"): _javatypes.java.lang.Class<_javatypes.java.nio.file.WatchEvent.Kind> & _javatypes.java.nio.file.WatchEvent.Kind.static
    export function type(className: "java.nio.file.WatchEvent.Modifier"): _javatypes.java.lang.Class<_javatypes.java.nio.file.WatchEvent.Modifier> & _javatypes.java.nio.file.WatchEvent.Modifier.static
    export function type(className: "java.nio.file.WatchKey"): _javatypes.java.lang.Class<_javatypes.java.nio.file.WatchKey> & _javatypes.java.nio.file.WatchKey.static
    export function type(className: "java.nio.file.OpenOption"): _javatypes.java.lang.Class<_javatypes.java.nio.file.OpenOption> & _javatypes.java.nio.file.OpenOption.static
    export function type(className: "java.nio.file.CopyOption"): _javatypes.java.lang.Class<_javatypes.java.nio.file.CopyOption> & _javatypes.java.nio.file.CopyOption.static
    export function type(className: "java.nio.file.WatchEvent"): _javatypes.java.lang.Class<_javatypes.java.nio.file.WatchEvent> & _javatypes.java.nio.file.WatchEvent.static
    export function type(className: "java.nio.file.FileStore"): _javatypes.java.lang.Class<_javatypes.java.nio.file.FileStore> & _javatypes.java.nio.file.FileStore.static
    export function type(className: "java.nio.file.PathMatcher"): _javatypes.java.lang.Class<_javatypes.java.nio.file.PathMatcher> & _javatypes.java.nio.file.PathMatcher.static
    export function type(className: "java.nio.file.DirectoryStream.Filter"): _javatypes.java.lang.Class<_javatypes.java.nio.file.DirectoryStream.Filter> & _javatypes.java.nio.file.DirectoryStream.Filter.static
    export function type(className: "java.nio.file.DirectoryStream"): _javatypes.java.lang.Class<_javatypes.java.nio.file.DirectoryStream> & _javatypes.java.nio.file.DirectoryStream.static
    export function type(className: "java.nio.file.AccessMode"): _javatypes.java.lang.Class<_javatypes.java.nio.file.AccessMode> & _javatypes.java.nio.file.AccessMode.static
    export function type(className: "java.nio.file.spi.FileSystemProvider"): _javatypes.java.lang.Class<_javatypes.java.nio.file.spi.FileSystemProvider> & _javatypes.java.nio.file.spi.FileSystemProvider.static
    export function type(className: "java.nio.file.attribute.UserPrincipalLookupService"): _javatypes.java.lang.Class<_javatypes.java.nio.file.attribute.UserPrincipalLookupService> & _javatypes.java.nio.file.attribute.UserPrincipalLookupService.static
    export function type(className: "java.nio.file.attribute.UserPrincipal"): _javatypes.java.lang.Class<_javatypes.java.nio.file.attribute.UserPrincipal> & _javatypes.java.nio.file.attribute.UserPrincipal.static
    export function type(className: "java.nio.file.attribute.GroupPrincipal"): _javatypes.java.lang.Class<_javatypes.java.nio.file.attribute.GroupPrincipal> & _javatypes.java.nio.file.attribute.GroupPrincipal.static
    export function type(className: "java.nio.file.attribute.FileAttribute"): _javatypes.java.lang.Class<_javatypes.java.nio.file.attribute.FileAttribute> & _javatypes.java.nio.file.attribute.FileAttribute.static
    export function type(className: "java.nio.channels.FileChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.FileChannel> & _javatypes.java.nio.channels.FileChannel.static
    export function type(className: "java.nio.channels.AsynchronousFileChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.AsynchronousFileChannel> & _javatypes.java.nio.channels.AsynchronousFileChannel.static
    export function type(className: "java.nio.channels.SeekableByteChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.SeekableByteChannel> & _javatypes.java.nio.channels.SeekableByteChannel.static
    export function type(className: "java.nio.channels.GatheringByteChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.GatheringByteChannel> & _javatypes.java.nio.channels.GatheringByteChannel.static
    export function type(className: "java.nio.channels.ScatteringByteChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.ScatteringByteChannel> & _javatypes.java.nio.channels.ScatteringByteChannel.static
    export function type(className: "java.nio.channels.WritableByteChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.WritableByteChannel> & _javatypes.java.nio.channels.WritableByteChannel.static
    export function type(className: "java.nio.channels.ReadableByteChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.ReadableByteChannel> & _javatypes.java.nio.channels.ReadableByteChannel.static
    export function type(className: "java.nio.channels.FileChannel.MapMode"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.FileChannel.MapMode> & _javatypes.java.nio.channels.FileChannel.MapMode.static
    export function type(className: "java.nio.channels.FileLock"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.FileLock> & _javatypes.java.nio.channels.FileLock.static
    export function type(className: "java.nio.channels.AsynchronousChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.AsynchronousChannel> & _javatypes.java.nio.channels.AsynchronousChannel.static
    export function type(className: "java.nio.channels.CompletionHandler"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.CompletionHandler> & _javatypes.java.nio.channels.CompletionHandler.static
    export function type(className: "java.nio.channels.ByteChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.ByteChannel> & _javatypes.java.nio.channels.ByteChannel.static
    export function type(className: "java.nio.channels.Channel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.Channel> & _javatypes.java.nio.channels.Channel.static
    export function type(className: "java.nio.channels.InterruptibleChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.InterruptibleChannel> & _javatypes.java.nio.channels.InterruptibleChannel.static
    export function type(className: "java.nio.channels.SocketChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.SocketChannel> & _javatypes.java.nio.channels.SocketChannel.static
    export function type(className: "java.nio.channels.NetworkChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.NetworkChannel> & _javatypes.java.nio.channels.NetworkChannel.static
    export function type(className: "java.nio.channels.SelectableChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.SelectableChannel> & _javatypes.java.nio.channels.SelectableChannel.static
    export function type(className: "java.nio.channels.Selector"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.Selector> & _javatypes.java.nio.channels.Selector.static
    export function type(className: "java.nio.channels.SelectionKey"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.SelectionKey> & _javatypes.java.nio.channels.SelectionKey.static
    export function type(className: "java.nio.channels.DatagramChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.DatagramChannel> & _javatypes.java.nio.channels.DatagramChannel.static
    export function type(className: "java.nio.channels.Pipe"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.Pipe> & _javatypes.java.nio.channels.Pipe.static
    export function type(className: "java.nio.channels.ServerSocketChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.ServerSocketChannel> & _javatypes.java.nio.channels.ServerSocketChannel.static
    export function type(className: "java.nio.channels.MulticastChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.MulticastChannel> & _javatypes.java.nio.channels.MulticastChannel.static
    export function type(className: "java.nio.channels.Pipe.SourceChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.Pipe.SourceChannel> & _javatypes.java.nio.channels.Pipe.SourceChannel.static
    export function type(className: "java.nio.channels.Pipe.SinkChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.Pipe.SinkChannel> & _javatypes.java.nio.channels.Pipe.SinkChannel.static
    export function type(className: "java.nio.channels.MembershipKey"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.MembershipKey> & _javatypes.java.nio.channels.MembershipKey.static
    export function type(className: "java.nio.channels.spi.AbstractInterruptibleChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.spi.AbstractInterruptibleChannel> & _javatypes.java.nio.channels.spi.AbstractInterruptibleChannel.static
    export function type(className: "java.nio.channels.spi.AbstractSelectableChannel"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.spi.AbstractSelectableChannel> & _javatypes.java.nio.channels.spi.AbstractSelectableChannel.static
    export function type(className: "java.nio.channels.spi.SelectorProvider"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.spi.SelectorProvider> & _javatypes.java.nio.channels.spi.SelectorProvider.static
    export function type(className: "java.nio.channels.spi.AbstractSelector"): _javatypes.java.lang.Class<_javatypes.java.nio.channels.spi.AbstractSelector> & _javatypes.java.nio.channels.spi.AbstractSelector.static
    export function type(className: "java.nio.charset.Charset"): _javatypes.java.lang.Class<_javatypes.java.nio.charset.Charset> & _javatypes.java.nio.charset.Charset.static
    export function type(className: "java.nio.charset.CharsetDecoder"): _javatypes.java.lang.Class<_javatypes.java.nio.charset.CharsetDecoder> & _javatypes.java.nio.charset.CharsetDecoder.static
    export function type(className: "java.nio.charset.CharsetEncoder"): _javatypes.java.lang.Class<_javatypes.java.nio.charset.CharsetEncoder> & _javatypes.java.nio.charset.CharsetEncoder.static
    export function type(className: "java.nio.charset.CodingErrorAction"): _javatypes.java.lang.Class<_javatypes.java.nio.charset.CodingErrorAction> & _javatypes.java.nio.charset.CodingErrorAction.static
    export function type(className: "java.nio.charset.CoderResult"): _javatypes.java.lang.Class<_javatypes.java.nio.charset.CoderResult> & _javatypes.java.nio.charset.CoderResult.static
    export function type(className: "java.security.Principal"): _javatypes.java.lang.Class<_javatypes.java.security.Principal> & _javatypes.java.security.Principal.static
    export function type(className: "java.security.ProtectionDomain"): _javatypes.java.lang.Class<_javatypes.java.security.ProtectionDomain> & _javatypes.java.security.ProtectionDomain.static
    export function type(className: "java.security.AccessControlContext"): _javatypes.java.lang.Class<_javatypes.java.security.AccessControlContext> & _javatypes.java.security.AccessControlContext.static
    export function type(className: "java.security.PrivilegedAction"): _javatypes.java.lang.Class<_javatypes.java.security.PrivilegedAction> & _javatypes.java.security.PrivilegedAction.static
    export function type(className: "java.security.PrivilegedExceptionAction"): _javatypes.java.lang.Class<_javatypes.java.security.PrivilegedExceptionAction> & _javatypes.java.security.PrivilegedExceptionAction.static
    export function type(className: "java.security.CodeSource"): _javatypes.java.lang.Class<_javatypes.java.security.CodeSource> & _javatypes.java.security.CodeSource.static
    export function type(className: "java.security.PermissionCollection"): _javatypes.java.lang.Class<_javatypes.java.security.PermissionCollection> & _javatypes.java.security.PermissionCollection.static
    export function type(className: "java.security.Permission"): _javatypes.java.lang.Class<_javatypes.java.security.Permission> & _javatypes.java.security.Permission.static
    export function type(className: "java.security.DomainCombiner"): _javatypes.java.lang.Class<_javatypes.java.security.DomainCombiner> & _javatypes.java.security.DomainCombiner.static
    export function type(className: "java.security.CodeSigner"): _javatypes.java.lang.Class<_javatypes.java.security.CodeSigner> & _javatypes.java.security.CodeSigner.static
    export function type(className: "java.security.Guard"): _javatypes.java.lang.Class<_javatypes.java.security.Guard> & _javatypes.java.security.Guard.static
    export function type(className: "java.security.PublicKey"): _javatypes.java.lang.Class<_javatypes.java.security.PublicKey> & _javatypes.java.security.PublicKey.static
    export function type(className: "java.security.Provider"): _javatypes.java.lang.Class<_javatypes.java.security.Provider> & _javatypes.java.security.Provider.static
    export function type(className: "java.security.Timestamp"): _javatypes.java.lang.Class<_javatypes.java.security.Timestamp> & _javatypes.java.security.Timestamp.static
    export function type(className: "java.security.Key"): _javatypes.java.lang.Class<_javatypes.java.security.Key> & _javatypes.java.security.Key.static
    export function type(className: "java.security.Provider.Service"): _javatypes.java.lang.Class<_javatypes.java.security.Provider.Service> & _javatypes.java.security.Provider.Service.static
    export function type(className: "java.security.cert.Certificate"): _javatypes.java.lang.Class<_javatypes.java.security.cert.Certificate> & _javatypes.java.security.cert.Certificate.static
    export function type(className: "java.security.cert.CertPath"): _javatypes.java.lang.Class<_javatypes.java.security.cert.CertPath> & _javatypes.java.security.cert.CertPath.static
    export function type(className: "java.time.Duration"): _javatypes.java.lang.Class<_javatypes.java.time.Duration> & _javatypes.java.time.Duration.static
    export function type(className: "java.time.Instant"): _javatypes.java.lang.Class<_javatypes.java.time.Instant> & _javatypes.java.time.Instant.static
    export function type(className: "java.time.ZoneOffset"): _javatypes.java.lang.Class<_javatypes.java.time.ZoneOffset> & _javatypes.java.time.ZoneOffset.static
    export function type(className: "java.time.OffsetDateTime"): _javatypes.java.lang.Class<_javatypes.java.time.OffsetDateTime> & _javatypes.java.time.OffsetDateTime.static
    export function type(className: "java.time.ZoneId"): _javatypes.java.lang.Class<_javatypes.java.time.ZoneId> & _javatypes.java.time.ZoneId.static
    export function type(className: "java.time.ZonedDateTime"): _javatypes.java.lang.Class<_javatypes.java.time.ZonedDateTime> & _javatypes.java.time.ZonedDateTime.static
    export function type(className: "java.time.Clock"): _javatypes.java.lang.Class<_javatypes.java.time.Clock> & _javatypes.java.time.Clock.static
    export function type(className: "java.time.LocalDate"): _javatypes.java.lang.Class<_javatypes.java.time.LocalDate> & _javatypes.java.time.LocalDate.static
    export function type(className: "java.time.LocalDateTime"): _javatypes.java.lang.Class<_javatypes.java.time.LocalDateTime> & _javatypes.java.time.LocalDateTime.static
    export function type(className: "java.time.Month"): _javatypes.java.lang.Class<_javatypes.java.time.Month> & _javatypes.java.time.Month.static
    export function type(className: "java.time.DayOfWeek"): _javatypes.java.lang.Class<_javatypes.java.time.DayOfWeek> & _javatypes.java.time.DayOfWeek.static
    export function type(className: "java.time.LocalTime"): _javatypes.java.lang.Class<_javatypes.java.time.LocalTime> & _javatypes.java.time.LocalTime.static
    export function type(className: "java.time.OffsetTime"): _javatypes.java.lang.Class<_javatypes.java.time.OffsetTime> & _javatypes.java.time.OffsetTime.static
    export function type(className: "java.time.InstantSource"): _javatypes.java.lang.Class<_javatypes.java.time.InstantSource> & _javatypes.java.time.InstantSource.static
    export function type(className: "java.time.Period"): _javatypes.java.lang.Class<_javatypes.java.time.Period> & _javatypes.java.time.Period.static
    export function type(className: "java.time.temporal.ChronoUnit"): _javatypes.java.lang.Class<_javatypes.java.time.temporal.ChronoUnit> & _javatypes.java.time.temporal.ChronoUnit.static
    export function type(className: "java.time.temporal.TemporalAmount"): _javatypes.java.lang.Class<_javatypes.java.time.temporal.TemporalAmount> & _javatypes.java.time.temporal.TemporalAmount.static
    export function type(className: "java.time.temporal.TemporalUnit"): _javatypes.java.lang.Class<_javatypes.java.time.temporal.TemporalUnit> & _javatypes.java.time.temporal.TemporalUnit.static
    export function type(className: "java.time.temporal.Temporal"): _javatypes.java.lang.Class<_javatypes.java.time.temporal.Temporal> & _javatypes.java.time.temporal.Temporal.static
    export function type(className: "java.time.temporal.TemporalAccessor"): _javatypes.java.lang.Class<_javatypes.java.time.temporal.TemporalAccessor> & _javatypes.java.time.temporal.TemporalAccessor.static
    export function type(className: "java.time.temporal.TemporalAdjuster"): _javatypes.java.lang.Class<_javatypes.java.time.temporal.TemporalAdjuster> & _javatypes.java.time.temporal.TemporalAdjuster.static
    export function type(className: "java.time.temporal.TemporalField"): _javatypes.java.lang.Class<_javatypes.java.time.temporal.TemporalField> & _javatypes.java.time.temporal.TemporalField.static
    export function type(className: "java.time.temporal.ValueRange"): _javatypes.java.lang.Class<_javatypes.java.time.temporal.ValueRange> & _javatypes.java.time.temporal.ValueRange.static
    export function type(className: "java.time.temporal.TemporalQuery"): _javatypes.java.lang.Class<_javatypes.java.time.temporal.TemporalQuery> & _javatypes.java.time.temporal.TemporalQuery.static
    export function type(className: "java.time.temporal.ChronoField"): _javatypes.java.lang.Class<_javatypes.java.time.temporal.ChronoField> & _javatypes.java.time.temporal.ChronoField.static
    export function type(className: "java.time.format.ResolverStyle"): _javatypes.java.lang.Class<_javatypes.java.time.format.ResolverStyle> & _javatypes.java.time.format.ResolverStyle.static
    export function type(className: "java.time.format.TextStyle"): _javatypes.java.lang.Class<_javatypes.java.time.format.TextStyle> & _javatypes.java.time.format.TextStyle.static
    export function type(className: "java.time.format.DateTimeFormatter"): _javatypes.java.lang.Class<_javatypes.java.time.format.DateTimeFormatter> & _javatypes.java.time.format.DateTimeFormatter.static
    export function type(className: "java.time.format.DecimalStyle"): _javatypes.java.lang.Class<_javatypes.java.time.format.DecimalStyle> & _javatypes.java.time.format.DecimalStyle.static
    export function type(className: "java.time.format.FormatStyle"): _javatypes.java.lang.Class<_javatypes.java.time.format.FormatStyle> & _javatypes.java.time.format.FormatStyle.static
    export function type(className: "java.time.zone.ZoneRules"): _javatypes.java.lang.Class<_javatypes.java.time.zone.ZoneRules> & _javatypes.java.time.zone.ZoneRules.static
    export function type(className: "java.time.zone.ZoneOffsetTransition"): _javatypes.java.lang.Class<_javatypes.java.time.zone.ZoneOffsetTransition> & _javatypes.java.time.zone.ZoneOffsetTransition.static
    export function type(className: "java.time.zone.ZoneOffsetTransitionRule"): _javatypes.java.lang.Class<_javatypes.java.time.zone.ZoneOffsetTransitionRule> & _javatypes.java.time.zone.ZoneOffsetTransitionRule.static
    export function type(className: "java.time.zone.ZoneOffsetTransitionRule.TimeDefinition"): _javatypes.java.lang.Class<_javatypes.java.time.zone.ZoneOffsetTransitionRule.TimeDefinition> & _javatypes.java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.static
    export function type(className: "java.time.chrono.ChronoZonedDateTime"): _javatypes.java.lang.Class<_javatypes.java.time.chrono.ChronoZonedDateTime> & _javatypes.java.time.chrono.ChronoZonedDateTime.static
    export function type(className: "java.time.chrono.Chronology"): _javatypes.java.lang.Class<_javatypes.java.time.chrono.Chronology> & _javatypes.java.time.chrono.Chronology.static
    export function type(className: "java.time.chrono.Era"): _javatypes.java.lang.Class<_javatypes.java.time.chrono.Era> & _javatypes.java.time.chrono.Era.static
    export function type(className: "java.time.chrono.ChronoLocalDate"): _javatypes.java.lang.Class<_javatypes.java.time.chrono.ChronoLocalDate> & _javatypes.java.time.chrono.ChronoLocalDate.static
    export function type(className: "java.time.chrono.ChronoLocalDateTime"): _javatypes.java.lang.Class<_javatypes.java.time.chrono.ChronoLocalDateTime> & _javatypes.java.time.chrono.ChronoLocalDateTime.static
    export function type(className: "java.time.chrono.ChronoPeriod"): _javatypes.java.lang.Class<_javatypes.java.time.chrono.ChronoPeriod> & _javatypes.java.time.chrono.ChronoPeriod.static
    export function type(className: "java.time.chrono.IsoChronology"): _javatypes.java.lang.Class<_javatypes.java.time.chrono.IsoChronology> & _javatypes.java.time.chrono.IsoChronology.static
    export function type(className: "java.time.chrono.IsoEra"): _javatypes.java.lang.Class<_javatypes.java.time.chrono.IsoEra> & _javatypes.java.time.chrono.IsoEra.static
    export function type(className: "java.time.chrono.AbstractChronology"): _javatypes.java.lang.Class<_javatypes.java.time.chrono.AbstractChronology> & _javatypes.java.time.chrono.AbstractChronology.static
    export function type(className: "java.math.BigDecimal"): _javatypes.java.lang.Class<_javatypes.java.math.BigDecimal> & _javatypes.java.math.BigDecimal.static
    export function type(className: "java.math.BigInteger"): _javatypes.java.lang.Class<_javatypes.java.math.BigInteger> & _javatypes.java.math.BigInteger.static
    export function type(className: "java.math.MathContext"): _javatypes.java.lang.Class<_javatypes.java.math.MathContext> & _javatypes.java.math.MathContext.static
    export function type(className: "java.math.RoundingMode"): _javatypes.java.lang.Class<_javatypes.java.math.RoundingMode> & _javatypes.java.math.RoundingMode.static
    export function type(className: "java.net.Socket"): _javatypes.java.lang.Class<_javatypes.java.net.Socket> & _javatypes.java.net.Socket.static
    export function type(className: "java.net.SocketAddress"): _javatypes.java.lang.Class<_javatypes.java.net.SocketAddress> & _javatypes.java.net.SocketAddress.static
    export function type(className: "java.net.InetAddress"): _javatypes.java.lang.Class<_javatypes.java.net.InetAddress> & _javatypes.java.net.InetAddress.static
    export function type(className: "java.net.SocketOption"): _javatypes.java.lang.Class<_javatypes.java.net.SocketOption> & _javatypes.java.net.SocketOption.static
    export function type(className: "java.net.Proxy"): _javatypes.java.lang.Class<_javatypes.java.net.Proxy> & _javatypes.java.net.Proxy.static
    export function type(className: "java.net.SocketImplFactory"): _javatypes.java.lang.Class<_javatypes.java.net.SocketImplFactory> & _javatypes.java.net.SocketImplFactory.static
    export function type(className: "java.net.SocketImpl"): _javatypes.java.lang.Class<_javatypes.java.net.SocketImpl> & _javatypes.java.net.SocketImpl.static
    export function type(className: "java.net.NetworkInterface"): _javatypes.java.lang.Class<_javatypes.java.net.NetworkInterface> & _javatypes.java.net.NetworkInterface.static
    export function type(className: "java.net.Proxy.Type"): _javatypes.java.lang.Class<_javatypes.java.net.Proxy.Type> & _javatypes.java.net.Proxy.Type.static
    export function type(className: "java.net.SocketOptions"): _javatypes.java.lang.Class<_javatypes.java.net.SocketOptions> & _javatypes.java.net.SocketOptions.static
    export function type(className: "java.net.InterfaceAddress"): _javatypes.java.lang.Class<_javatypes.java.net.InterfaceAddress> & _javatypes.java.net.InterfaceAddress.static
    export function type(className: "java.net.ProtocolFamily"): _javatypes.java.lang.Class<_javatypes.java.net.ProtocolFamily> & _javatypes.java.net.ProtocolFamily.static
    export function type(className: "java.net.DatagramSocket"): _javatypes.java.lang.Class<_javatypes.java.net.DatagramSocket> & _javatypes.java.net.DatagramSocket.static
    export function type(className: "java.net.ServerSocket"): _javatypes.java.lang.Class<_javatypes.java.net.ServerSocket> & _javatypes.java.net.ServerSocket.static
    export function type(className: "java.net.DatagramPacket"): _javatypes.java.lang.Class<_javatypes.java.net.DatagramPacket> & _javatypes.java.net.DatagramPacket.static
    export function type(className: "java.net.DatagramSocketImplFactory"): _javatypes.java.lang.Class<_javatypes.java.net.DatagramSocketImplFactory> & _javatypes.java.net.DatagramSocketImplFactory.static
    export function type(className: "java.net.DatagramSocketImpl"): _javatypes.java.lang.Class<_javatypes.java.net.DatagramSocketImpl> & _javatypes.java.net.DatagramSocketImpl.static
    export function type(className: "java.text.ParsePosition"): _javatypes.java.lang.Class<_javatypes.java.text.ParsePosition> & _javatypes.java.text.ParsePosition.static
    export function type(className: "java.text.Format"): _javatypes.java.lang.Class<_javatypes.java.text.Format> & _javatypes.java.text.Format.static
    export function type(className: "java.text.FieldPosition"): _javatypes.java.lang.Class<_javatypes.java.text.FieldPosition> & _javatypes.java.text.FieldPosition.static
    export function type(className: "java.text.AttributedCharacterIterator"): _javatypes.java.lang.Class<_javatypes.java.text.AttributedCharacterIterator> & _javatypes.java.text.AttributedCharacterIterator.static
    export function type(className: "java.text.CharacterIterator"): _javatypes.java.lang.Class<_javatypes.java.text.CharacterIterator> & _javatypes.java.text.CharacterIterator.static
    export function type(className: "java.text.AttributedCharacterIterator.Attribute"): _javatypes.java.lang.Class<_javatypes.java.text.AttributedCharacterIterator.Attribute> & _javatypes.java.text.AttributedCharacterIterator.Attribute.static
    export function type(className: "java.text.Format.Field"): _javatypes.java.lang.Class<_javatypes.java.text.Format.Field> & _javatypes.java.text.Format.Field.static
    export function type(className: "org.slf4j.Logger"): _javatypes.java.lang.Class<_javatypes.org.slf4j.Logger> & _javatypes.org.slf4j.Logger.static
    export function type(className: "org.slf4j.Marker"): _javatypes.java.lang.Class<_javatypes.org.slf4j.Marker> & _javatypes.org.slf4j.Marker.static
    export function type(className: "javassist.CtClass"): _javatypes.java.lang.Class<_javatypes.javassist.CtClass> & _javatypes.javassist.CtClass.static
    export function type(className: "javassist.CtBehavior"): _javatypes.java.lang.Class<_javatypes.javassist.CtBehavior> & _javatypes.javassist.CtBehavior.static
    export function type(className: "javassist.CtField.Initializer"): _javatypes.java.lang.Class<_javatypes.javassist.CtField.Initializer> & _javatypes.javassist.CtField.Initializer.static
    export function type(className: "javassist.CtMember"): _javatypes.java.lang.Class<_javatypes.javassist.CtMember> & _javatypes.javassist.CtMember.static
    export function type(className: "javassist.CodeConverter"): _javatypes.java.lang.Class<_javatypes.javassist.CodeConverter> & _javatypes.javassist.CodeConverter.static
    export function type(className: "javassist.ClassPool"): _javatypes.java.lang.Class<_javatypes.javassist.ClassPool> & _javatypes.javassist.ClassPool.static
    export function type(className: "javassist.ClassMap"): _javatypes.java.lang.Class<_javatypes.javassist.ClassMap> & _javatypes.javassist.ClassMap.static
    export function type(className: "javassist.CtMethod"): _javatypes.java.lang.Class<_javatypes.javassist.CtMethod> & _javatypes.javassist.CtMethod.static
    export function type(className: "javassist.CtField"): _javatypes.java.lang.Class<_javatypes.javassist.CtField> & _javatypes.javassist.CtField.static
    export function type(className: "javassist.CtConstructor"): _javatypes.java.lang.Class<_javatypes.javassist.CtConstructor> & _javatypes.javassist.CtConstructor.static
    export function type(className: "javassist.CodeConverter.ArrayAccessReplacementMethodNames"): _javatypes.java.lang.Class<_javatypes.javassist.CodeConverter.ArrayAccessReplacementMethodNames> & _javatypes.javassist.CodeConverter.ArrayAccessReplacementMethodNames.static
    export function type(className: "javassist.ClassPath"): _javatypes.java.lang.Class<_javatypes.javassist.ClassPath> & _javatypes.javassist.ClassPath.static
    export function type(className: "javassist.CtMethod.ConstParameter"): _javatypes.java.lang.Class<_javatypes.javassist.CtMethod.ConstParameter> & _javatypes.javassist.CtMethod.ConstParameter.static
    export function type(className: "javassist.util.proxy.ProxyFactory"): _javatypes.java.lang.Class<_javatypes.javassist.util.proxy.ProxyFactory> & _javatypes.javassist.util.proxy.ProxyFactory.static
    export function type(className: "javassist.util.proxy.MethodFilter"): _javatypes.java.lang.Class<_javatypes.javassist.util.proxy.MethodFilter> & _javatypes.javassist.util.proxy.MethodFilter.static
    export function type(className: "javassist.util.proxy.MethodHandler"): _javatypes.java.lang.Class<_javatypes.javassist.util.proxy.MethodHandler> & _javatypes.javassist.util.proxy.MethodHandler.static
    export function type(className: "javassist.util.proxy.ProxyFactory.ClassLoaderProvider"): _javatypes.java.lang.Class<_javatypes.javassist.util.proxy.ProxyFactory.ClassLoaderProvider> & _javatypes.javassist.util.proxy.ProxyFactory.ClassLoaderProvider.static
    export function type(className: "javassist.util.proxy.ProxyFactory.UniqueName"): _javatypes.java.lang.Class<_javatypes.javassist.util.proxy.ProxyFactory.UniqueName> & _javatypes.javassist.util.proxy.ProxyFactory.UniqueName.static
    export function type(className: "javassist.util.proxy.Proxy"): _javatypes.java.lang.Class<_javatypes.javassist.util.proxy.Proxy> & _javatypes.javassist.util.proxy.Proxy.static
    export function type(className: "javassist.bytecode.ConstPool"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.ConstPool> & _javatypes.javassist.bytecode.ConstPool.static
    export function type(className: "javassist.bytecode.MethodInfo"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.MethodInfo> & _javatypes.javassist.bytecode.MethodInfo.static
    export function type(className: "javassist.bytecode.ClassFile"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.ClassFile> & _javatypes.javassist.bytecode.ClassFile.static
    export function type(className: "javassist.bytecode.Opcode"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.Opcode> & _javatypes.javassist.bytecode.Opcode.static
    export function type(className: "javassist.bytecode.FieldInfo"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.FieldInfo> & _javatypes.javassist.bytecode.FieldInfo.static
    export function type(className: "javassist.bytecode.AttributeInfo"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.AttributeInfo> & _javatypes.javassist.bytecode.AttributeInfo.static
    export function type(className: "javassist.bytecode.ExceptionsAttribute"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.ExceptionsAttribute> & _javatypes.javassist.bytecode.ExceptionsAttribute.static
    export function type(className: "javassist.bytecode.CodeAttribute"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.CodeAttribute> & _javatypes.javassist.bytecode.CodeAttribute.static
    export function type(className: "javassist.bytecode.CodeIterator"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.CodeIterator> & _javatypes.javassist.bytecode.CodeIterator.static
    export function type(className: "javassist.bytecode.ExceptionTable"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.ExceptionTable> & _javatypes.javassist.bytecode.ExceptionTable.static
    export function type(className: "javassist.bytecode.StackMapTable"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.StackMapTable> & _javatypes.javassist.bytecode.StackMapTable.static
    export function type(className: "javassist.bytecode.StackMap"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.StackMap> & _javatypes.javassist.bytecode.StackMap.static
    export function type(className: "javassist.bytecode.CodeIterator.Gap"): _javatypes.java.lang.Class<_javatypes.javassist.bytecode.CodeIterator.Gap> & _javatypes.javassist.bytecode.CodeIterator.Gap.static
    export function type(className: "javassist.expr.ExprEditor"): _javatypes.java.lang.Class<_javatypes.javassist.expr.ExprEditor> & _javatypes.javassist.expr.ExprEditor.static
    export function type(className: "javassist.expr.NewExpr"): _javatypes.java.lang.Class<_javatypes.javassist.expr.NewExpr> & _javatypes.javassist.expr.NewExpr.static
    export function type(className: "javassist.expr.NewArray"): _javatypes.java.lang.Class<_javatypes.javassist.expr.NewArray> & _javatypes.javassist.expr.NewArray.static
    export function type(className: "javassist.expr.MethodCall"): _javatypes.java.lang.Class<_javatypes.javassist.expr.MethodCall> & _javatypes.javassist.expr.MethodCall.static
    export function type(className: "javassist.expr.ConstructorCall"): _javatypes.java.lang.Class<_javatypes.javassist.expr.ConstructorCall> & _javatypes.javassist.expr.ConstructorCall.static
    export function type(className: "javassist.expr.FieldAccess"): _javatypes.java.lang.Class<_javatypes.javassist.expr.FieldAccess> & _javatypes.javassist.expr.FieldAccess.static
    export function type(className: "javassist.expr.Instanceof"): _javatypes.java.lang.Class<_javatypes.javassist.expr.Instanceof> & _javatypes.javassist.expr.Instanceof.static
    export function type(className: "javassist.expr.Cast"): _javatypes.java.lang.Class<_javatypes.javassist.expr.Cast> & _javatypes.javassist.expr.Cast.static
    export function type(className: "javassist.expr.Handler"): _javatypes.java.lang.Class<_javatypes.javassist.expr.Handler> & _javatypes.javassist.expr.Handler.static
    export function type(className: "javassist.expr.Expr"): _javatypes.java.lang.Class<_javatypes.javassist.expr.Expr> & _javatypes.javassist.expr.Expr.static
    export function type(className: "javassist.compiler.AccessorMaker"): _javatypes.java.lang.Class<_javatypes.javassist.compiler.AccessorMaker> & _javatypes.javassist.compiler.AccessorMaker.static
}